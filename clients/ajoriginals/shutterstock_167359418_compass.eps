%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Compass rose 2 over white paper sticker isolated on white - eps10.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Metal_Tank
%%CreationDate: 12/14/2013
%%BoundingBox: 0 0 1135 1141
%%HiResBoundingBox: 0 0 1134.1431 1140.6519
%%CropBox: 0 0 1134.1431 1140.6519
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2013-12-14T20:40:16+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2013-12-14T20:40:16+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-12-14T20:40:16+03:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9JTTy+q4DkAEgAHCqz1Z&#xA;v52+84od6kp/bb7zirfqSfzH7zilvnJ/MfvOKu5P4n78Vb5N4nArfJvE4q3ybxOKuqfHFW9/HFW6&#xA;nxxVvfxxV2+Kt74q3irsVbpireKuxVojFVpGKrSW7E4qt5yDox+/FW/rVwP28VXDUZh9oAj7v64q&#xA;qrqkf7akfLfFVeO8t3+y4r4dP14qrAg4q7FXYq7FUlk/vG+Z/XhQtpireKt0xVumKW6Yq3TArdMV&#xA;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&#xA;2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>44.097222</stDim:w>
            <stDim:h>44.097222</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>New Color Swatch</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1AE42F345B49E3118A96E410405EDB69</stEvt:instanceID>
                  <stEvt:when>2013-11-09T19:23:01+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1CE42F345B49E3118A96E410405EDB69</stEvt:instanceID>
                  <stEvt:when>2013-11-09T19:25:03+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1FE42F345B49E3118A96E410405EDB69</stEvt:instanceID>
                  <stEvt:when>2013-11-09T19:33:30+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5D3D18B71852E31180A99F7988CD2009</stEvt:instanceID>
                  <stEvt:when>2013-11-20T22:19:45+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:E42FF850D964E3118203E05BB7B945C5</stEvt:instanceID>
                  <stEvt:when>2013-12-14T19:31:36+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E55EC09DE64E311AA038F26BB4965A7</stEvt:instanceID>
                  <stEvt:when>2013-12-14T20:40:16+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:E42FF850D964E3118203E05BB7B945C5</stRef:instanceID>
            <stRef:documentID>xmp.did:E42FF850D964E3118203E05BB7B945C5</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:1AE42F345B49E3118A96E410405EDB69</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:2E55EC09DE64E311AA038F26BB4965A7</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:2E55EC09DE64E311AA038F26BB4965A7</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:1AE42F345B49E3118A96E410405EDB69</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1140.65 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1140.65 li
1134.14 1140.65 li
1134.14 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1107.75 1122.44 mo
1107.75 1122.44 386.206 1160.02 52.022 1127.22 cv
18.022 993.215 1.82959 776.865 1.82959 776.865 cv
1107.75 1122.44 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
1095.87 1120.9 mo
1095.87 1120.9 382.696 1158.34 52.6265 1125.54 cv
18.3657 992.794 2.64697 778.567 2.41211 777.41 cv
1095.87 1120.9 li
cp
.996111 .996111 .996111 rgb
f
1084 1119.36 mo
1084 1119.36 379.186 1156.65 53.231 1123.86 cv
18.71 992.373 3.46436 780.269 2.99512 777.956 cv
1084 1119.36 li
cp
.992222 .992222 .992222 rgb
f
1072.13 1117.82 mo
1072.13 1117.82 375.676 1154.97 53.835 1122.18 cv
19.0537 991.952 4.28174 781.971 3.57764 778.5 cv
1072.13 1117.82 li
cp
.988333 .988333 .988333 rgb
f
1060.25 1116.29 mo
1060.25 1116.29 372.166 1153.28 54.4395 1120.5 cv
19.3979 991.53 5.09912 783.672 4.16064 779.045 cv
1060.25 1116.29 li
cp
.984445 .984445 .984445 rgb
f
1048.38 1114.75 mo
1048.38 1114.75 368.656 1151.6 55.0439 1118.82 cv
19.7417 991.109 5.9165 785.375 4.74316 779.591 cv
1048.38 1114.75 li
cp
.980556 .980556 .980556 rgb
f
1036.51 1113.21 mo
1036.51 1113.21 365.146 1149.92 55.6484 1117.15 cv
20.0854 990.687 6.73389 787.077 5.32617 780.136 cv
1036.51 1113.21 li
cp
.976667 .976667 .976667 rgb
f
1024.63 1111.67 mo
1024.63 1111.67 361.636 1148.23 56.2524 1115.47 cv
20.4297 990.266 7.55176 788.779 5.90869 780.681 cv
1024.63 1111.67 li
cp
.972778 .972778 .972778 rgb
f
1012.76 1110.13 mo
1012.76 1110.13 358.125 1146.55 56.8569 1113.79 cv
20.7734 989.844 8.36914 790.481 6.4917 781.227 cv
1012.76 1110.13 li
cp
.968889 .968889 .968889 rgb
f
1000.88 1108.6 mo
1000.88 1108.6 354.616 1144.86 57.4614 1112.11 cv
21.1172 989.423 9.18652 792.183 7.07422 781.772 cv
1000.88 1108.6 li
cp
.965 .965 .965 rgb
f
989.009 1107.06 mo
989.009 1107.06 351.105 1143.18 58.0659 1110.43 cv
21.4614 989.001 10.0039 793.885 7.65723 782.317 cv
989.009 1107.06 li
cp
.961111 .961111 .961111 rgb
f
977.135 1105.52 mo
977.135 1105.52 347.595 1141.49 58.6704 1108.75 cv
21.8052 988.581 10.8213 795.586 8.23975 782.863 cv
977.135 1105.52 li
cp
.957222 .957222 .957222 rgb
f
965.262 1103.98 mo
965.262 1103.98 344.085 1139.81 59.2744 1107.08 cv
22.1494 988.159 11.6387 797.289 8.82275 783.408 cv
965.262 1103.98 li
cp
.953333 .953333 .953333 rgb
f
953.388 1102.44 mo
953.388 1102.44 340.575 1138.13 59.8789 1105.4 cv
22.4932 987.738 12.4561 798.991 9.40527 783.953 cv
953.388 1102.44 li
cp
.949445 .949445 .949445 rgb
f
941.514 1100.91 mo
941.514 1100.91 337.065 1136.44 60.4834 1103.72 cv
22.8369 987.316 13.2734 800.693 9.98828 784.499 cv
941.514 1100.91 li
cp
.945556 .945556 .945556 rgb
f
929.64 1099.37 mo
929.64 1099.37 333.555 1134.76 61.0879 1102.04 cv
23.1812 986.895 14.0908 802.395 10.5708 785.043 cv
929.64 1099.37 li
cp
.941667 .941667 .941667 rgb
f
917.766 1097.83 mo
917.766 1097.83 330.045 1133.07 61.6919 1100.36 cv
23.5249 986.473 14.9082 804.097 11.1538 785.588 cv
917.766 1097.83 li
cp
.937778 .937778 .937778 rgb
f
905.892 1096.29 mo
905.892 1096.29 326.535 1131.39 62.2964 1098.68 cv
23.8691 986.052 15.7256 805.799 11.7363 786.134 cv
905.892 1096.29 li
cp
.933889 .933889 .933889 rgb
f
894.018 1094.75 mo
894.018 1094.75 323.025 1129.71 62.9009 1097.01 cv
24.2129 985.631 16.543 807.5 12.3193 786.679 cv
894.018 1094.75 li
cp
.93 .93 .93 rgb
f
882.144 1093.22 mo
882.144 1093.22 319.515 1128.02 63.5054 1095.33 cv
24.5566 985.209 17.3608 809.203 12.9019 787.224 cv
882.144 1093.22 li
cp
.926111 .926111 .926111 rgb
f
870.27 1091.68 mo
870.27 1091.68 316.005 1126.34 64.1099 1093.65 cv
24.9009 984.789 18.1782 810.905 13.4849 787.77 cv
870.27 1091.68 li
cp
.922222 .922222 .922222 rgb
f
858.396 1090.14 mo
858.396 1090.14 312.495 1124.65 64.7139 1091.97 cv
25.2446 984.367 18.9956 812.607 14.0674 788.315 cv
858.396 1090.14 li
cp
.918333 .918333 .918333 rgb
f
846.522 1088.6 mo
846.522 1088.6 308.984 1122.97 65.3184 1090.29 cv
25.5889 983.946 19.813 814.309 14.6504 788.86 cv
846.522 1088.6 li
cp
.914445 .914445 .914445 rgb
f
834.649 1087.06 mo
834.649 1087.06 305.475 1121.29 65.9229 1088.61 cv
25.9326 983.524 20.6304 816.011 15.2329 789.406 cv
834.649 1087.06 li
cp
.910556 .910556 .910556 rgb
f
822.775 1085.53 mo
822.775 1085.53 301.964 1119.6 66.5273 1086.94 cv
26.2764 983.103 21.4478 817.713 15.8159 789.951 cv
822.775 1085.53 li
cp
.906667 .906667 .906667 rgb
f
810.901 1083.99 mo
810.901 1083.99 298.455 1117.92 67.1313 1085.26 cv
26.6206 982.681 22.2651 819.415 16.3984 790.496 cv
810.901 1083.99 li
cp
.902778 .902778 .902778 rgb
f
799.027 1082.45 mo
799.027 1082.45 294.944 1116.23 67.7358 1083.58 cv
26.9644 982.26 23.0825 821.117 16.9814 791.042 cv
799.027 1082.45 li
cp
.898889 .898889 .898889 rgb
f
787.153 1080.91 mo
787.153 1080.91 291.434 1114.55 68.3403 1081.9 cv
27.3081 981.838 23.8999 822.819 17.564 791.586 cv
787.153 1080.91 li
cp
.895 .895 .895 rgb
f
775.279 1079.37 mo
775.279 1079.37 287.924 1112.87 68.9448 1080.22 cv
27.6523 981.417 24.7173 824.521 18.147 792.131 cv
775.279 1079.37 li
cp
.891111 .891111 .891111 rgb
f
763.405 1077.84 mo
763.405 1077.84 284.414 1111.18 69.5493 1078.54 cv
27.9961 980.996 25.5347 826.223 18.7295 792.677 cv
763.405 1077.84 li
cp
.887222 .887222 .887222 rgb
f
751.531 1076.3 mo
751.531 1076.3 280.904 1109.5 70.1533 1076.87 cv
28.3403 980.575 26.3521 827.925 19.3125 793.222 cv
751.531 1076.3 li
cp
.883333 .883333 .883333 rgb
f
739.657 1074.76 mo
739.657 1074.76 277.394 1107.81 70.7578 1075.19 cv
28.6841 980.153 27.1699 829.627 19.895 793.767 cv
739.657 1074.76 li
cp
.879444 .879444 .879444 rgb
f
727.783 1073.22 mo
727.783 1073.22 273.884 1106.13 71.3623 1073.51 cv
29.0278 979.732 27.9873 831.33 20.478 794.313 cv
727.783 1073.22 li
cp
.875556 .875556 .875556 rgb
f
715.909 1071.68 mo
715.909 1071.68 270.374 1104.44 71.9668 1071.83 cv
29.3721 979.31 28.8047 833.031 21.0605 794.858 cv
715.909 1071.68 li
cp
.871667 .871667 .871667 rgb
f
704.036 1070.15 mo
704.036 1070.15 266.864 1102.76 72.5708 1070.15 cv
29.7158 978.889 29.6221 834.733 21.6436 795.403 cv
704.036 1070.15 li
cp
.867778 .867778 .867778 rgb
f
692.162 1068.61 mo
692.162 1068.61 263.354 1101.08 73.1753 1068.47 cv
30.0601 978.467 30.4395 836.435 22.2261 795.949 cv
692.162 1068.61 li
cp
.863889 .863889 .863889 rgb
f
680.288 1067.07 mo
680.288 1067.07 259.844 1099.39 73.7798 1066.8 cv
30.4038 978.046 31.2568 838.137 22.8091 796.494 cv
680.288 1067.07 li
cp
.86 .86 .86 rgb
f
668.414 1065.53 mo
668.414 1065.53 256.333 1097.71 74.3843 1065.12 cv
30.7476 977.625 32.0742 839.839 23.3916 797.039 cv
668.414 1065.53 li
cp
.856111 .856111 .856111 rgb
f
656.54 1063.99 mo
656.54 1063.99 252.823 1096.02 74.9888 1063.44 cv
31.0918 977.204 32.8916 841.542 23.9746 797.584 cv
656.54 1063.99 li
cp
.852222 .852222 .852222 rgb
f
644.666 1062.46 mo
644.666 1062.46 249.313 1094.34 75.5928 1061.76 cv
31.4355 976.783 33.709 843.244 24.5571 798.129 cv
644.666 1062.46 li
cp
.848333 .848333 .848333 rgb
f
632.792 1060.92 mo
632.792 1060.92 245.803 1092.66 76.1973 1060.08 cv
31.7798 976.361 34.5264 844.945 25.1401 798.674 cv
632.792 1060.92 li
cp
.844445 .844445 .844445 rgb
f
620.917 1059.38 mo
620.917 1059.38 242.293 1090.97 76.8018 1058.4 cv
32.1235 975.94 35.3438 846.647 25.7227 799.22 cv
620.917 1059.38 li
cp
.840556 .840556 .840556 rgb
f
609.043 1057.84 mo
609.043 1057.84 238.783 1089.29 77.4063 1056.73 cv
32.4673 975.518 36.1611 848.349 26.3057 799.765 cv
609.043 1057.84 li
cp
.836667 .836667 .836667 rgb
f
597.169 1056.3 mo
597.169 1056.3 235.273 1087.6 78.0103 1055.05 cv
32.8115 975.097 36.979 850.051 26.8882 800.31 cv
597.169 1056.3 li
cp
.832778 .832778 .832778 rgb
f
585.295 1054.77 mo
585.295 1054.77 231.763 1085.92 78.6147 1053.37 cv
33.1553 974.675 37.7964 851.753 27.4712 800.856 cv
585.295 1054.77 li
cp
.828889 .828889 .828889 rgb
f
573.422 1053.23 mo
573.422 1053.23 228.253 1084.24 79.2192 1051.69 cv
33.499 974.254 38.6138 853.456 28.0537 801.401 cv
573.422 1053.23 li
cp
.825 .825 .825 rgb
f
561.548 1051.69 mo
561.548 1051.69 224.743 1082.55 79.8237 1050.01 cv
33.8433 973.833 39.4312 855.158 28.6367 801.946 cv
561.548 1051.69 li
cp
.821111 .821111 .821111 rgb
f
549.674 1050.15 mo
549.674 1050.15 221.233 1080.87 80.4282 1048.33 cv
34.187 973.412 40.2485 856.859 29.2192 802.492 cv
549.674 1050.15 li
cp
.817222 .817222 .817222 rgb
f
537.8 1048.61 mo
537.8 1048.61 217.723 1079.18 81.0322 1046.66 cv
34.5313 972.99 41.0659 858.561 29.8022 803.037 cv
537.8 1048.61 li
cp
.813333 .813333 .813333 rgb
f
525.926 1047.08 mo
525.926 1047.08 214.212 1077.5 81.6367 1044.98 cv
34.875 972.569 41.8833 860.263 30.3848 803.582 cv
525.926 1047.08 li
cp
.809444 .809444 .809444 rgb
f
514.052 1045.54 mo
514.052 1045.54 210.703 1075.81 82.2412 1043.3 cv
35.2188 972.147 42.7007 861.965 30.9678 804.127 cv
514.052 1045.54 li
cp
.805556 .805556 .805556 rgb
f
502.178 1044 mo
502.178 1044 207.192 1074.13 82.8457 1041.62 cv
35.563 971.726 43.5181 863.667 31.5503 804.672 cv
502.178 1044 li
cp
.801667 .801667 .801667 rgb
f
490.304 1042.46 mo
490.304 1042.46 203.683 1072.45 83.4497 1039.94 cv
35.9067 971.304 44.3354 865.37 32.1333 805.217 cv
490.304 1042.46 li
cp
.797778 .797778 .797778 rgb
f
478.431 1040.93 mo
478.431 1040.93 200.172 1070.76 84.0542 1038.26 cv
36.251 970.883 45.1528 867.072 32.7158 805.763 cv
478.431 1040.93 li
cp
.793889 .793889 .793889 rgb
f
466.557 1039.39 mo
466.557 1039.39 196.662 1069.08 84.6587 1036.59 cv
36.5947 970.462 45.9702 868.773 33.2988 806.308 cv
466.557 1039.39 li
cp
.79 .79 .79 rgb
f
454.683 1037.85 mo
454.683 1037.85 193.152 1067.4 85.2632 1034.91 cv
36.9385 970.041 46.7881 870.475 33.8813 806.853 cv
454.683 1037.85 li
cp
.786111 .786111 .786111 rgb
f
442.809 1036.31 mo
442.809 1036.31 189.642 1065.71 85.8677 1033.23 cv
37.2827 969.62 47.6055 872.177 34.4644 807.399 cv
442.809 1036.31 li
cp
.782222 .782222 .782222 rgb
f
430.935 1034.77 mo
430.935 1034.77 186.132 1064.03 86.4717 1031.55 cv
37.6265 969.198 48.4229 873.879 35.0469 807.944 cv
430.935 1034.77 li
cp
.778333 .778333 .778333 rgb
f
419.061 1033.23 mo
419.061 1033.23 182.622 1062.34 87.0762 1029.87 cv
37.9707 968.777 49.2402 875.582 35.6299 808.489 cv
419.061 1033.23 li
cp
.774444 .774444 .774444 rgb
f
407.187 1031.7 mo
407.187 1031.7 179.112 1060.66 87.6807 1028.19 cv
38.3145 968.355 50.0576 877.284 36.2124 809.035 cv
407.187 1031.7 li
cp
.770556 .770556 .770556 rgb
f
395.313 1030.16 mo
395.313 1030.16 175.602 1058.97 88.2852 1026.52 cv
38.6582 967.934 50.875 878.986 36.7954 809.58 cv
395.313 1030.16 li
cp
.766667 .766667 .766667 rgb
f
383.439 1028.62 mo
383.439 1028.62 172.092 1057.29 88.8892 1024.84 cv
39.0024 967.512 51.6924 880.688 37.3779 810.125 cv
383.439 1028.62 li
cp
.762778 .762778 .762778 rgb
f
371.565 1027.08 mo
371.565 1027.08 168.582 1055.61 89.4937 1023.16 cv
39.3462 967.091 52.5098 882.389 37.9609 810.67 cv
371.565 1027.08 li
cp
.758889 .758889 .758889 rgb
f
359.691 1025.55 mo
359.691 1025.55 165.072 1053.92 90.0981 1021.48 cv
39.6899 966.669 53.3271 884.091 38.5435 811.215 cv
359.691 1025.55 li
cp
.755 .755 .755 rgb
f
347.817 1024.01 mo
347.817 1024.01 161.562 1052.24 90.7026 1019.8 cv
40.0342 966.249 54.1445 885.793 39.1265 811.76 cv
347.817 1024.01 li
cp
.751111 .751111 .751111 rgb
f
335.943 1022.47 mo
335.943 1022.47 158.051 1050.55 91.3071 1018.12 cv
40.3779 965.827 54.9619 887.496 39.709 812.306 cv
335.943 1022.47 li
cp
.747222 .747222 .747222 rgb
f
324.069 1020.93 mo
324.069 1020.93 154.542 1048.87 91.9111 1016.45 cv
40.7222 965.406 55.7793 889.198 40.292 812.851 cv
324.069 1020.93 li
cp
.743333 .743333 .743333 rgb
f
312.195 1019.39 mo
312.195 1019.39 151.031 1047.19 92.5156 1014.77 cv
41.0659 964.984 56.5972 890.9 40.8745 813.396 cv
312.195 1019.39 li
cp
.739444 .739444 .739444 rgb
f
300.321 1017.86 mo
300.321 1017.86 147.521 1045.5 93.1201 1013.09 cv
41.4097 964.563 57.4146 892.602 41.4575 813.942 cv
300.321 1017.86 li
cp
.735556 .735556 .735556 rgb
f
288.447 1016.32 mo
288.447 1016.32 144.011 1043.82 93.7246 1011.41 cv
41.7539 964.141 58.2319 894.303 42.04 814.487 cv
288.447 1016.32 li
cp
.731667 .731667 .731667 rgb
f
276.574 1014.78 mo
276.574 1014.78 140.501 1042.13 94.3286 1009.73 cv
42.0977 963.72 59.0493 896.005 42.623 815.032 cv
276.574 1014.78 li
cp
.727778 .727778 .727778 rgb
f
264.7 1013.24 mo
264.7 1013.24 136.991 1040.45 94.9331 1008.05 cv
42.4419 963.298 59.8667 897.708 43.2056 815.578 cv
264.7 1013.24 li
cp
.723889 .723889 .723889 rgb
f
252.826 1011.7 mo
252.826 1011.7 133.481 1038.77 95.5376 1006.38 cv
42.7856 962.877 60.6841 899.41 43.7886 816.123 cv
252.826 1011.7 li
cp
.72 .72 .72 rgb
f
1107.75 1100.81 mo
1107.75 1100.81 1130.97 550.455 1134.14 104.948 cv
1026.09 38.5332 794.655 .103516 794.655 .103516 cv
1107.75 1100.81 li
cp
1 1 1 rgb
f
1106.7 1084.88 mo
1106.7 1084.88 1129.17 542.219 1131.67 105.474 cv
1025.09 39.4727 796.539 .526855 794.962 .207031 cv
1106.7 1084.88 li
cp
.99617 .99617 .99617 rgb
f
1105.65 1068.95 mo
1105.65 1068.95 1127.38 533.984 1129.2 105.999 cv
1024.09 40.4126 798.423 .950195 795.269 .310547 cv
1105.65 1068.95 li
cp
.99234 .99234 .99234 rgb
f
1104.6 1053.02 mo
1104.6 1053.02 1125.59 525.749 1126.72 106.524 cv
1023.09 41.3521 800.307 1.37354 795.577 .414063 cv
1104.6 1053.02 li
cp
.988511 .988511 .988511 rgb
f
1103.55 1037.1 mo
1103.55 1037.1 1123.8 517.514 1124.25 107.05 cv
1022.1 42.292 802.192 1.79688 795.884 .517578 cv
1103.55 1037.1 li
cp
.984681 .984681 .984681 rgb
f
1102.5 1021.17 mo
1102.5 1021.17 1122 509.279 1121.78 107.575 cv
1021.1 43.2314 804.076 2.2207 796.191 .621094 cv
1102.5 1021.17 li
cp
.980851 .980851 .980851 rgb
f
1101.45 1005.24 mo
1101.45 1005.24 1120.21 501.044 1119.3 108.1 cv
1020.1 44.1714 805.96 2.64404 796.499 .724609 cv
1101.45 1005.24 li
cp
.977021 .977021 .977021 rgb
f
1100.4 989.316 mo
1100.4 989.316 1118.42 492.809 1116.83 108.625 cv
1019.1 45.1108 807.844 3.06738 796.805 .828125 cv
1100.4 989.316 li
cp
.973191 .973191 .973191 rgb
f
1099.35 973.388 mo
1099.35 973.388 1116.62 484.573 1114.36 109.151 cv
1018.1 46.0503 809.729 3.49072 797.113 .931641 cv
1099.35 973.388 li
cp
.969362 .969362 .969362 rgb
f
1098.3 957.461 mo
1098.3 957.461 1114.83 476.338 1111.88 109.676 cv
1017.1 46.9902 811.613 3.91406 797.42 1.03516 cv
1098.3 957.461 li
cp
.965532 .965532 .965532 rgb
f
1097.25 941.534 mo
1097.25 941.534 1113.04 468.103 1109.41 110.202 cv
1016.11 47.9297 813.497 4.3374 797.727 1.13867 cv
1097.25 941.534 li
cp
.961702 .961702 .961702 rgb
f
1096.2 925.607 mo
1096.2 925.607 1111.25 459.868 1106.94 110.727 cv
1015.11 48.8696 815.381 4.76074 798.035 1.24219 cv
1096.2 925.607 li
cp
.957872 .957872 .957872 rgb
f
1095.15 909.679 mo
1095.15 909.679 1109.45 451.633 1104.46 111.252 cv
1014.11 49.8091 817.265 5.18408 798.342 1.34521 cv
1095.15 909.679 li
cp
.954043 .954043 .954043 rgb
f
1094.1 893.752 mo
1094.1 893.752 1107.66 443.398 1101.99 111.778 cv
1013.11 50.749 819.15 5.60742 798.649 1.44873 cv
1094.1 893.752 li
cp
.950213 .950213 .950213 rgb
f
1093.04 877.826 mo
1093.04 877.826 1105.87 435.163 1099.52 112.303 cv
1012.12 51.6885 821.034 6.03076 798.957 1.55225 cv
1093.04 877.826 li
cp
.946383 .946383 .946383 rgb
f
1091.99 861.898 mo
1091.99 861.898 1104.08 426.928 1097.04 112.829 cv
1011.12 52.6279 822.918 6.45459 799.264 1.65576 cv
1091.99 861.898 li
cp
.942553 .942553 .942553 rgb
f
1090.94 845.971 mo
1090.94 845.971 1102.28 418.692 1094.57 113.354 cv
1010.12 53.5679 824.802 6.87793 799.571 1.75928 cv
1090.94 845.971 li
cp
.938723 .938723 .938723 rgb
f
1089.89 830.043 mo
1089.89 830.043 1100.49 410.458 1092.1 113.879 cv
1009.12 54.5073 826.687 7.30127 799.878 1.86279 cv
1089.89 830.043 li
cp
.934894 .934894 .934894 rgb
f
1088.84 814.117 mo
1088.84 814.117 1098.7 402.222 1089.62 114.404 cv
1008.12 55.4473 828.571 7.72461 800.185 1.96631 cv
1088.84 814.117 li
cp
.931064 .931064 .931064 rgb
f
1087.79 798.189 mo
1087.79 798.189 1096.91 393.987 1087.15 114.93 cv
1007.13 56.3867 830.455 8.14795 800.493 2.06982 cv
1087.79 798.189 li
cp
.927234 .927234 .927234 rgb
f
1086.74 782.262 mo
1086.74 782.262 1095.11 385.752 1084.68 115.455 cv
1006.13 57.3267 832.339 8.57129 800.8 2.17334 cv
1086.74 782.262 li
cp
.923404 .923404 .923404 rgb
f
1085.69 766.334 mo
1085.69 766.334 1093.32 377.517 1082.2 115.98 cv
1005.13 58.2661 834.223 8.99463 801.107 2.27686 cv
1085.69 766.334 li
cp
.919574 .919574 .919574 rgb
f
1084.64 750.408 mo
1084.64 750.408 1091.53 369.282 1079.73 116.506 cv
1004.13 59.2056 836.108 9.41797 801.415 2.38037 cv
1084.64 750.408 li
cp
.915745 .915745 .915745 rgb
f
1083.59 734.48 mo
1083.59 734.48 1089.74 361.046 1077.25 117.031 cv
1003.13 60.1455 837.992 9.84131 801.722 2.48389 cv
1083.59 734.48 li
cp
.911915 .911915 .911915 rgb
f
1082.54 718.553 mo
1082.54 718.553 1087.94 352.812 1074.78 117.557 cv
1002.14 61.085 839.876 10.2651 802.029 2.5874 cv
1082.54 718.553 li
cp
.908085 .908085 .908085 rgb
f
1081.49 702.626 mo
1081.49 702.626 1086.15 344.576 1072.31 118.082 cv
1001.14 62.0249 841.76 10.6885 802.336 2.69092 cv
1081.49 702.626 li
cp
.904255 .904255 .904255 rgb
f
1080.44 686.699 mo
1080.44 686.699 1084.36 336.341 1069.83 118.607 cv
1000.14 62.9644 843.645 11.1118 802.644 2.79443 cv
1080.44 686.699 li
cp
.900425 .900425 .900425 rgb
f
1079.39 670.772 mo
1079.39 670.772 1082.57 328.106 1067.36 119.133 cv
999.142 63.9038 845.529 11.5352 802.951 2.89795 cv
1079.39 670.772 li
cp
.896596 .896596 .896596 rgb
f
1078.34 654.844 mo
1078.34 654.844 1080.77 319.871 1064.89 119.658 cv
998.145 64.8438 847.414 11.9585 803.258 3.00146 cv
1078.34 654.844 li
cp
.892766 .892766 .892766 rgb
f
1077.29 638.917 mo
1077.29 638.917 1078.98 311.636 1062.41 120.184 cv
997.147 65.7832 849.297 12.3818 803.566 3.10498 cv
1077.29 638.917 li
cp
.888936 .888936 .888936 rgb
f
1076.24 622.99 mo
1076.24 622.99 1077.19 303.4 1059.94 120.708 cv
996.149 66.7231 851.181 12.8052 803.873 3.2085 cv
1076.24 622.99 li
cp
.885106 .885106 .885106 rgb
f
1075.19 607.063 mo
1075.19 607.063 1075.4 295.166 1057.47 121.234 cv
995.151 67.6626 853.066 13.2285 804.18 3.31201 cv
1075.19 607.063 li
cp
.881277 .881277 .881277 rgb
f
1074.14 591.135 mo
1074.14 591.135 1073.6 286.93 1054.99 121.759 cv
994.153 68.6025 854.95 13.6519 804.487 3.41553 cv
1074.14 591.135 li
cp
.877447 .877447 .877447 rgb
f
1073.09 575.208 mo
1073.09 575.208 1071.81 278.695 1052.52 122.285 cv
993.155 69.542 856.834 14.0757 804.794 3.51904 cv
1073.09 575.208 li
cp
.873617 .873617 .873617 rgb
f
1072.04 559.281 mo
1072.04 559.281 1070.02 270.46 1050.05 122.81 cv
992.157 70.4814 858.718 14.499 805.102 3.62256 cv
1072.04 559.281 li
cp
.869787 .869787 .869787 rgb
f
1070.99 543.354 mo
1070.99 543.354 1068.23 262.225 1047.57 123.335 cv
991.159 71.4214 860.603 14.9224 805.409 3.72607 cv
1070.99 543.354 li
cp
.865957 .865957 .865957 rgb
f
1069.94 527.427 mo
1069.94 527.427 1066.43 253.99 1045.1 123.861 cv
990.162 72.3608 862.487 15.3457 805.716 3.8291 cv
1069.94 527.427 li
cp
.862128 .862128 .862128 rgb
f
1068.89 511.5 mo
1068.89 511.5 1064.64 245.755 1042.63 124.386 cv
989.164 73.3008 864.372 15.769 806.024 3.93262 cv
1068.89 511.5 li
cp
.858298 .858298 .858298 rgb
f
1067.84 495.572 mo
1067.84 495.572 1062.85 237.52 1040.15 124.912 cv
988.166 74.2402 866.255 16.1924 806.331 4.03613 cv
1067.84 495.572 li
cp
.854468 .854468 .854468 rgb
f
1066.79 479.645 mo
1066.79 479.645 1061.06 229.284 1037.68 125.437 cv
987.167 75.1802 868.139 16.6157 806.638 4.13965 cv
1066.79 479.645 li
cp
.850638 .850638 .850638 rgb
f
1065.74 463.718 mo
1065.74 463.718 1059.26 221.049 1035.21 125.962 cv
986.169 76.1196 870.024 17.0391 806.946 4.24316 cv
1065.74 463.718 li
cp
.846808 .846808 .846808 rgb
f
1064.69 447.791 mo
1064.69 447.791 1057.47 212.814 1032.73 126.488 cv
985.171 77.0591 871.908 17.4624 807.252 4.34668 cv
1064.69 447.791 li
cp
.842979 .842979 .842979 rgb
f
1063.64 431.864 mo
1063.64 431.864 1055.68 204.579 1030.26 127.013 cv
984.173 77.999 873.792 17.8857 807.56 4.4502 cv
1063.64 431.864 li
cp
.839149 .839149 .839149 rgb
f
1062.59 415.937 mo
1062.59 415.937 1053.89 196.344 1027.79 127.538 cv
983.175 78.9385 875.676 18.3096 807.867 4.55371 cv
1062.59 415.937 li
cp
.835319 .835319 .835319 rgb
f
1061.54 400.009 mo
1061.54 400.009 1052.09 188.109 1025.31 128.063 cv
982.178 79.8784 877.561 18.7329 808.174 4.65723 cv
1061.54 400.009 li
cp
.831489 .831489 .831489 rgb
f
1060.49 384.082 mo
1060.49 384.082 1050.3 179.874 1022.84 128.589 cv
981.18 80.8179 879.445 19.1563 808.482 4.76074 cv
1060.49 384.082 li
cp
.82766 .82766 .82766 rgb
f
1059.44 368.155 mo
1059.44 368.155 1048.51 171.639 1020.37 129.114 cv
980.182 81.7578 881.33 19.5796 808.789 4.86426 cv
1059.44 368.155 li
cp
.82383 .82383 .82383 rgb
f
1058.39 352.228 mo
1058.39 352.228 1046.72 163.403 1017.89 129.64 cv
979.184 82.6973 883.213 20.0029 809.096 4.96777 cv
1058.39 352.228 li
cp
.82 .82 .82 rgb
f
1107.75 776.864 mo
1107.75 441.359 li
739.178 .0117188 li
590.25 .0117188 li
1.82959 332.341 li
1.82959 776.865 li
389.307 1122.29 li
617.698 1122.44 li
1107.75 776.864 li
cp
.956863 .956863 .956863 rgb
f
782.452 .0175781 mo
782.452 .0175781 905.1 -2.13379 1033.24 40.8838 cv
1091.81 181.835 1107.75 368.315 1107.75 368.315 cv
1107.75 664.681 li
653.149 .0175781 li
782.452 .0175781 li
cp
level3{
gsave
clp
[-278.582 263.275 263.275 278.582 1155 72.8828 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.956863 .956863 .956863 ]
/C1 [.85098 .858824 .862745 ]
/N 1.1522 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.956863 .956863 .956863 ]
/C1 [.956863 .956863 .956863 ]
/N 1 
>>
]
/Bounds [.72764 ]
/Encode [1 0 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-278.582 263.275 263.275 278.582 1155 72.8828 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~g"G'3g"G'4g=k97g=tB:gY:K<gt^]?gtgfBh;-oDhVR,GhV[5Jhr!>Li8EPOi8NYRiSibSio8tWio9"Y
j5]1[jQ,C_jQ,C`jlPUcjlY^fk2tggkND$kkND$lkih6okiq?rl07HslK[["lK[[#lg*m&lg*p(m-O**
m-X3-mHs<.mdBN2mdBN2n*f`6n*f`7nF5r:nF5r;naZ/>naZ/?o()ABo()ABoCMSFoCMSFoCMSGo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
<~gY:K;gY:K<gt^]?gt^`Ah;-oChVR,GhVR,Hhr!>Khr*GNi8EPOiSibSiSibTio8tWioB(Zj5]1[jQ,C_
jQ,C`jlPUcjlPXek2tggk3(pjkND$kkih6okih6pl07Hsl07HtlK[["lK[^$lg*m&lg4!)m-O**m-X3-
mHs<.mI'E1mdBN2mdKW5n*f`6n*oi9nF5r:nF?&=naZ/>naZ2@o()ABo()ACoCMSFoCMSFoCMSGo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
<~gt^]?gt^]@h;-oCh;-rEhVR,GhV[5Jhr!>Ki8EPOi8EPPiSibSiSieUio8tWioB(Zj5]1[jQ,C_jQ,C`
jlPUcjlPXek2tggk3(pjkND$kkNM-nkih6ol07Hsl07HslK[["lK[[#lg*m&lg*m'm-O**m-O*+mHs<.
mHs</mdBN2mdBN3n*f`6n*f`7nF5r:nF5r:naZ/>naZ/>nac8Ao()ABo()ACoCMSFoCMSFoCMSGo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
782.452 .0175781 mo
782.452 .0175781 905.1 -2.13379 1033.24 40.8838 cv
1091.81 181.835 1100.68 309.276 1107.75 368.315 cv
1090.68 209.37 1065.04 131.012 1030.75 44.251 cv
898.553 .000976563 782.452 .0175781 782.452 .0175781 cv
cp
1 1 1 rgb
f
1.82959 799.119 mo
1.82959 799.119 .000488281 894.764 28.0112 1028.42 cv
87.5337 1078.17 200.528 1123.32 309.683 1122.42 cv
347.952 1122.11 503.845 1122.42 503.845 1122.42 cv
1.82959 668.375 li
1.82959 799.119 li
cp
level3{
gsave
clp
[199.236 -199.236 -199.236 -199.236 37.728 1110.51 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.870588 .87451 .878431 ]
/C1 [.870588 .87451 .878431 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.956863 .956863 .956863 ]
/C1 [.870588 .87451 .878431 ]
/N 1.02325 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.956863 .956863 .956863 ]
/C1 [.956863 .956863 .956863 ]
/N 1 
>>
]
/Bounds [.00606061 .969697 ]
/Encode [0 1 1 0 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[199.236 -199.236 -199.236 -199.236 37.728 1110.51 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~hVR,GhVR,GhVR,GhV[5Jhr!>Khr!>Ki8EPOi8EPOi8EPPiSibSiSibSiSieUio8tWio8tWioB(Zj5]1[
j5]1[jQ,C_jQ,C_jQ,C`jlPUcjlPUcjlPXek2tggk2tggk3(pjkND$kkND$kkih6okih6okih6pl07Hs
l07Hsl07HtlK[["lK[["lK[^$lg*m&lg*m&lg4!)m-O**m-O**mHs<.mHs<.mHs</mdBN2mdBN2mdBN3
n*f`6n*f`6n*fc8nF5r:nF5r:nF5u<naZ/>naZ/>nac8Ao()ABo()ABo(2JEoCMSFoCMSFoCV\Io^qeJ
~>
<~hr!>Khr!>Khr!>Khr!AMi8EPOi8EPOi8NYRiSibSiSibSiSrkVio8tWio8tWj5]1[j5]1[j5]1[jQ,C_
jQ,C_jQ,C`jlPUcjlPUcjlPUdk2tggk2tggk2tjikND$kkND$kkND'mkih6okih6okih9ql07Hsl07Hs
l0@R!lK[["lK[["lKdd%lg*m&lg*m&lg4!)m-O**m-O**mHs<.mHs<.mHs<.mdBN2mdBN2mdBN2n*f`6
n*f`6n*f`6nF5r:nF5r:nF5r:naZ/>naZ/>naZ/>o()ABo()ABo()ABoCMSFoCMSFoCMSFoCV\Io^qeJ
~>
<~i8EPOi8EPOi8EPOi8ESQiSibSiSibSiSieUio8tWio8tWio9"Yj5]1[j5]1[j5]4]jQ,C_jQ,C_jQ,C`
jlPUcjlPUcjlPUdk2tggk2tggk2tghkND$kkND$kkND$lkih6okih6okih6pl07Hsl07Hsl07HtlK[["
lK[["lK[["lg*m&lg*m&lg*m&m-O**m-O**m-O**mHs<.mHs<.mHs<.mI'E1mdBN2mdBN2mdKW5n*f`6
n*f`6n*fc8nF5r:nF5r:nF5u<naZ/>naZ/>naZ/?o()ABo()ABo()ABoCMSFoCMSFoCMSFoCV\Io^qeJ
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
1.82959 799.119 mo
1.82959 799.119 .000488281 894.764 28.0112 1028.42 cv
87.5337 1078.17 200.528 1123.32 309.683 1122.42 cv
191.783 1122.44 69.5298 1063.08 30.6079 1026.9 cv
4.20264 916.141 1.82959 799.119 1.82959 799.119 cv
cp
1 1 1 rgb
f
5.31982 .0117188 mo
657.477 .0175781 li
1.80518 669.277 li
.043457 7.37402 li
5.31982 .0117188 li
cp
level3{
gsave
clp
[256.964 348.93 348.93 -256.964 74.269 -12.1206 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.956863 .956863 .956863 ]
/C1 [.909804 .913725 .917647 ]
/N 1.19201 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.956863 .956863 .956863 ]
/C1 [.956863 .956863 .956863 ]
/N 1 
>>
]
/Bounds [.875767 ]
/Encode [1 0 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[256.964 348.93 348.93 -256.964 74.269 -12.1206 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kih6okih6okih6okih6ol07Hsl07Hsl07Hsl07HslK[["lK[["lK[["lK[["lKdd%lg*m&lg*m&lg*m&
lg4!)m-O**m-O**m-O**m-O-,mHs<.mHs<.mHs<.mHs</mdBN2mdBN2mdBN2mdBN2mdKW5n*f`6n*f`6
n*f`6n*f`7nF5r:nF5r:nF5r:nF5r:nF5r;naZ/>naZ/>naZ/>naZ/>naZ/?o()ABo()ABo()ABo()AB
o()ABo(2JEoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCV\Io^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
<~l07Hsl07Hsl07Hsl07Hsl07KulK[["lK[["lK[["lK[[#lg*m&lg*m&lg*m&lg*m&lg4!)m-O**m-O**
m-O**m-O*+mHs<.mHs<.mHs<.mHs<.mHs?0mdBN2mdBN2mdBN2mdBN2mdKW5n*f`6n*f`6n*f`6n*f`6
n*oi9nF5r:nF5r:nF5r:nF5r:nF?&=naZ/>naZ/>naZ/>naZ/>naZ/?o()ABo()ABo()ABo()ABo()AB
o()ACoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCV\Io^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
<~lK[["lK[["lK[["lK[["lK[[#lg*m&lg*m&lg*m&lg*m&lg*m'm-O**m-O**m-O**m-O**m-O-,mHs<.
mHs<.mHs<.mHs<.mHs</mdBN2mdBN2mdBN2mdBN2mdBN3n*f`6n*f`6n*f`6n*f`6n*f`6n*oi9nF5r:
nF5r:nF5r:nF5r:nF5r;naZ/>naZ/>naZ/>naZ/>naZ/>naZ/?o()ABo()ABo()ABo()ABo()ABo()AB
oCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCV\Io^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
1107.75 1122.42 mo
477.755 1122.42 li
1107.75 664.681 li
1107.75 1122.42 li
cp
level3{
gsave
clp
[-197.141 -291.662 -291.662 197.141 992.993 1189.8 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.909804 .913725 .917647 ]
/C1 [.909804 .913725 .917647 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.909804 .913725 .917647 ]
/C1 [.956863 .956863 .956863 ]
/N 1.141 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.956863 .956863 .956863 ]
/C1 [.956863 .956863 .956863 ]
/N 1 
>>
]
/Bounds [.139394 .888443 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-197.141 -291.662 -291.662 197.141 992.993 1189.8 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih9ql07Hs
l07Hsl07Hsl07HslK[["lK[["lK[["lK[["lKdd%lg*m&lg*m&lg*m&lg4!)m-O**m-O**m-O**m-X3-
mHs<.mHs<.mHs<.mI'E1mdBN2mdBN2mdBN2n*f`6n*f`6n*f`6n*f`7nF5r:nF5r:nF5r:nF?&=naZ/>
naZ/>naZ/>o()ABo()ABo()ABo()DDoCMSFoCMSFoCMSFo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
<~l07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07HslK[["
lK[["lK[["lK[["lK[[#lg*m&lg*m&lg*m&lg*m&lg*p(m-O**m-O**m-O**m-O*+mHs<.mHs<.mHs<.
mHs<.mdBN2mdBN2mdBN2mdBN2mdKW5n*f`6n*f`6n*f`6n*oi9nF5r:nF5r:nF5r:nF?&=naZ/>naZ/>
naZ/>nac8Ao()ABo()ABo()ABo(2JEoCMSFoCMSFoCMSFo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
<~lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[^$
lg*m&lg*m&lg*m&lg*m&lg*m'm-O**m-O**m-O**m-O**m-O*+mHs<.mHs<.mHs<.mHs<.mHs?0mdBN2
mdBN2mdBN2mdBN2mdKW5n*f`6n*f`6n*f`6n*f`7nF5r:nF5r:nF5r:nF5r:naZ/>naZ/>naZ/>naZ/>
naZ2@o()ABo()ABo()ABo()ACoCMSFoCMSFoCMSFoCMSFo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
5.99854 5.86426 mo
11.439 1.8125 544.654 .0117188 544.654 .0117188 cv
544.654 .0117188 127.286 .0117188 2.63721 .0117188 cv
.043457 .0117188 .0229492 2.81152 .0229492 2.81152 cv
.0229492 385.243 li
.0229492 385.243 -.70459 10.8535 5.99854 5.86426 cv
cp
.98 .98 .98 rgb
f
42.8521 570.361 mo
55.2305 565.399 li
47.1416 561.553 li
46.0454 561.02 45.1567 560.747 44.5 560.747 cv
43.4009 560.747 42.8521 561.63 42.8521 563.386 cv
42.8521 570.361 li
42.8521 570.361 li
cp
42.8521 595.625 mo
83.7153 579.169 li
72.0532 573.582 li
42.8521 585.383 li
42.8521 595.625 li
42.8521 595.625 li
cp
58.9888 563.965 mo
81.8838 554.793 li
49.248 541.879 li
49.1846 541.879 48.5742 541.634 47.4355 541.129 cv
46.2852 540.644 45.2495 540.396 44.3198 540.396 cv
43.3438 540.396 42.8521 541.407 42.8521 543.437 cv
42.8521 546.473 li
39.9395 546.473 li
39.9395 529.897 li
42.8521 529.897 li
42.8521 531.271 li
42.8521 533.698 43.0835 535.165 43.5391 535.698 cv
43.9966 536.248 45.6606 537.071 48.5317 538.202 cv
101.025 559.098 li
101.025 562.042 li
75.9912 572.104 li
101.025 584.173 li
101.025 587.132 li
42.8521 610.475 li
42.8521 616.87 li
39.9395 616.87 li
39.9395 550.411 li
42.8521 550.411 li
42.8521 551.938 li
42.8521 553.876 43.0977 555.189 43.6177 555.878 cv
44.1235 556.561 45.5215 557.448 47.8145 558.546 cv
58.9888 563.965 li
58.9888 563.965 li
cp
.7 .7 .7 rgb
f
1065.04 571.396 mo
1039.69 571.396 li
1039.69 573.317 li
1039.69 579.545 1043.23 583.161 1050.28 584.141 cv
1050.28 587.056 li
1025.74 587.056 li
1025.74 584.141 li
1033.08 583.637 1036.74 580.035 1036.74 573.317 cv
1036.74 571.396 li
1010.93 571.396 li
1010.93 581.638 li
1010.93 590.673 1016.51 596.582 1027.66 599.341 cv
1027.66 602.427 li
1007.99 601.176 li
1007.99 549.125 li
1010.93 549.125 li
1010.93 556.728 li
1065.04 556.728 li
1065.04 549.125 li
1067.96 549.125 li
1067.96 599.341 li
1051.23 600.154 li
1051.23 597.204 li
1056.89 595.33 1060.61 592.996 1062.38 590.202 cv
1064.16 587.41 1065.04 583.745 1065.04 579.176 cv
1065.04 571.396 li
1065.04 571.396 li
cp
f
536.719 1089.3 mo
536.016 1073.19 li
539.586 1073.19 li
541.459 1078.51 543.598 1082.21 545.994 1084.3 cv
548.413 1086.41 551.31 1087.46 554.701 1087.46 cv
557.595 1087.46 559.978 1086.55 561.858 1084.73 cv
563.736 1082.92 564.681 1080.81 564.681 1078.43 cv
564.681 1075.48 563.688 1073.45 561.718 1072.35 cv
559.749 1071.25 556.375 1070.18 551.572 1069.18 cv
544.209 1067.59 539.263 1065.21 536.747 1062.03 cv
534.232 1058.86 532.962 1054.83 532.962 1049.94 cv
532.962 1044.19 534.625 1039.23 537.952 1035.05 cv
541.279 1030.88 545.938 1028.79 551.933 1028.79 cv
556.194 1028.79 560.039 1030.14 563.457 1032.82 cv
565.136 1031.51 566.632 1030.23 567.976 1028.97 cv
570.989 1028.97 li
570.989 1046.47 li
567.488 1046.47 li
564.862 1036.62 559.769 1031.71 552.191 1031.71 cv
548.197 1031.71 545.131 1032.88 542.99 1035.23 cv
540.837 1037.58 539.769 1040.22 539.769 1043.15 cv
539.769 1044.79 540.227 1046.27 541.173 1047.58 cv
542.119 1048.89 543.206 1049.93 544.456 1050.71 cv
545.707 1051.49 549.174 1052.45 554.842 1053.6 cv
560.496 1054.76 564.648 1056.95 567.291 1060.14 cv
569.93 1063.33 571.245 1067.31 571.245 1072.08 cv
571.245 1077.21 569.625 1081.54 566.391 1085.1 cv
563.154 1088.64 559.126 1090.41 554.301 1090.41 cv
550.637 1090.41 546.974 1089.13 543.341 1086.56 cv
542.183 1087.26 540.929 1088.17 539.586 1089.3 cv
536.719 1089.3 li
536.719 1089.3 li
cp
f
547.115 57.5313 mo
570.934 92.7734 li
570.934 66.9614 li
570.934 64.2632 570.681 62.4897 570.14 61.667 cv
569.595 60.8589 568.192 60.4458 565.887 60.4458 cv
563.075 60.4458 li
563.075 57.5313 li
581.276 57.5313 li
581.276 60.4458 li
579.17 60.4458 li
576.906 60.4458 575.488 60.7847 574.921 61.4692 cv
574.355 62.1543 574.069 63.5293 574.069 65.5903 cv
574.069 118.313 li
570.934 118.313 li
535.298 65.5903 li
535.298 108.878 li
535.298 111.291 535.558 112.831 536.063 113.521 cv
536.563 114.205 537.967 114.557 540.276 114.557 cv
543.759 114.557 li
543.759 117.502 li
524.797 117.502 li
524.797 114.557 li
527.164 114.557 li
529.571 114.557 531.022 114.145 531.5 113.349 cv
531.986 112.544 532.216 110.406 532.216 106.955 cv
532.216 65.5903 li
532.216 63.3169 532.002 61.894 531.571 61.3159 cv
531.131 60.7363 529.878 60.4458 527.789 60.4458 cv
524.521 60.4458 li
524.521 57.5313 li
547.115 57.5313 li
547.115 57.5313 li
cp
f
207.536 243.967 mo
216.023 267.531 li
230.793 252.761 li
245.563 237.99 li
222 229.499 li
199.389 221.357 li
207.536 243.967 li
207.536 243.967 li
cp
214.875 272.668 mo
214.264 272.527 213.76 272.083 213.545 271.497 cv
213.545 271.497 li
204.077 245.215 li
194.613 218.928 li
194.613 218.928 li
194.374 218.261 194.543 217.509 195.042 217.01 cv
195.042 217.01 li
195.541 216.507 196.298 216.34 196.962 216.58 cv
196.962 216.58 li
223.247 226.046 li
249.526 235.514 li
250.115 235.729 250.56 236.232 250.698 236.842 cv
250.698 236.842 li
250.836 237.453 250.651 238.094 250.203 238.542 cv
250.203 238.542 li
233.389 255.353 li
216.57 272.17 li
216.225 272.519 215.749 272.707 215.269 272.707 cv
215.269 272.707 li
215.139 272.707 215.006 272.695 214.875 272.668 cv
214.875 272.668 li
cp
f
900.059 240.851 mo
908.204 218.243 li
885.594 226.383 li
862.029 234.875 li
876.799 249.646 li
891.571 264.417 li
900.059 240.851 li
900.059 240.851 li
cp
892.721 269.551 mo
892.586 269.58 892.459 269.593 892.324 269.593 cv
892.324 269.593 li
891.844 269.593 891.369 269.404 891.027 269.056 cv
874.207 252.238 li
857.39 235.426 li
857.39 235.426 li
856.945 234.979 856.759 234.337 856.899 233.723 cv
856.899 233.723 li
857.038 233.118 857.483 232.612 858.068 232.397 cv
884.349 222.931 li
910.629 213.462 li
910.629 213.462 li
911.294 213.225 912.055 213.392 912.553 213.896 cv
912.553 213.896 li
913.047 214.395 913.22 215.145 912.978 215.813 cv
912.978 215.813 li
903.519 242.1 li
894.046 268.379 li
894.046 268.379 li
893.833 268.968 893.328 269.415 892.721 269.551 cv
892.721 269.551 li
cp
f
205.975 905.422 mo
197.833 928.035 li
220.442 919.89 li
244.008 911.398 li
229.235 896.628 li
214.464 881.857 li
205.975 905.422 li
205.975 905.422 li
cp
213.317 876.722 mo
213.446 876.692 213.577 876.683 213.71 876.683 cv
213.71 876.683 li
214.194 876.683 214.665 876.873 215.01 877.219 cv
231.832 894.038 li
248.646 910.852 li
248.646 910.852 li
249.089 911.297 249.278 911.934 249.138 912.549 cv
249.138 912.549 li
249.002 913.154 248.555 913.658 247.969 913.877 cv
221.686 923.34 li
195.407 932.811 li
195.407 932.811 li
194.739 933.053 193.98 932.88 193.485 932.382 cv
193.485 932.382 li
192.985 931.878 192.817 931.126 193.056 930.463 cv
193.056 930.463 li
202.52 904.173 li
211.988 877.89 li
211.988 877.89 li
212.201 877.31 212.706 876.862 213.317 876.722 cv
213.317 876.722 li
cp
f
882.708 920.872 mo
905.318 929.017 li
897.178 906.408 li
888.687 882.843 li
873.917 897.614 li
859.145 912.382 li
882.708 920.872 li
882.708 920.872 li
cp
854.009 913.53 mo
853.983 913.401 853.967 913.268 853.967 913.136 cv
853.967 913.136 li
853.967 912.656 854.159 912.182 854.507 911.835 cv
871.326 895.017 li
888.137 878.204 li
888.137 878.204 li
888.579 877.758 889.223 877.571 889.833 877.707 cv
889.833 877.707 li
890.442 877.845 890.95 878.289 891.16 878.879 cv
900.629 905.158 li
910.097 931.446 li
910.097 931.446 li
910.341 932.109 910.167 932.864 909.667 933.365 cv
909.667 933.365 li
909.165 933.863 908.413 934.028 907.748 933.79 cv
907.748 933.79 li
881.462 924.328 li
855.176 914.861 li
855.176 914.861 li
854.591 914.646 854.146 914.143 854.009 913.53 cv
854.009 913.53 li
cp
f
618.116 168.75 mo
616.615 168.515 li
611.638 200.063 li
612.143 200.146 612.637 200.236 613.145 200.315 cv
618.116 168.75 li
cp
f
603.929 166.746 mo
602.41 166.557 li
598.545 198.297 li
599.044 198.355 599.552 198.406 600.058 198.469 cv
603.929 166.746 li
cp
f
611.036 167.683 mo
609.516 167.478 li
605.095 199.139 li
605.603 199.205 606.105 199.272 606.603 199.345 cv
611.036 167.683 li
cp
f
596.804 165.92 mo
595.293 165.768 li
591.977 197.553 li
592.483 197.603 592.982 197.672 593.49 197.726 cv
596.804 165.92 li
cp
f
589.946 164.805 mo
587.994 164.637 li
583.561 215.827 li
584.206 215.884 584.862 215.942 585.515 216.003 cv
589.946 164.805 li
cp
f
616.45 220.063 mo
625.333 169.446 li
623.403 169.107 li
614.511 219.741 li
615.158 219.851 615.808 219.947 616.45 220.063 cv
cp
f
582.527 164.661 mo
581.01 164.562 li
578.806 196.479 li
579.309 196.513 579.819 196.54 580.328 196.578 cv
582.527 164.661 li
cp
f
575.383 164.214 mo
573.854 164.139 li
572.209 196.083 li
572.717 196.1 573.229 196.135 573.739 196.164 cv
575.383 164.214 li
cp
f
568.217 163.9 mo
566.694 163.847 li
565.608 195.832 li
566.115 195.849 566.623 195.874 567.129 195.891 cv
568.217 163.9 li
cp
f
561.054 163.702 mo
559.526 163.677 li
559.001 195.692 li
559.513 195.694 560.02 195.694 560.527 195.706 cv
561.054 163.702 li
cp
f
677.209 216.531 mo
687.585 186.311 li
686.141 185.813 li
675.767 216.026 li
676.252 216.188 676.722 216.364 677.209 216.531 cv
cp
f
664.641 212.436 mo
673.963 181.868 li
672.495 181.421 li
663.18 212.008 li
663.662 212.154 664.155 212.294 664.641 212.436 cv
cp
f
670.933 214.442 mo
680.786 184.024 li
679.337 183.564 li
669.487 213.968 li
669.966 214.126 670.448 214.284 670.933 214.442 cv
cp
f
658.302 210.567 mo
667.083 179.822 li
665.616 179.408 li
656.845 210.133 li
657.333 210.272 657.808 210.423 658.302 210.567 cv
cp
f
647.331 226.957 mo
660.527 177.529 li
658.632 177.028 li
645.431 226.447 li
646.068 226.614 646.701 226.788 647.331 226.957 cv
cp
f
677.098 236.367 mo
694.566 188.243 li
692.726 187.575 li
675.247 235.71 li
675.868 235.934 676.486 236.14 677.098 236.367 cv
cp
f
645.534 207.146 mo
653.243 176.1 li
651.766 175.736 li
644.061 206.789 li
644.546 206.912 645.044 207.028 645.534 207.146 cv
cp
f
639.115 205.595 mo
646.279 174.422 li
644.802 174.083 li
637.631 205.25 li
638.121 205.361 638.611 205.483 639.115 205.595 cv
cp
f
632.655 204.18 mo
639.286 172.863 li
637.796 172.547 li
631.166 203.863 li
631.664 203.967 632.162 204.076 632.655 204.18 cv
cp
f
626.181 202.853 mo
632.266 171.424 li
630.761 171.143 li
624.688 202.57 li
625.186 202.669 625.689 202.756 626.181 202.853 cv
cp
f
737.539 243.623 mo
753.008 215.66 li
751.672 214.923 li
736.214 242.873 li
736.66 243.121 737.093 243.377 737.539 243.623 cv
cp
f
725.875 237.41 mo
740.359 208.92 li
738.998 208.23 li
724.504 236.727 li
724.961 236.961 725.417 237.185 725.875 237.41 cv
cp
f
731.728 240.477 mo
746.708 212.234 li
745.358 211.525 li
730.377 239.762 li
730.831 239.996 731.278 240.237 731.728 240.477 cv
cp
f
719.947 234.464 mo
733.942 205.713 li
732.574 205.049 li
718.592 233.785 li
719.052 234.009 719.494 234.243 719.947 234.464 cv
cp
f
706.363 248.588 mo
727.883 202.32 li
726.1 201.493 li
704.578 247.759 li
705.173 248.034 705.77 248.313 706.363 248.588 cv
cp
f
734.018 263.085 mo
759.546 218.78 li
757.848 217.803 li
732.324 262.089 li
732.898 262.416 733.449 262.759 734.018 263.085 cv
cp
f
707.98 228.886 mo
720.958 199.649 li
719.578 199.031 li
706.584 228.276 li
707.045 228.481 707.511 228.679 707.98 228.886 cv
cp
f
701.921 226.24 mo
714.398 196.782 li
712.99 196.19 li
700.521 225.643 li
700.993 225.841 701.457 226.04 701.921 226.24 cv
cp
f
695.806 223.727 mo
707.771 194.039 li
706.367 193.469 li
694.4 223.148 li
694.866 223.338 695.339 223.533 695.806 223.727 cv
cp
f
689.669 221.294 mo
701.112 191.402 li
699.691 190.859 li
688.239 220.755 li
688.716 220.938 689.186 221.118 689.669 221.294 cv
cp
f
792.306 280.769 mo
812.39 255.917 li
811.206 254.961 li
791.129 279.799 li
791.521 280.116 791.91 280.447 792.306 280.769 cv
cp
f
781.896 272.628 mo
801.105 247.085 li
799.886 246.17 li
780.665 271.721 li
781.076 272.024 781.487 272.321 781.896 272.628 cv
cp
f
787.128 276.665 mo
806.79 251.448 li
805.583 250.514 li
785.929 275.725 li
786.331 276.037 786.725 276.35 787.128 276.665 cv
cp
f
776.579 268.696 mo
795.353 242.816 li
794.116 241.923 li
775.355 267.795 li
775.768 268.093 776.171 268.397 776.579 268.696 cv
cp
f
760.748 280.23 mo
789.971 238.416 li
788.361 237.295 li
759.131 279.116 li
759.671 279.491 760.215 279.852 760.748 280.23 cv
cp
f
785.442 299.342 mo
818.294 260.127 li
816.789 258.866 li
783.945 298.075 li
784.447 298.497 784.942 298.917 785.442 299.342 cv
cp
f
765.752 261.124 mo
783.615 234.586 li
782.355 233.733 li
764.489 260.279 li
764.906 260.562 765.328 260.841 765.752 261.124 cv
cp
f
760.244 257.467 mo
777.638 230.628 li
776.371 229.795 li
758.972 256.63 li
759.408 256.906 759.823 257.19 760.244 257.467 cv
cp
f
754.665 253.929 mo
771.593 226.768 li
770.32 225.96 li
753.374 253.118 li
753.812 253.385 754.236 253.662 754.665 253.929 cv
cp
f
749.035 250.467 mo
765.497 223.016 li
764.183 222.236 li
747.73 249.69 li
748.165 249.948 748.61 250.204 749.035 250.467 cv
cp
f
839.841 326.84 mo
863.945 305.857 li
862.948 304.708 li
838.858 325.687 li
839.192 326.071 839.514 326.453 839.841 326.84 cv
cp
f
831.014 317.017 mo
854.36 295.199 li
853.323 294.085 li
829.962 315.909 li
830.306 316.281 830.664 316.644 831.014 317.017 cv
cp
f
835.466 321.895 mo
859.2 300.48 li
858.18 299.354 li
834.447 320.77 li
834.782 321.144 835.128 321.517 835.466 321.895 cv
cp
f
826.455 312.222 mo
849.436 289.993 li
848.372 288.9 li
825.407 311.12 li
825.763 311.482 826.099 311.852 826.455 312.222 cv
cp
f
829.841 343.963 mo
869.018 311.026 li
867.761 309.522 li
828.566 342.467 li
828.993 342.971 829.417 343.465 829.841 343.963 cv
cp
f
817.109 302.881 mo
839.311 279.852 li
838.217 278.796 li
816.013 301.832 li
816.377 302.184 816.745 302.529 817.109 302.881 cv
cp
f
812.324 298.325 mo
834.115 274.915 li
833.004 273.875 li
811.222 297.284 li
811.588 297.63 811.949 297.982 812.324 298.325 cv
cp
f
807.444 293.876 mo
828.835 270.068 li
827.709 269.046 li
806.318 292.856 li
806.691 293.194 807.067 293.535 807.444 293.876 cv
cp
f
802.5 289.483 mo
823.482 265.307 li
822.326 264.314 li
801.343 288.494 li
801.726 288.829 802.117 289.154 802.5 289.483 cv
cp
f
878.72 380.441 mo
906.093 363.959 li
905.306 362.657 li
877.944 379.126 li
878.204 379.566 878.454 380.002 878.72 380.441 cv
cp
f
871.728 369.228 mo
898.509 351.799 li
897.677 350.52 li
870.872 367.957 li
871.148 368.382 871.444 368.811 871.728 369.228 cv
cp
f
875.258 374.811 mo
902.356 357.843 li
901.542 356.556 li
874.446 373.517 li
874.718 373.951 874.988 374.383 875.258 374.811 cv
cp
f
868.067 363.721 mo
894.556 345.813 li
893.71 344.559 li
867.231 362.452 li
867.509 362.871 867.787 363.295 868.067 363.721 cv
cp
f
849.105 369.246 mo
891.008 339.85 li
889.88 338.236 li
847.983 367.632 li
848.354 368.169 848.722 368.705 849.105 369.246 cv
cp
f
865.81 395.615 mo
910.202 369.935 li
909.218 368.231 li
864.821 393.909 li
865.148 394.48 865.484 395.046 865.81 395.615 cv
cp
f
860.49 352.895 mo
886.354 334.066 li
885.45 332.838 li
859.584 351.673 li
859.88 352.083 860.187 352.485 860.49 352.895 cv
cp
f
856.568 347.58 mo
882.094 328.306 li
881.169 327.093 li
855.65 346.36 li
855.961 346.765 856.264 347.178 856.568 347.58 cv
cp
f
852.533 342.346 mo
877.732 322.616 li
876.805 321.416 li
851.6 341.143 li
851.906 341.543 852.216 341.949 852.533 342.346 cv
cp
f
848.413 337.165 mo
873.284 317.003 li
872.317 315.819 li
847.461 335.99 li
847.784 336.38 848.108 336.771 848.413 337.165 cv
cp
f
907.736 439.935 mo
937.56 428.457 li
937.005 427.033 li
907.204 438.512 li
907.383 438.98 907.554 439.458 907.736 439.935 cv
cp
f
902.79 427.682 mo
932.192 415.165 li
931.604 413.762 li
902.185 426.278 li
902.392 426.747 902.589 427.214 902.79 427.682 cv
cp
f
905.31 433.793 mo
934.936 421.784 li
934.358 420.379 li
904.734 432.375 li
904.921 432.844 905.113 433.319 905.31 433.793 cv
cp
f
900.152 421.619 mo
929.355 408.586 li
928.731 407.2 li
899.547 420.222 li
899.745 420.688 899.949 421.156 900.152 421.619 cv
cp
f
880.362 423.834 mo
926.891 402.097 li
926.059 400.311 li
879.534 422.057 li
879.804 422.651 880.089 423.248 880.362 423.834 cv
cp
f
892.181 452.709 mo
940.556 435.053 li
939.887 433.209 li
891.53 450.86 li
891.755 451.476 891.963 452.097 892.181 452.709 cv
cp
f
894.565 409.642 mo
923.3 395.599 li
922.637 394.228 li
893.883 408.285 li
894.109 408.737 894.343 409.19 894.565 409.642 cv
cp
f
891.626 403.727 mo
920.117 389.182 li
919.416 387.825 li
890.942 402.367 li
891.164 402.82 891.397 403.275 891.626 403.727 cv
cp
f
888.556 397.874 mo
916.809 382.817 li
916.091 381.473 li
887.847 396.53 li
888.084 396.976 888.321 397.421 888.556 397.874 cv
cp
f
885.414 392.059 mo
913.396 376.514 li
912.656 375.188 li
884.669 390.728 li
884.919 391.177 885.171 391.619 885.414 392.059 cv
cp
f
926.021 503.521 mo
957.384 497.401 li
957.094 495.899 li
925.741 502.022 li
925.843 502.52 925.914 503.022 926.021 503.521 cv
cp
f
923.277 490.595 mo
954.414 483.372 li
954.074 481.889 li
922.917 489.108 li
923.041 489.605 923.16 490.103 923.277 490.595 cv
cp
f
924.695 497.042 mo
955.959 490.373 li
955.639 488.885 li
924.38 495.561 li
924.488 496.054 924.592 496.546 924.695 497.042 cv
cp
f
921.727 484.169 mo
952.746 476.397 li
952.379 474.932 li
921.386 482.687 li
921.5 483.179 921.608 483.673 921.727 484.169 cv
cp
f
901.581 482.99 mo
951.462 469.582 li
950.938 467.676 li
901.067 481.097 li
901.224 481.726 901.414 482.357 901.581 482.99 cv
cp
f
908.143 513.463 mo
959.2 504.417 li
958.855 502.48 li
907.81 511.526 li
907.925 512.174 908.026 512.813 908.143 513.463 cv
cp
f
918.308 471.405 mo
949.048 462.561 li
948.631 461.094 li
917.876 469.944 li
918.02 470.429 918.168 470.917 918.308 471.405 cv
cp
f
916.438 465.067 mo
947.021 455.685 li
946.572 454.229 li
916.004 463.607 li
916.15 464.092 916.291 464.577 916.438 465.067 cv
cp
f
914.439 458.765 mo
944.877 448.849 li
944.406 447.401 li
913.974 457.321 li
914.125 457.799 914.289 458.284 914.439 458.765 cv
cp
f
912.354 452.493 mo
942.611 442.048 li
942.111 440.608 li
911.848 451.064 li
912.017 451.54 912.193 452.018 912.354 452.493 cv
cp
f
933.02 569.263 mo
964.964 568.68 li
964.934 567.153 li
932.988 567.742 li
933.012 568.249 933.004 568.754 933.02 569.263 cv
cp
f
932.565 556.059 mo
964.482 554.359 li
964.392 552.83 li
932.464 554.534 li
932.491 555.042 932.541 555.548 932.565 556.059 cv
cp
f
932.837 562.659 mo
964.783 561.509 li
964.726 559.993 li
932.781 561.134 li
932.796 561.64 932.815 562.152 932.837 562.659 cv
cp
f
932.051 547.939 mo
932.095 548.447 932.12 548.948 932.152 549.455 cv
964.051 547.196 li
963.934 545.681 li
932.051 547.939 li
cp
f
912.08 544.842 mo
963.957 540.252 li
963.783 538.301 li
911.907 542.882 li
911.96 543.534 912.032 544.183 912.08 544.842 cv
cp
f
930.998 536.293 mo
962.812 532.925 li
962.647 531.409 li
930.826 534.784 li
930.882 535.288 930.941 535.793 930.998 536.293 cv
cp
f
930.255 529.724 mo
962.006 525.801 li
961.815 524.293 li
930.077 528.216 li
930.143 528.728 930.198 529.224 930.255 529.724 cv
cp
f
929.391 523.18 mo
961.078 518.695 li
960.864 517.19 li
929.174 521.671 li
929.243 522.173 929.307 522.676 929.391 523.18 cv
cp
f
928.418 516.639 mo
960.03 511.607 li
959.786 510.098 li
928.17 515.137 li
928.25 515.644 928.337 516.145 928.418 516.639 cv
cp
f
927.488 633.951 mo
959.052 638.918 li
959.282 637.417 li
927.731 632.443 li
927.657 632.949 927.566 633.446 927.488 633.951 cv
cp
f
929.332 620.867 mo
961.063 624.729 li
961.247 623.217 li
929.506 619.341 li
929.448 619.844 929.393 620.359 929.332 620.867 cv
cp
f
928.46 627.416 mo
960.123 631.833 li
960.324 630.322 li
928.668 625.896 li
928.593 626.408 928.529 626.907 928.46 627.416 cv
cp
f
930.077 614.292 mo
961.881 617.61 li
962.03 616.1 li
930.248 612.777 li
930.198 613.29 930.133 613.792 930.077 614.292 cv
cp
f
963.165 608.797 mo
912.043 604.363 li
911.989 605.026 911.928 605.67 911.869 606.327 cv
962.998 610.757 li
963.165 608.797 li
cp
f
907.816 637.269 mo
958.353 646.136 li
958.694 644.202 li
908.132 635.331 li
908.024 635.982 907.925 636.622 907.816 637.269 cv
cp
f
963.246 601.816 mo
931.322 599.609 li
931.297 600.113 931.265 600.625 931.227 601.128 cv
963.136 603.333 li
963.246 601.816 li
cp
f
963.665 594.664 mo
931.72 593.013 li
931.697 593.524 931.665 594.033 931.634 594.54 cv
963.583 596.182 li
963.665 594.664 li
cp
f
963.953 587.502 mo
931.97 586.41 li
931.951 586.918 931.924 587.427 931.922 587.934 cv
963.898 589.021 li
963.953 587.502 li
cp
f
964.12 580.338 mo
932.112 579.804 li
932.11 580.312 932.11 580.825 932.095 581.328 cv
964.101 581.857 li
964.12 580.338 li
cp
f
911.27 698.008 mo
941.495 708.385 li
941.987 706.941 li
911.774 696.571 li
911.617 697.054 911.437 697.526 911.27 698.008 cv
cp
f
915.36 685.438 mo
945.942 694.765 li
946.38 693.301 li
915.792 683.983 li
915.646 684.47 915.511 684.955 915.36 685.438 cv
cp
f
913.361 691.74 mo
943.774 701.593 li
944.248 700.143 li
913.834 690.291 li
913.675 690.773 913.518 691.256 913.361 691.74 cv
cp
f
917.232 679.1 mo
947.981 687.886 li
948.396 686.426 li
917.673 677.645 li
917.528 678.132 917.375 678.613 917.232 679.1 cv
cp
f
900.923 668.157 mo
950.269 681.333 li
950.773 679.439 li
901.435 666.256 li
901.274 666.896 901.097 667.523 900.923 668.157 cv
cp
f
891.518 697.933 mo
939.556 715.371 li
940.229 713.526 li
892.177 696.078 li
891.958 696.692 891.75 697.318 891.518 697.933 cv
cp
f
920.651 666.339 mo
951.702 674.046 li
952.067 672.57 li
921.009 664.855 li
920.886 665.354 920.778 665.845 920.651 666.339 cv
cp
f
922.199 659.916 mo
953.378 667.083 li
953.719 665.595 li
922.557 658.431 li
922.438 658.929 922.328 659.42 922.199 659.916 cv
cp
f
923.619 653.459 mo
954.938 660.087 li
955.254 658.596 li
923.941 651.973 li
923.833 652.469 923.732 652.962 923.619 653.459 cv
cp
f
924.958 646.981 mo
956.376 653.066 li
956.665 651.568 li
925.229 645.484 li
925.134 645.994 925.043 646.489 924.958 646.981 cv
cp
f
884.18 758.345 mo
912.144 773.808 li
912.874 772.476 li
884.927 757.008 li
884.684 757.459 884.434 757.897 884.18 758.345 cv
cp
f
890.39 746.678 mo
918.875 761.165 li
919.575 759.801 li
891.069 745.308 li
890.843 745.763 890.624 746.227 890.39 746.678 cv
cp
f
887.323 752.533 mo
915.57 767.516 li
916.283 766.167 li
888.041 751.177 li
887.8 751.63 887.565 752.084 887.323 752.533 cv
cp
f
893.339 740.758 mo
922.083 754.747 li
922.745 753.376 li
894.014 739.397 li
893.789 739.849 893.561 740.298 893.339 740.758 cv
cp
f
879.294 727.2 mo
925.479 748.689 li
926.307 746.906 li
880.125 725.425 li
879.852 726.015 879.574 726.607 879.294 727.2 cv
cp
f
864.791 754.874 mo
909.021 780.348 li
910.002 778.652 li
865.796 753.172 li
865.472 753.755 865.127 754.301 864.791 754.874 cv
cp
f
898.918 728.779 mo
928.157 741.767 li
928.775 740.38 li
899.525 727.384 li
899.322 727.845 899.123 728.32 898.918 728.779 cv
cp
f
901.56 722.723 mo
931.019 735.197 li
931.61 733.792 li
902.161 721.319 li
901.963 721.793 901.757 722.258 901.56 722.723 cv
cp
f
904.075 716.616 mo
933.766 728.576 li
934.34 727.169 li
904.649 715.204 li
904.458 715.674 904.268 716.136 904.075 716.616 cv
cp
f
906.513 710.466 mo
936.399 721.916 li
936.945 720.492 li
907.048 709.041 li
906.863 709.517 906.686 709.995 906.513 710.466 cv
cp
f
847.03 813.104 mo
871.891 833.201 li
872.836 832.004 li
848.001 811.929 li
847.679 812.326 847.35 812.709 847.03 813.104 cv
cp
f
855.176 802.703 mo
880.72 821.91 li
881.624 820.692 li
856.077 801.477 li
855.779 801.877 855.478 802.29 855.176 802.703 cv
cp
f
851.14 807.929 mo
876.352 827.589 li
877.281 826.389 li
852.08 806.735 li
851.767 807.139 851.451 807.533 851.14 807.929 cv
cp
f
859.105 797.386 mo
884.99 816.152 li
885.878 814.921 li
860.011 796.162 li
859.709 796.568 859.401 796.972 859.105 797.386 cv
cp
f
847.651 781.61 mo
889.38 810.774 li
890.504 809.157 li
848.771 779.991 li
848.396 780.53 848.027 781.074 847.651 781.61 cv
cp
f
828.54 806.316 mo
867.67 839.098 li
868.935 837.59 li
829.801 804.813 li
829.388 805.321 828.96 805.812 828.54 806.316 cv
cp
f
866.677 786.558 mo
893.212 804.42 li
894.075 803.159 li
867.521 785.289 li
867.241 785.707 866.963 786.133 866.677 786.558 cv
cp
f
870.344 781.047 mo
897.178 798.446 li
898.008 797.173 li
871.168 779.782 li
870.898 780.207 870.612 780.622 870.344 781.047 cv
cp
f
873.866 775.47 mo
901.037 792.41 li
901.842 791.125 li
874.682 774.178 li
874.414 774.616 874.144 775.04 873.866 775.47 cv
cp
f
877.332 769.836 mo
904.788 786.301 li
905.562 784.999 li
878.111 768.531 li
877.855 768.961 877.595 769.415 877.332 769.836 cv
cp
f
800.96 860.646 mo
821.937 884.75 li
823.097 883.75 li
802.109 859.654 li
801.73 859.996 801.343 860.314 800.96 860.646 cv
cp
f
810.783 851.813 mo
832.601 875.167 li
833.72 874.129 li
811.893 850.76 li
811.524 851.114 811.158 851.467 810.783 851.813 cv
cp
f
805.903 856.271 mo
827.323 880.003 li
828.447 878.983 li
807.037 855.249 li
806.661 855.583 806.286 855.931 805.903 856.271 cv
cp
f
815.574 847.258 mo
837.814 870.244 li
838.9 869.175 li
816.678 846.208 li
816.313 846.561 815.951 846.909 815.574 847.258 cv
cp
f
792.834 816.113 mo
843.351 866.531 li
845.287 864.589 li
794.796 814.185 li
794.15 814.833 793.487 815.458 792.834 816.113 cv
cp
f
783.902 850.72 mo
816.777 889.827 li
818.278 888.567 li
785.397 849.458 li
784.9 849.872 784.398 850.308 783.902 850.72 cv
cp
f
824.921 837.915 mo
847.949 860.115 li
849.004 859.021 li
825.966 836.808 li
825.614 837.173 825.274 837.549 824.921 837.915 cv
cp
f
829.466 833.122 mo
852.885 854.921 li
853.925 853.807 li
830.524 832.026 li
830.177 832.385 829.815 832.754 829.466 833.122 cv
cp
f
833.929 828.245 mo
857.743 849.637 li
858.752 848.514 li
834.945 827.117 li
834.602 827.497 834.264 827.868 833.929 828.245 cv
cp
f
838.316 823.298 mo
862.492 844.288 li
863.486 843.125 li
839.305 822.149 li
838.974 822.538 838.646 822.917 838.316 823.298 cv
cp
f
747.359 899.521 mo
763.842 926.894 li
765.15 926.11 li
748.676 898.75 li
748.238 899.007 747.804 899.261 747.359 899.521 cv
cp
f
758.574 892.532 mo
776.004 919.313 li
777.28 918.478 li
759.849 891.673 li
759.417 891.959 758.997 892.245 758.574 892.532 cv
cp
f
752.993 896.061 mo
769.961 923.157 li
771.247 922.348 li
754.282 895.254 li
753.847 895.524 753.421 895.796 752.993 896.061 cv
cp
f
764.083 888.871 mo
781.99 915.368 li
783.25 914.51 li
765.349 888.033 li
764.932 888.314 764.505 888.589 764.083 888.871 cv
cp
f
758.614 869.995 mo
787.96 911.81 li
789.564 910.681 li
760.232 868.878 li
759.696 869.244 759.154 869.625 758.614 869.995 cv
cp
f
732.244 886.703 mo
757.871 931.007 li
759.563 930.025 li
733.942 885.713 li
733.375 886.05 732.809 886.379 732.244 886.703 cv
cp
f
774.904 881.287 mo
793.731 907.156 li
794.966 906.257 li
776.129 880.385 li
775.72 880.685 775.315 880.991 774.904 881.287 cv
cp
f
780.221 877.368 mo
799.501 902.9 li
800.714 901.977 li
781.44 876.454 li
781.036 876.763 780.626 877.062 780.221 877.368 cv
cp
f
785.452 873.329 mo
805.187 898.538 li
806.388 897.606 li
786.655 872.398 li
786.262 872.707 785.865 873.026 785.452 873.329 cv
cp
f
790.634 869.222 mo
810.805 894.085 li
811.977 893.12 li
791.813 868.265 li
791.416 868.583 791.025 868.909 790.634 869.222 cv
cp
f
687.866 928.539 mo
699.342 958.366 li
700.767 957.808 li
689.289 928.009 li
688.817 928.184 688.339 928.356 687.866 928.539 cv
cp
f
700.125 923.597 mo
712.634 953.002 li
714.039 952.416 li
701.521 922.989 li
701.053 923.188 700.589 923.397 700.125 923.597 cv
cp
f
694.017 926.11 mo
706.016 955.737 li
707.418 955.17 li
695.428 925.545 li
694.958 925.726 694.487 925.923 694.017 926.11 cv
cp
f
706.177 920.955 mo
719.217 950.151 li
720.593 949.531 li
707.585 920.346 li
707.116 920.558 706.649 920.748 706.177 920.955 cv
cp
f
704.013 901.263 mo
725.705 947.7 li
727.495 946.862 li
705.785 900.424 li
705.196 900.708 704.608 900.991 704.013 901.263 cv
cp
f
675.13 913.079 mo
692.748 961.364 li
694.589 960.69 li
676.974 912.424 li
676.372 912.656 675.747 912.857 675.13 913.079 cv
cp
f
718.16 915.368 mo
732.203 944.105 li
733.578 943.434 li
719.519 914.689 li
719.068 914.914 718.611 915.147 718.16 915.368 cv
cp
f
724.075 912.428 mo
738.623 940.917 li
739.97 940.221 li
725.435 911.74 li
724.984 911.967 724.533 912.202 724.075 912.428 cv
cp
f
729.932 909.359 mo
744.979 937.614 li
746.326 936.896 li
731.27 908.655 li
730.823 908.888 730.375 909.126 729.932 909.359 cv
cp
f
735.744 906.217 mo
751.29 934.203 li
752.618 933.456 li
737.077 905.474 li
736.633 905.72 736.186 905.969 735.744 906.217 cv
cp
f
624.285 946.818 mo
630.404 978.188 li
631.901 977.89 li
625.776 946.543 li
625.27 946.644 624.789 946.722 624.285 946.818 cv
cp
f
637.205 944.087 mo
644.429 975.22 li
645.917 974.874 li
638.695 943.727 li
638.194 943.844 637.7 943.968 637.205 944.087 cv
cp
f
630.756 945.501 mo
637.434 976.766 li
638.917 976.448 li
632.242 945.181 li
631.75 945.288 631.254 945.398 630.756 945.501 cv
cp
f
643.633 942.533 mo
651.397 973.549 li
652.87 973.179 li
645.115 942.178 li
644.621 942.297 644.133 942.411 643.633 942.533 cv
cp
f
644.836 922.477 mo
658.217 972.259 li
660.122 971.747 li
646.735 921.96 li
646.102 922.13 645.471 922.313 644.836 922.477 cv
cp
f
614.36 929.033 mo
623.386 980 li
625.323 979.649 li
616.296 928.712 li
615.652 928.822 614.997 928.925 614.36 929.033 cv
cp
f
656.404 939.112 mo
665.241 969.855 li
666.708 969.437 li
657.855 938.681 li
657.374 938.821 656.885 938.965 656.404 939.112 cv
cp
f
662.743 937.238 mo
672.112 967.827 li
673.575 967.379 li
664.194 936.805 li
663.706 936.953 663.22 937.097 662.743 937.238 cv
cp
f
669.035 935.244 mo
678.951 965.679 li
680.405 965.204 li
670.484 934.776 li
669.995 934.935 669.512 935.096 669.035 935.244 cv
cp
f
675.309 933.153 mo
685.758 963.417 li
687.191 962.916 li
676.744 932.653 li
676.262 932.822 675.787 932.993 675.309 933.153 cv
cp
f
558.535 953.815 mo
559.124 985.768 li
560.647 985.743 li
560.064 953.798 li
559.549 953.815 559.047 953.805 558.535 953.815 cv
cp
f
571.741 953.367 mo
573.445 985.279 li
574.97 985.204 li
573.265 953.268 li
572.757 953.294 572.25 953.336 571.741 953.367 cv
cp
f
565.139 953.642 mo
566.287 985.586 li
567.803 985.53 li
566.663 953.582 li
566.161 953.604 565.651 953.621 565.139 953.642 cv
cp
f
578.342 952.955 mo
580.599 984.857 li
582.12 984.737 li
579.859 952.861 li
579.355 952.906 578.855 952.921 578.342 952.955 cv
cp
f
582.968 932.979 mo
587.544 984.758 li
589.5 984.586 li
584.926 932.805 li
584.28 932.869 583.627 932.929 582.968 932.979 cv
cp
f
591.509 951.802 mo
594.875 983.614 li
596.393 983.452 li
593.014 951.626 li
592.508 951.683 592.009 951.751 591.509 951.802 cv
cp
f
598.07 951.061 mo
602 982.806 li
603.514 982.619 li
599.584 950.88 li
599.08 950.949 598.58 951.001 598.07 951.061 cv
cp
f
604.618 950.19 mo
609.105 981.874 li
610.619 981.665 li
606.131 949.97 li
605.635 950.042 605.127 950.118 604.618 950.19 cv
cp
f
611.165 949.214 mo
616.2 980.827 li
617.701 980.584 li
612.66 948.971 li
612.162 949.051 611.658 949.133 611.165 949.214 cv
cp
f
488.878 979.854 mo
490.385 980.094 li
495.35 948.542 li
494.85 948.465 494.354 948.367 493.846 948.29 cv
488.878 979.854 li
cp
f
503.066 981.867 mo
504.586 982.048 li
508.455 950.31 li
507.946 950.25 507.438 950.199 506.931 950.127 cv
503.066 981.867 li
cp
f
495.964 980.924 mo
497.475 981.123 li
501.894 949.47 li
501.394 949.4 500.889 949.333 500.387 949.263 cv
495.964 980.924 li
cp
f
510.191 982.685 mo
511.704 982.835 li
515.015 951.061 li
514.511 951.001 514.013 950.937 513.503 950.885 cv
510.191 982.685 li
cp
f
517.048 983.799 mo
519.001 983.967 li
523.42 932.927 li
522.775 932.874 522.121 932.813 521.468 932.756 cv
517.048 983.799 li
cp
f
490.515 928.69 mo
481.663 979.16 li
483.598 979.5 li
492.454 929.009 li
491.81 928.902 491.161 928.803 490.515 928.69 cv
cp
f
524.467 983.949 mo
525.981 984.048 li
528.186 952.126 li
527.684 952.091 527.174 952.069 526.667 952.028 cv
524.467 983.949 li
cp
f
531.62 984.39 mo
533.136 984.468 li
534.784 952.524 li
534.276 952.499 533.773 952.468 533.261 952.442 cv
531.62 984.39 li
cp
f
538.778 984.703 mo
540.301 984.758 li
541.384 952.774 li
540.879 952.754 540.371 952.724 539.868 952.722 cv
538.778 984.703 li
cp
f
545.942 984.897 mo
547.462 984.931 li
547.994 952.914 li
547.484 952.914 546.974 952.903 546.471 952.898 cv
545.942 984.897 li
cp
f
429.784 932.071 mo
419.409 962.295 li
420.854 962.787 li
431.229 932.581 li
430.744 932.417 430.268 932.24 429.784 932.071 cv
cp
f
442.356 936.167 mo
433.036 966.744 li
434.499 967.181 li
443.822 936.593 li
443.333 936.454 442.844 936.319 442.356 936.167 cv
cp
f
436.058 934.169 mo
426.207 964.579 li
427.656 965.047 li
437.509 934.637 li
437.022 934.476 436.545 934.325 436.058 934.169 cv
cp
f
448.699 938.036 mo
439.909 968.785 li
441.375 969.197 li
450.154 938.474 li
449.665 938.334 449.187 938.177 448.699 938.036 cv
cp
f
459.627 921.793 mo
446.467 971.076 li
448.365 971.579 li
461.524 922.304 li
460.891 922.145 460.256 921.96 459.627 921.793 cv
cp
f
429.848 912.377 mo
412.428 960.36 li
414.275 961.029 li
431.696 913.039 li
431.081 912.813 430.457 912.605 429.848 912.377 cv
cp
f
461.463 941.458 mo
453.749 972.505 li
455.226 972.87 li
462.94 941.816 li
462.447 941.695 461.953 941.583 461.463 941.458 cv
cp
f
467.883 943.003 mo
460.716 974.184 li
462.199 974.523 li
469.37 943.362 li
468.872 943.246 468.378 943.128 467.883 943.003 cv
cp
f
474.34 944.42 mo
467.709 975.749 li
469.2 976.061 li
475.828 944.746 li
475.332 944.637 474.834 944.536 474.34 944.42 cv
cp
f
480.814 945.753 mo
474.729 977.183 li
476.23 977.468 li
482.308 946.033 li
481.808 945.935 481.309 945.849 480.814 945.753 cv
cp
f
369.459 904.985 mo
353.989 932.946 li
355.327 933.678 li
370.787 905.73 li
370.341 905.483 369.905 905.23 369.459 904.985 cv
cp
f
381.125 911.192 mo
366.64 939.684 li
367.998 940.377 li
382.492 911.873 li
382.034 911.65 381.578 911.427 381.125 911.192 cv
cp
f
375.268 908.131 mo
360.286 936.375 li
361.628 937.081 li
376.615 908.839 li
376.167 908.606 375.721 908.365 375.268 908.131 cv
cp
f
387.039 914.143 mo
373.052 942.89 li
374.423 943.551 li
388.403 914.824 li
387.941 914.6 387.498 914.362 387.039 914.143 cv
cp
f
400.577 900.147 mo
379.113 946.282 li
380.891 947.116 li
402.356 900.978 li
401.759 900.701 401.165 900.428 400.577 900.147 cv
cp
f
372.906 885.644 mo
347.449 929.827 li
349.155 930.806 li
374.599 886.645 li
374.031 886.315 373.475 885.97 372.906 885.644 cv
cp
f
399.019 919.718 mo
386.036 948.958 li
387.421 949.574 li
400.418 920.328 li
399.95 920.123 399.482 919.932 399.019 919.718 cv
cp
f
405.074 922.368 mo
392.6 951.821 li
394.004 952.416 li
406.472 922.965 li
406.004 922.765 405.543 922.569 405.074 922.368 cv
cp
f
411.183 924.881 mo
399.223 954.572 li
400.635 955.14 li
412.595 925.449 li
412.126 925.264 411.655 925.068 411.183 924.881 cv
cp
f
417.332 927.317 mo
405.88 957.202 li
407.308 957.75 li
418.754 927.852 li
418.277 927.669 417.802 927.496 417.332 927.317 cv
cp
f
314.689 867.833 mo
294.602 892.686 li
295.789 893.64 li
315.868 868.803 li
315.47 868.482 315.082 868.159 314.689 867.833 cv
cp
f
325.097 875.981 mo
305.886 901.52 li
307.109 902.437 li
326.331 876.887 li
325.917 876.583 325.51 876.284 325.097 875.981 cv
cp
f
319.864 871.945 mo
300.204 897.155 li
301.409 898.086 li
321.07 872.881 li
320.668 872.572 320.266 872.253 319.864 871.945 cv
cp
f
330.417 879.908 mo
311.65 905.792 li
312.879 906.68 li
331.642 880.811 li
331.231 880.512 330.829 880.207 330.417 879.908 cv
cp
f
346.165 868.488 mo
317.024 910.184 li
318.632 911.316 li
347.781 869.604 li
347.244 869.227 346.703 868.861 346.165 868.488 cv
cp
f
321.463 849.36 mo
288.703 888.482 li
290.208 889.737 li
322.963 850.627 li
322.466 850.21 321.967 849.782 321.463 849.36 cv
cp
f
341.239 887.484 mo
323.379 914.021 li
324.645 914.872 li
342.509 888.325 li
342.09 888.044 341.662 887.769 341.239 887.484 cv
cp
f
346.748 891.141 mo
329.346 917.986 li
330.631 918.807 li
348.02 891.978 li
347.596 891.698 347.175 891.417 346.748 891.141 cv
cp
f
352.328 894.681 mo
335.392 921.841 li
336.677 922.646 li
353.618 895.485 li
353.187 895.218 352.762 894.947 352.328 894.681 cv
cp
f
357.955 898.137 mo
341.495 925.588 li
342.808 926.364 li
359.265 898.915 li
358.832 898.655 358.386 898.401 357.955 898.137 cv
cp
f
267.148 821.766 mo
243.051 842.745 li
244.053 843.9 li
268.136 822.916 li
267.806 822.536 267.483 822.149 267.148 821.766 cv
cp
f
275.985 831.59 mo
252.631 853.409 li
253.671 854.52 li
277.035 832.697 li
276.688 832.327 276.33 831.962 275.985 831.59 cv
cp
f
271.539 826.706 mo
247.793 848.126 li
248.813 849.252 li
272.548 827.837 li
272.21 827.464 271.873 827.086 271.539 826.706 cv
cp
f
280.538 836.375 mo
257.56 858.614 li
258.616 859.702 li
281.591 837.487 li
281.23 837.127 280.89 836.75 280.538 836.375 cv
cp
f
277.069 804.712 mo
237.971 837.578 li
239.232 839.083 li
278.337 806.209 li
277.92 805.709 277.491 805.215 277.069 804.712 cv
cp
f
289.885 845.727 mo
267.687 868.751 li
268.784 869.805 li
290.988 846.763 li
290.625 846.422 290.25 846.078 289.885 845.727 cv
cp
f
294.676 850.275 mo
272.873 873.689 li
273.991 874.725 li
295.782 851.322 li
295.411 850.974 295.042 850.631 294.676 850.275 cv
cp
f
299.549 854.729 mo
278.156 878.542 li
279.288 879.561 li
300.686 855.754 li
300.309 855.411 299.928 855.071 299.549 854.729 cv
cp
f
304.495 859.123 mo
283.519 883.297 li
284.672 884.29 li
305.652 860.115 li
305.266 859.781 304.882 859.452 304.495 859.123 cv
cp
f
228.274 768.16 mo
200.897 784.647 li
201.69 785.954 li
229.051 769.473 li
228.792 769.043 228.542 768.603 228.274 768.16 cv
cp
f
235.274 779.378 mo
208.487 796.809 li
209.318 798.083 li
236.122 780.655 li
235.837 780.223 235.549 779.801 235.274 779.378 cv
cp
f
231.74 773.797 mo
204.641 790.765 li
205.449 792.053 li
232.547 775.082 li
232.273 774.653 232.005 774.227 231.74 773.797 cv
cp
f
238.924 784.892 mo
212.436 802.786 li
213.291 804.049 li
239.765 786.159 li
239.482 785.734 239.212 785.308 238.924 784.892 cv
cp
f
257.808 779.42 mo
215.988 808.764 li
217.113 810.367 li
258.932 781.035 li
258.553 780.497 258.18 779.96 257.808 779.42 cv
cp
f
241.103 753.046 mo
196.793 778.667 li
197.779 780.376 li
242.09 754.742 li
241.759 754.172 241.426 753.607 241.103 753.046 cv
cp
f
246.504 795.709 mo
220.646 814.536 li
221.542 815.765 li
247.411 796.933 li
247.119 796.518 246.806 796.12 246.504 795.709 cv
cp
f
250.432 801.026 mo
224.901 820.299 li
225.823 821.513 li
251.341 802.25 li
251.034 801.844 250.735 801.435 250.432 801.026 cv
cp
f
254.467 806.255 mo
229.264 825.989 li
230.196 827.192 li
255.396 807.458 li
255.085 807.063 254.778 806.663 254.467 806.255 cv
cp
f
258.571 811.436 mo
233.715 831.607 li
234.677 832.789 li
259.536 812.616 li
259.214 812.225 258.894 811.829 258.571 811.436 cv
cp
f
199.26 708.674 mo
169.436 720.141 li
169.988 721.576 li
199.797 710.095 li
199.609 709.623 199.443 709.149 199.26 708.674 cv
cp
f
204.202 720.925 mo
174.791 733.435 li
175.391 734.847 li
204.809 722.325 li
204.612 721.853 204.404 721.394 204.202 720.925 cv
cp
f
201.688 714.812 mo
172.055 726.82 li
172.635 728.223 li
202.256 716.229 li
202.066 715.758 201.879 715.287 201.688 714.812 cv
cp
f
206.841 726.98 mo
177.646 740.017 li
178.271 741.405 li
207.451 728.384 li
207.244 727.917 207.047 727.451 206.841 726.98 cv
cp
f
226.553 724.804 mo
180.105 746.506 li
180.938 748.292 li
227.388 726.581 li
227.111 725.996 226.831 725.406 226.553 724.804 cv
cp
f
214.745 695.922 mo
166.429 713.551 li
167.104 715.393 li
215.396 697.768 li
215.175 697.155 214.963 696.531 214.745 695.922 cv
cp
f
212.433 738.958 mo
183.687 753.011 li
184.364 754.38 li
213.109 740.324 li
212.886 739.872 212.654 739.419 212.433 738.958 cv
cp
f
215.373 744.877 mo
186.88 759.419 li
187.575 760.784 li
216.06 746.235 li
215.828 745.784 215.599 745.332 215.373 744.877 cv
cp
f
218.439 750.732 mo
190.188 765.788 li
190.901 767.127 li
219.148 752.079 li
218.91 751.625 218.673 751.177 218.439 750.732 cv
cp
f
221.578 756.55 mo
193.596 772.092 li
194.339 773.418 li
222.322 757.882 li
222.075 757.434 221.83 756.991 221.578 756.55 cv
cp
f
180.974 645.085 mo
149.613 651.21 li
149.908 652.706 li
181.257 646.58 li
181.158 646.08 181.068 645.582 180.974 645.085 cv
cp
f
183.715 658.009 mo
152.581 665.234 li
152.925 666.719 li
184.072 659.496 li
183.953 658.999 183.832 658.502 183.715 658.009 cv
cp
f
182.298 651.557 mo
151.036 658.231 li
151.356 659.726 li
182.619 653.047 li
182.51 652.558 182.401 652.055 182.298 651.557 cv
cp
f
185.26 664.441 mo
154.25 672.204 li
154.618 673.682 li
185.621 665.921 li
185.494 665.425 185.385 664.935 185.26 664.441 cv
cp
f
205.36 665.625 mo
155.543 679.022 li
156.047 680.926 li
205.874 667.532 li
205.705 666.896 205.525 666.258 205.36 665.625 cv
cp
f
198.811 635.153 mo
147.798 644.193 li
148.142 646.129 li
199.136 637.086 li
199.023 636.444 198.921 635.801 198.811 635.153 cv
cp
f
188.689 677.204 mo
157.945 686.043 li
158.364 687.506 li
189.113 678.66 li
188.983 678.176 188.83 677.685 188.689 677.204 cv
cp
f
190.562 683.539 mo
159.971 692.917 li
160.417 694.371 li
190.995 685.004 li
190.846 684.511 190.701 684.027 190.562 683.539 cv
cp
f
192.557 689.838 mo
162.12 699.761 li
162.592 701.204 li
193.024 691.291 li
192.871 690.803 192.703 690.328 192.557 689.838 cv
cp
f
194.649 696.114 mo
164.388 706.562 li
164.884 707.994 li
195.147 697.542 li
194.975 697.069 194.807 696.591 194.649 696.114 cv
cp
f
173.983 579.343 mo
142.031 579.926 li
142.061 581.454 li
173.997 580.864 li
173.983 580.354 173.991 579.851 173.983 579.343 cv
cp
f
174.434 592.55 mo
142.521 594.247 li
142.606 595.778 li
174.529 594.074 li
174.497 593.566 174.463 593.051 174.434 592.55 cv
cp
f
174.163 585.948 mo
142.213 587.097 li
142.265 588.607 li
174.213 587.468 li
174.197 586.959 174.18 586.452 174.163 585.948 cv
cp
f
174.937 600.666 mo
174.894 600.159 174.875 599.66 174.846 599.151 cv
142.947 601.409 li
143.061 602.927 li
174.937 600.666 li
cp
f
194.873 603.767 mo
143.037 608.352 li
143.208 610.309 li
195.042 605.724 li
194.992 605.078 194.926 604.427 194.873 603.767 cv
cp
f
175.996 612.313 mo
144.186 615.685 li
144.347 617.196 li
176.167 613.824 li
176.119 613.318 176.046 612.812 175.996 612.313 cv
cp
f
176.738 618.877 mo
144.988 622.804 li
145.179 624.317 li
176.919 620.389 li
176.85 619.887 176.799 619.381 176.738 618.877 cv
cp
f
177.612 625.426 mo
145.92 629.915 li
146.129 631.417 li
177.823 626.93 li
177.751 626.431 177.683 625.928 177.612 625.426 cv
cp
f
178.578 631.966 mo
146.966 636.998 li
147.216 638.502 li
178.829 633.466 li
178.75 632.966 178.658 632.465 178.578 631.966 cv
cp
f
179.508 514.655 mo
147.941 509.686 li
147.708 511.189 li
179.258 516.158 li
179.339 515.654 179.431 515.157 179.508 514.655 cv
cp
f
177.66 527.74 mo
145.932 523.875 li
145.75 525.389 li
177.489 529.258 li
177.548 528.753 177.598 528.246 177.66 527.74 cv
cp
f
178.538 521.196 mo
146.874 516.771 li
146.675 518.284 li
178.325 522.7 li
178.398 522.199 178.466 521.697 178.538 521.196 cv
cp
f
176.919 534.313 mo
145.114 530.998 li
144.957 532.505 li
176.75 535.828 li
176.798 535.317 176.864 534.818 176.919 534.313 cv
cp
f
143.832 539.811 mo
194.942 544.235 li
194.998 543.583 195.058 542.928 195.118 542.279 cv
144 537.851 li
143.832 539.811 li
cp
f
199.179 511.333 mo
148.644 502.475 li
148.302 504.405 li
198.863 513.279 li
198.976 512.627 199.066 511.98 199.179 511.333 cv
cp
f
143.75 546.787 mo
175.669 548.997 li
175.704 548.488 175.732 547.982 175.771 547.477 cv
143.859 545.27 li
143.75 546.787 li
cp
f
143.333 553.943 mo
175.269 555.591 li
175.296 555.082 175.331 554.579 175.356 554.071 cv
143.41 552.419 li
143.333 553.943 li
cp
f
143.035 561.106 mo
175.029 562.196 li
175.043 561.689 175.067 561.18 175.081 560.672 cv
143.095 559.583 li
143.035 561.106 li
cp
f
142.868 568.271 mo
174.884 568.802 li
174.888 568.293 174.888 567.784 174.902 567.277 cv
142.898 566.75 li
142.868 568.271 li
cp
f
195.724 450.594 mo
165.5 440.221 li
165.009 441.661 li
195.217 452.037 li
195.377 451.551 195.558 451.075 195.724 450.594 cv
cp
f
191.633 463.162 mo
161.063 453.845 li
160.615 455.308 li
191.198 464.626 li
191.349 464.142 191.48 463.651 191.633 463.162 cv
cp
f
193.64 456.864 mo
163.216 447.014 li
162.754 448.464 li
193.167 458.313 li
193.32 457.832 193.477 457.352 193.64 456.864 cv
cp
f
189.757 469.504 mo
159.015 460.715 li
158.6 462.181 li
189.326 470.959 li
189.463 470.467 189.614 469.992 189.757 469.504 cv
cp
f
206.085 480.451 mo
156.724 467.272 li
156.218 469.169 li
205.576 482.35 li
205.741 481.714 205.911 481.087 206.085 480.451 cv
cp
f
215.506 450.681 mo
167.437 433.235 li
166.772 435.083 li
214.849 452.532 li
215.07 451.916 215.282 451.294 215.506 450.681 cv
cp
f
186.34 482.266 mo
155.292 474.557 li
154.929 476.033 li
185.984 483.747 li
186.103 483.25 186.215 482.757 186.34 482.266 cv
cp
f
184.793 488.689 mo
153.619 481.521 li
153.276 483.007 li
184.444 490.175 li
184.557 489.679 184.673 489.183 184.793 488.689 cv
cp
f
183.375 495.14 mo
152.058 488.518 li
151.741 490.008 li
183.054 496.632 li
183.161 496.134 183.27 495.637 183.375 495.14 cv
cp
f
182.049 501.62 mo
150.618 495.537 li
150.333 497.03 li
181.768 503.113 li
181.857 502.614 181.947 502.116 182.049 501.62 cv
cp
f
222.813 390.266 mo
194.856 374.797 li
194.121 376.131 li
222.064 391.591 li
222.314 391.148 222.567 390.713 222.813 390.266 cv
cp
f
216.609 401.931 mo
188.112 387.447 li
187.426 388.805 li
215.928 403.298 li
216.154 402.844 216.373 402.383 216.609 401.931 cv
cp
f
219.664 396.073 mo
191.424 381.09 li
190.714 382.435 li
218.957 397.421 li
219.192 396.969 219.43 396.525 219.664 396.073 cv
cp
f
213.656 407.844 mo
184.908 393.855 li
184.246 395.228 li
212.979 409.212 li
213.202 408.754 213.433 408.305 213.656 407.844 cv
cp
f
227.737 421.419 mo
181.515 399.915 li
180.687 401.698 li
226.91 423.204 li
227.18 422.61 227.452 422.017 227.737 421.419 cv
cp
f
242.244 393.759 mo
197.978 368.254 li
196.993 369.956 li
241.245 395.454 li
241.572 394.888 241.919 394.328 242.244 393.759 cv
cp
f
208.073 419.822 mo
178.843 406.839 li
178.225 408.229 li
207.47 421.222 li
207.673 420.759 207.871 420.288 208.073 419.822 cv
cp
f
205.433 425.879 mo
175.976 413.405 li
175.382 414.812 li
204.837 427.282 li
205.03 426.813 205.234 426.35 205.433 425.879 cv
cp
f
202.922 431.994 mo
173.23 420.031 li
172.662 421.434 li
202.346 433.4 li
202.534 432.933 202.729 432.462 202.922 431.994 cv
cp
f
200.485 438.137 mo
170.596 426.693 li
170.052 428.114 li
199.951 439.564 li
200.13 439.083 200.305 438.611 200.485 438.137 cv
cp
f
259.964 335.493 mo
235.114 315.406 li
234.155 316.594 li
258.99 336.673 li
259.314 336.28 259.643 335.898 259.964 335.493 cv
cp
f
251.82 345.904 mo
226.279 326.693 li
225.36 327.915 li
250.915 347.136 li
251.215 346.728 251.515 346.309 251.82 345.904 cv
cp
f
255.857 340.672 mo
230.644 321.014 li
229.708 322.217 li
254.917 341.872 li
255.225 341.473 255.542 341.071 255.857 340.672 cv
cp
f
247.89 351.222 mo
222.009 332.45 li
221.119 333.688 li
246.984 352.451 li
247.288 352.033 247.592 351.632 247.89 351.222 cv
cp
f
259.393 367.034 mo
217.614 337.829 li
216.489 339.44 li
258.282 368.65 li
258.654 368.113 259.019 367.569 259.393 367.034 cv
cp
f
278.52 342.335 mo
239.322 309.509 li
238.067 311.007 li
277.245 343.841 li
277.67 343.337 278.095 342.833 278.52 342.335 cv
cp
f
240.316 362.051 mo
213.781 344.183 li
212.928 345.449 li
239.471 363.316 li
239.754 362.897 240.033 362.473 240.316 362.051 cv
cp
f
236.662 367.558 mo
209.816 350.153 li
208.993 351.438 li
235.825 368.826 li
236.102 368.398 236.383 367.979 236.662 367.558 cv
cp
f
233.125 373.135 mo
205.957 356.191 li
205.157 357.485 li
232.312 374.421 li
232.582 373.992 232.856 373.568 233.125 373.135 cv
cp
f
229.661 378.765 mo
202.208 362.3 li
201.428 363.612 li
228.888 380.071 li
229.138 379.636 229.398 379.199 229.661 378.765 cv
cp
f
306.034 287.955 mo
285.05 263.855 li
283.903 264.854 li
304.878 288.943 li
305.261 288.61 305.652 288.289 306.034 287.955 cv
cp
f
296.213 296.791 mo
274.39 273.436 li
273.282 274.476 li
295.103 297.845 li
295.474 297.494 295.842 297.142 296.213 296.791 cv
cp
f
301.091 292.343 mo
279.677 268.599 li
278.55 269.621 li
299.964 293.358 li
300.334 293.019 300.71 292.679 301.091 292.343 cv
cp
f
291.417 301.344 mo
269.183 278.368 li
268.095 279.428 li
290.315 302.396 li
290.677 302.041 291.051 301.693 291.417 301.344 cv
cp
f
314.318 333.378 mo
263.722 282.866 li
261.771 284.809 li
312.361 335.303 li
313.002 334.657 313.667 334.025 314.318 333.378 cv
cp
f
794.948 334.99 mo
845.364 284.476 li
843.417 282.538 li
793.015 333.031 li
793.665 333.679 794.295 334.341 794.948 334.99 cv
cp
f
311.807 813.915 mo
261.297 864.505 li
263.24 866.456 li
313.73 815.872 li
313.081 815.23 312.453 814.561 311.807 813.915 cv
cp
f
323.155 297.958 mo
290.223 258.78 li
288.723 260.038 li
321.656 299.228 li
322.156 298.805 322.656 298.376 323.155 297.958 cv
cp
f
282.077 310.693 mo
259.048 288.49 li
257.989 289.589 li
281.029 311.795 li
281.373 311.431 281.722 311.054 282.077 310.693 cv
cp
f
277.525 315.478 mo
254.11 293.686 li
253.07 294.797 li
276.481 316.586 li
276.826 316.217 277.173 315.851 277.525 315.478 cv
cp
f
273.066 320.363 mo
249.255 298.963 li
248.241 300.094 li
272.048 321.493 li
272.385 321.111 272.731 320.734 273.066 320.363 cv
cp
f
268.68 325.303 mo
244.507 304.322 li
243.51 305.477 li
267.687 326.458 li
268.017 326.074 268.346 325.687 268.68 325.303 cv
cp
f
359.633 249.08 mo
343.155 221.709 li
341.845 222.496 li
358.325 249.859 li
358.758 249.599 359.193 249.349 359.633 249.08 cv
cp
f
348.424 256.079 mo
330.992 229.292 li
329.714 230.125 li
347.146 256.924 li
347.574 256.645 347.999 256.359 348.424 256.079 cv
cp
f
354.005 252.542 mo
337.039 225.442 li
335.749 226.257 li
352.709 253.354 li
353.143 253.083 353.577 252.811 354.005 252.542 cv
cp
f
342.913 259.731 mo
325.009 233.243 li
323.754 234.099 li
341.644 260.575 li
342.067 260.29 342.49 260.017 342.913 259.731 cv
cp
f
348.44 278.697 mo
319.042 236.794 li
317.429 237.92 li
346.822 279.82 li
347.362 279.445 347.9 279.071 348.44 278.697 cv
cp
f
374.816 262.004 mo
349.126 217.604 li
347.424 218.586 li
373.114 262.988 li
373.678 262.661 374.24 262.329 374.816 262.004 cv
cp
f
332.088 267.316 mo
313.258 241.452 li
312.03 242.346 li
330.867 268.216 li
331.274 267.92 331.685 267.61 332.088 267.316 cv
cp
f
326.778 271.237 mo
307.5 245.706 li
306.282 246.63 li
325.549 272.147 li
325.957 271.841 326.366 271.545 326.778 271.237 cv
cp
f
321.536 275.274 mo
301.808 250.066 li
300.608 251.002 li
320.34 276.206 li
320.74 275.894 321.138 275.584 321.536 275.274 cv
cp
f
316.359 279.381 mo
296.199 254.52 li
295.014 255.485 li
315.185 280.347 li
315.58 280.026 315.968 279.698 316.359 279.381 cv
cp
f
419.125 220.07 mo
407.653 190.244 li
406.228 190.793 li
417.705 220.604 li
418.176 220.417 418.658 220.254 419.125 220.07 cv
cp
f
406.875 225.009 mo
394.354 195.6 li
392.953 196.201 li
405.473 225.617 li
405.942 225.417 406.408 225.211 406.875 225.009 cv
cp
f
412.984 222.492 mo
400.979 192.863 li
399.568 193.438 li
411.572 223.063 li
412.041 222.878 412.516 222.683 412.984 222.492 cv
cp
f
400.812 227.651 mo
387.783 198.448 li
386.398 199.077 li
399.42 228.257 li
399.877 228.048 400.347 227.858 400.812 227.651 cv
cp
f
403.041 247.454 mo
381.289 200.914 li
379.501 201.741 li
401.258 248.292 li
401.854 248.013 402.446 247.73 403.041 247.454 cv
cp
f
431.915 235.645 mo
414.245 187.24 li
412.401 187.916 li
430.062 236.302 li
430.677 236.079 431.299 235.868 431.915 235.645 cv
cp
f
388.84 233.237 mo
374.792 204.495 li
373.421 205.167 li
387.478 233.907 li
387.933 233.693 388.382 233.458 388.84 233.237 cv
cp
f
382.92 236.176 mo
368.373 207.687 li
367.021 208.383 li
381.56 236.863 li
382.016 236.634 382.469 236.403 382.92 236.176 cv
cp
f
377.067 239.245 mo
362.01 210.996 li
360.67 211.708 li
375.721 239.954 li
376.167 239.714 376.62 239.483 377.067 239.245 cv
cp
f
371.251 242.387 mo
355.713 214.405 li
354.383 215.145 li
369.926 243.131 li
370.37 242.881 370.809 242.633 371.251 242.387 cv
cp
f
482.714 201.785 mo
476.594 170.418 li
475.093 170.713 li
481.22 202.063 li
481.715 201.96 482.215 201.878 482.714 201.785 cv
cp
f
469.789 204.521 mo
462.568 173.387 li
461.081 173.732 li
468.302 204.88 li
468.8 204.763 469.297 204.642 469.789 204.521 cv
cp
f
476.243 203.105 mo
469.564 171.842 li
468.075 172.163 li
474.75 203.422 li
475.25 203.321 475.744 203.207 476.243 203.105 cv
cp
f
463.365 206.07 mo
455.595 175.053 li
454.125 175.424 li
461.875 206.427 li
462.375 206.302 462.864 206.196 463.365 206.07 cv
cp
f
462.197 226.263 mo
448.775 176.349 li
446.875 176.856 li
460.298 226.779 li
460.934 226.606 461.559 226.426 462.197 226.263 cv
cp
f
492.666 219.713 mo
483.605 168.605 li
481.675 168.949 li
490.726 220.037 li
491.37 219.923 492.019 219.821 492.666 219.713 cv
cp
f
450.598 209.494 mo
441.753 178.751 li
440.289 179.169 li
449.145 209.917 li
449.622 209.786 450.111 209.637 450.598 209.494 cv
cp
f
444.261 211.365 mo
434.879 180.776 li
433.419 181.228 li
442.803 211.8 li
443.288 211.649 443.773 211.51 444.261 211.365 cv
cp
f
437.96 213.365 mo
428.043 182.93 li
426.59 183.396 li
436.516 213.83 li
436.993 213.675 437.477 213.514 437.96 213.365 cv
cp
f
431.689 215.455 mo
421.242 185.195 li
419.801 185.695 li
430.25 215.953 li
430.733 215.782 431.212 215.617 431.689 215.455 cv
cp
f
548.455 194.792 mo
547.873 162.834 li
546.346 162.867 li
546.934 194.805 li
547.439 194.795 547.95 194.8 548.455 194.792 cv
cp
f
535.251 195.242 mo
533.552 163.325 li
532.028 163.406 li
533.725 195.335 li
534.238 195.307 534.744 195.27 535.251 195.242 cv
cp
f
541.853 194.967 mo
540.71 163.02 li
539.185 163.076 li
540.328 195.02 li
540.834 195.004 541.343 194.985 541.853 194.967 cv
cp
f
528.651 195.649 mo
526.393 163.753 li
524.875 163.867 li
527.133 195.747 li
527.64 195.706 528.142 195.681 528.651 195.649 cv
cp
f
524.039 215.77 mo
519.447 163.843 li
517.489 164.017 li
522.079 215.944 li
522.729 215.889 523.386 215.822 524.039 215.77 cv
cp
f
515.486 196.803 mo
512.116 164.992 li
510.605 165.151 li
513.978 196.974 li
514.478 196.926 514.986 196.856 515.486 196.803 cv
cp
f
508.926 197.546 mo
504.997 165.799 li
503.483 165.982 li
507.415 197.722 li
507.914 197.656 508.418 197.604 508.926 197.546 cv
cp
f
502.371 198.413 mo
497.89 166.729 li
496.385 166.937 li
500.866 198.633 li
501.366 198.555 501.87 198.491 502.371 198.413 cv
cp
f
495.831 199.385 mo
490.8 167.776 li
489.295 168.02 li
494.337 199.634 li
494.832 199.554 495.335 199.469 495.831 199.385 cv
cp
f
848.36 869.122 mo
773.157 944.333 669.394 990.935 554.701 991.249 cv
554.652 932.463 li
553.692 932.465 552.729 932.44 551.764 932.433 cv
551.809 991.244 li
437.327 990.779 333.782 944.209 258.7 869.122 cv
183.584 794.007 137.008 690.401 136.587 575.874 cv
195.237 575.82 li
195.235 574.856 195.26 573.901 195.254 572.933 cv
136.585 572.982 li
136.944 458.352 183.532 354.648 258.7 279.479 cv
333.814 204.352 437.415 157.792 551.955 157.366 cv
552.007 216.403 li
552.971 216.401 553.928 216.426 554.898 216.421 cv
554.843 157.363 li
669.478 157.715 773.187 204.291 848.36 279.479 cv
923.567 354.679 970.16 458.436 970.481 573.122 cv
911.292 573.173 li
911.3 574.134 911.276 575.103 911.27 576.067 cv
970.476 576.018 li
970.017 690.489 923.452 794.04 848.36 869.122 cv
cp
554.838 152.099 mo
554.828 141.305 li
551.941 141.312 li
551.951 152.101 li
319.942 152.963 132.048 340.945 131.324 572.986 cv
120.138 572.997 li
120.144 575.889 li
131.326 575.879 li
132.181 807.75 319.93 995.567 551.813 996.513 cv
551.822 1007.68 li
554.715 1007.69 li
554.707 996.517 li
786.772 995.871 974.812 808.008 975.729 576.013 cv
986.515 576.004 li
986.519 573.108 li
975.733 573.117 li
975.088 340.919 787.013 152.807 554.838 152.099 cv
cp
f
726.001 754.701 mo
725.983 755.482 725.623 756.218 724.91 756.926 cv
723.495 758.34 722.005 758.278 720.436 756.711 cv
720.07 756.344 719.592 755.784 718.973 755.011 cv
723.237 750.739 li
725.066 752.568 li
725.719 753.218 726.028 753.93 726.001 754.701 cv
cp
718.84 743.293 mo
716.498 743.293 714.551 744.077 712.979 745.653 cv
711.871 746.761 711.22 748.103 711.013 749.704 cv
710.809 751.294 711.271 752.985 712.411 754.757 cv
713.042 754.127 li
711.37 750.995 711.569 748.39 713.648 746.31 cv
714.65 745.306 715.673 744.936 716.737 745.221 cv
717.803 745.489 719.75 747.112 722.574 750.08 cv
715.158 757.503 li
716.862 759.075 718.677 759.842 720.593 759.786 cv
722.507 759.727 724.118 759.042 725.425 757.733 cv
726.928 756.232 727.667 754.325 727.633 751.999 cv
727.601 749.687 726.712 747.678 724.996 745.952 cv
723.225 744.184 721.167 743.297 718.84 743.293 cv
cp
f
730.702 738.015 mo
728.856 739.393 727.611 740.131 726.968 740.222 cv
726.328 740.315 725.738 740.09 725.2 739.551 cv
724.554 738.906 724.294 738.042 724.432 736.94 cv
724.571 735.846 725.02 734.925 725.761 734.176 cv
727.752 732.184 730.551 732.15 734.162 734.085 cv
734.681 733.56 li
730.343 729.228 li
729.826 729.747 li
729.682 731.659 li
727.742 731.791 726.212 732.407 725.113 733.515 cv
723.982 734.638 723.424 735.956 723.424 737.478 cv
723.432 739.004 724.006 740.335 725.153 741.48 cv
727.458 743.78 730.247 743.64 733.527 741.08 cv
735.04 739.924 736.087 739.294 736.703 739.178 cv
737.307 739.074 737.833 739.232 738.264 739.667 cv
738.771 740.171 738.962 740.882 738.862 741.769 cv
738.755 742.681 738.322 743.508 737.563 744.257 cv
735.828 746 733.785 746.144 731.421 744.694 cv
730.823 745.291 li
734.109 748.571 li
734.564 748.119 li
734.391 747.533 734.294 747.036 734.287 746.636 cv
735.793 746.621 737.109 746.042 738.23 744.921 cv
739.297 743.851 739.849 742.611 739.917 741.189 cv
739.976 739.777 739.5 738.558 738.488 737.553 cv
736.447 735.51 733.853 735.661 730.702 738.015 cv
cp
f
385.219 735.626 mo
384.733 735.138 li
373.479 739.794 li
378.224 728.479 li
377.724 727.972 li
362.266 734.718 li
360.507 732.927 li
359.745 733.662 li
364.317 738.338 li
365.078 737.596 li
362.973 735.447 li
372.958 731.018 li
368.195 742.3 li
368.661 742.771 li
379.908 738.124 li
375.606 748.349 li
373.646 746.349 li
372.883 747.091 li
379.635 753.983 li
380.395 753.244 li
378.582 751.39 li
385.219 735.626 li
cp
f
398.58 752.035 mo
398.467 750.084 397.868 748.551 396.771 747.432 cv
395.66 746.301 394.343 745.726 392.822 745.711 cv
391.304 745.696 389.964 746.255 388.801 747.392 cv
386.477 749.668 386.581 752.452 389.114 755.775 cv
390.246 757.293 390.866 758.355 390.97 758.963 cv
391.07 759.57 390.906 760.097 390.468 760.518 cv
389.96 761.016 389.25 761.208 388.351 761.087 cv
387.45 760.975 386.629 760.535 385.885 759.771 cv
384.164 758.016 384.042 755.967 385.524 753.624 cv
384.933 753.018 li
381.611 756.262 li
382.059 756.725 li
382.65 756.561 383.144 756.466 383.543 756.462 cv
383.539 757.967 384.101 759.296 385.219 760.427 cv
386.269 761.502 387.506 762.081 388.93 762.156 cv
390.336 762.231 391.558 761.766 392.582 760.771 cv
394.641 758.753 394.526 756.156 392.215 752.978 cv
390.851 751.113 390.128 749.864 390.045 749.216 cv
389.953 748.581 390.189 747.988 390.733 747.463 cv
391.384 746.819 392.251 746.573 393.35 746.718 cv
394.443 746.864 395.36 747.326 396.104 748.085 cv
398.07 750.094 398.07 752.889 396.104 756.483 cv
396.615 757.003 li
400.992 752.716 li
400.48 752.192 li
398.58 752.035 li
cp
f
733.95 406.555 mo
734.601 405.904 735.306 405.596 736.085 405.619 cv
736.868 405.639 737.607 406.003 738.312 406.71 cv
739.731 408.126 739.662 409.621 738.094 411.188 cv
737.734 411.549 737.167 412.033 736.394 412.652 cv
732.125 408.388 li
733.95 406.555 li
cp
724.675 412.79 mo
724.675 415.129 725.465 417.08 727.035 418.644 cv
728.145 419.751 729.495 420.407 731.091 420.612 cv
732.678 420.819 734.371 420.35 736.148 419.215 cv
735.513 418.585 li
732.386 420.259 729.773 420.063 727.698 417.985 cv
726.69 416.98 726.326 415.951 726.606 414.889 cv
726.875 413.822 728.494 411.875 731.458 409.049 cv
738.892 416.466 li
740.464 414.756 741.228 412.941 741.169 411.024 cv
741.115 409.115 740.432 407.503 739.114 406.19 cv
737.617 404.693 735.701 403.954 733.383 403.996 cv
731.071 404.027 729.056 404.907 727.333 406.637 cv
725.576 408.407 724.675 410.454 724.675 412.79 cv
cp
f
712.598 402.012 mo
710.674 400.089 li
715.603 395.151 li
717.243 393.507 718.927 392.578 720.65 392.363 cv
722.395 392.143 723.733 392.511 724.675 393.456 cv
725.28 394.05 725.433 394.635 725.147 395.213 cv
724.855 395.786 724.154 396.631 723.023 397.761 cv
715.695 405.104 li
713.735 403.152 li
712.996 403.9 li
720.106 410.993 li
720.847 410.25 li
718.558 407.961 li
724.716 401.788 li
725.967 400.534 726.787 399.511 727.186 398.711 cv
727.581 397.916 727.72 397.026 727.611 396.034 cv
727.495 395.037 727.013 394.109 726.144 393.248 cv
724.311 391.412 721.878 390.993 718.867 392.001 cv
718.808 391.943 li
721.669 389.071 li
720.451 388.146 719.173 387.021 717.849 385.702 cv
716.519 384.364 li
715.768 385.121 li
717.849 387.2 li
707.826 397.248 li
705.738 395.167 li
704.997 395.914 li
711.855 402.759 li
712.598 402.012 li
cp
f
378.705 396.034 mo
394.479 402.636 li
394.966 402.15 li
390.28 390.908 li
401.609 395.621 li
402.116 395.127 li
395.339 379.682 li
397.133 377.92 li
396.381 377.159 li
391.724 381.743 li
392.469 382.504 li
394.612 380.392 li
399.062 390.361 li
387.77 385.626 li
387.291 386.094 li
391.967 397.333 li
381.736 393.049 li
383.736 391.089 li
382.987 390.325 li
376.108 397.092 li
376.856 397.852 li
378.705 396.034 li
cp
f
362.822 411.637 mo
372.775 421.763 li
370.674 423.829 li
371.414 424.579 li
378.322 417.789 li
377.581 417.035 li
375.642 418.943 li
370.755 413.963 li
369.125 412.307 368.215 410.612 368.012 408.884 cv
367.811 407.142 368.187 405.806 369.143 404.87 cv
369.751 404.277 370.333 404.13 370.9 404.421 cv
371.478 404.715 372.315 405.427 373.426 406.563 cv
380.704 413.965 li
378.735 415.901 li
379.475 416.654 li
386.641 409.613 li
385.899 408.863 li
383.588 411.13 li
377.479 404.91 li
376.235 403.651 375.217 402.819 374.423 402.412 cv
373.632 402.009 372.74 401.863 371.746 401.961 cv
370.749 402.071 369.817 402.549 368.949 403.402 cv
367.102 405.224 366.652 407.645 367.631 410.67 cv
367.571 410.73 li
364.728 407.838 li
363.795 409.057 362.655 410.313 361.32 411.625 cv
359.974 412.946 li
360.725 413.704 li
362.822 411.637 li
cp
f
630.866 266.324 mo
630.146 269.02 631.742 271.79 634.444 272.513 cv
637.138 273.234 639.909 271.636 640.625 268.941 cv
641.347 266.246 639.757 263.476 637.055 262.755 cv
634.366 262.034 631.591 263.632 630.866 266.324 cv
cp
f
707.801 296.765 mo
706.411 299.183 707.235 302.273 709.651 303.668 cv
712.067 305.061 715.151 304.236 716.551 301.815 cv
717.946 299.401 717.122 296.312 714.702 294.916 cv
712.284 293.52 709.195 294.347 707.801 296.765 cv
cp
f
825.636 410.905 mo
823.22 412.297 822.394 415.389 823.791 417.808 cv
825.183 420.224 828.272 421.048 830.692 419.654 cv
833.107 418.26 833.933 415.169 832.542 412.754 cv
831.149 410.337 828.054 409.508 825.636 410.905 cv
cp
f
858.513 486.829 mo
855.823 487.547 854.219 490.318 854.942 493.013 cv
855.666 495.709 858.43 497.309 861.126 496.587 cv
863.826 495.866 865.427 493.093 864.703 490.397 cv
863.979 487.708 861.21 486.104 858.513 486.829 cv
cp
f
854.942 654.436 mo
854.219 657.127 855.823 659.902 858.513 660.623 cv
861.21 661.346 863.979 659.749 864.703 657.05 cv
865.427 654.353 863.826 651.583 861.126 650.864 cv
858.43 650.139 855.666 651.74 854.942 654.436 cv
cp
f
823.791 729.64 mo
822.394 732.053 823.22 735.147 825.636 736.547 cv
828.054 737.94 831.149 737.111 832.542 734.7 cv
833.933 732.277 833.107 729.187 830.692 727.788 cv
828.272 726.405 825.183 727.223 823.791 729.64 cv
cp
f
709.651 843.785 mo
707.235 845.181 706.411 848.267 707.801 850.683 cv
709.195 853.102 712.284 853.929 714.702 852.529 cv
717.122 851.142 717.946 848.045 716.551 845.631 cv
715.151 843.217 712.067 842.386 709.651 843.785 cv
cp
f
634.444 874.937 mo
631.742 875.658 630.146 878.422 630.866 881.123 cv
631.591 883.818 634.366 885.416 637.055 884.696 cv
639.757 883.968 641.347 881.204 640.625 878.504 cv
639.909 875.813 637.138 874.211 634.444 874.937 cv
cp
f
470.408 884.696 mo
473.102 885.416 475.874 883.818 476.597 881.123 cv
477.316 878.422 475.713 875.658 473.023 874.937 cv
470.325 874.211 467.557 875.813 466.836 878.504 cv
466.116 881.204 467.709 883.968 470.408 884.696 cv
cp
f
399.662 850.683 mo
401.058 848.267 400.234 845.181 397.816 843.785 cv
395.401 842.386 392.308 843.217 390.915 845.631 cv
389.515 848.045 390.347 851.142 392.76 852.529 cv
395.176 853.929 398.27 853.096 399.662 850.683 cv
cp
f
281.825 736.547 mo
284.24 735.147 285.066 732.053 283.671 729.64 cv
282.282 727.223 279.193 726.405 276.773 727.788 cv
274.356 729.187 273.527 732.277 274.92 734.7 cv
276.318 737.111 279.409 737.94 281.825 736.547 cv
cp
f
248.946 660.623 mo
251.639 659.902 253.24 657.127 252.526 654.436 cv
251.802 651.74 249.027 650.139 246.333 650.864 cv
243.642 651.583 242.043 654.353 242.763 657.047 cv
243.484 659.749 246.248 661.346 248.946 660.623 cv
cp
f
242.763 490.397 mo
242.043 493.093 243.642 495.866 246.333 496.587 cv
249.027 497.309 251.802 495.709 252.526 493.013 cv
253.24 490.318 251.639 487.547 248.946 486.829 cv
246.248 486.104 243.484 487.708 242.763 490.397 cv
cp
f
274.92 412.754 mo
273.527 415.169 274.356 418.26 276.773 419.654 cv
279.193 421.048 282.282 420.224 283.671 417.808 cv
285.066 415.389 284.24 412.297 281.825 410.905 cv
279.409 409.508 276.318 410.337 274.92 412.754 cv
cp
f
392.76 294.916 mo
390.347 296.312 389.515 299.401 390.915 301.815 cv
392.308 304.236 395.401 305.061 397.816 303.668 cv
400.234 302.273 401.058 299.183 399.662 296.765 cv
398.27 294.347 395.176 293.52 392.76 294.916 cv
cp
f
470.408 262.755 mo
467.709 263.476 466.116 266.246 466.836 268.941 cv
467.557 271.636 470.325 273.234 473.023 272.513 cv
475.713 271.79 477.316 269.02 476.597 266.324 cv
475.874 263.632 473.102 262.034 470.408 262.755 cv
cp
f
667.992 121.495 mo
668.777 118.582 671.429 116.547 674.443 116.547 cv
675.023 116.547 675.606 116.624 676.171 116.775 cv
677.896 117.236 679.335 118.34 680.224 119.884 cv
681.114 121.428 681.348 123.227 680.886 124.952 cv
680.115 127.864 677.467 129.899 674.451 129.899 cv
673.869 129.899 673.287 129.822 672.718 129.67 cv
670.994 129.208 669.553 128.104 668.661 126.559 cv
667.768 125.015 667.532 123.217 667.992 121.495 cv
cp
672.326 131.138 mo
673.021 131.324 673.736 131.418 674.451 131.418 cv
678.157 131.418 681.407 128.919 682.353 125.344 cv
682.921 123.229 682.633 121.021 681.542 119.126 cv
680.45 117.229 678.68 115.873 676.565 115.307 cv
675.87 115.122 675.156 115.027 674.443 115.027 cv
670.744 115.027 667.488 117.524 666.525 121.101 cv
665.958 123.216 666.25 125.424 667.344 127.319 cv
668.439 129.215 670.208 130.571 672.326 131.138 cv
cp
f
781.144 166.478 mo
782.333 164.417 784.549 163.138 786.933 163.138 cv
788.097 163.138 789.25 163.448 790.267 164.035 cv
791.811 164.926 792.917 166.364 793.378 168.086 cv
793.837 169.808 793.6 171.607 792.708 173.151 cv
791.514 175.212 789.296 176.494 786.918 176.494 cv
785.756 176.494 784.603 176.184 783.59 175.599 cv
780.407 173.762 779.31 169.669 781.144 166.478 cv
cp
782.831 176.915 mo
784.076 177.633 785.49 178.013 786.918 178.013 cv
789.838 178.013 792.56 176.442 794.023 173.913 cv
795.119 172.017 795.412 169.808 794.845 167.693 cv
794.279 165.579 792.923 163.812 791.027 162.718 cv
789.78 161.999 788.363 161.618 786.933 161.618 cv
784.009 161.618 781.287 163.189 779.827 165.72 cv
777.576 169.638 778.923 174.66 782.831 176.915 cv
cp
f
954.295 334.747 mo
955.313 334.16 956.465 333.85 957.629 333.85 cv
960.013 333.85 962.232 335.129 963.42 337.189 cv
965.26 340.375 964.162 344.465 960.974 346.306 cv
959.958 346.893 958.804 347.203 957.64 347.203 cv
955.26 347.203 953.044 345.925 951.857 343.869 cv
950.015 340.676 951.11 336.583 954.295 334.747 cv
cp
957.64 348.722 mo
959.071 348.722 960.487 348.342 961.734 347.623 cv
965.647 345.362 966.995 340.341 964.736 336.429 cv
963.278 333.901 960.553 332.331 957.629 332.331 cv
956.199 332.331 954.783 332.71 953.536 333.43 cv
949.625 335.686 948.281 340.709 950.542 344.628 cv
951.999 347.154 954.718 348.722 957.64 348.722 cv
cp
f
1002.5 446.564 mo
1003.07 446.412 1003.65 446.335 1004.24 446.335 cv
1007.25 446.335 1009.9 448.369 1010.68 451.281 cv
1011.14 453.002 1010.91 454.801 1010.01 456.346 cv
1009.12 457.894 1007.68 459 1005.95 459.461 cv
1005.39 459.612 1004.8 459.689 1004.22 459.689 cv
1001.21 459.689 998.564 457.653 997.78 454.738 cv
996.829 451.181 998.947 447.514 1002.5 446.564 cv
cp
1004.22 461.209 mo
1004.94 461.209 1005.65 461.115 1006.35 460.929 cv
1008.46 460.363 1010.24 459.005 1011.33 457.106 cv
1012.43 455.209 1012.72 453 1012.15 450.886 cv
1011.19 447.312 1007.93 444.815 1004.24 444.815 cv
1003.52 444.815 1002.81 444.91 1002.11 445.097 cv
997.746 446.262 995.144 450.764 996.311 455.132 cv
997.274 458.71 1000.53 461.209 1004.22 461.209 cv
cp
f
1010.68 696.166 mo
1009.9 699.081 1007.25 701.116 1004.23 701.116 cv
1003.65 701.116 1003.07 701.039 1002.5 700.888 cv
998.947 699.934 996.829 696.266 997.778 692.714 cv
998.562 689.797 1001.21 687.76 1004.22 687.76 cv
1004.8 687.76 1005.38 687.838 1005.95 687.993 cv
1007.68 688.453 1009.12 689.557 1010.02 691.102 cv
1010.91 692.645 1011.14 694.443 1010.68 696.166 cv
cp
1006.35 686.525 mo
1005.65 686.336 1004.93 686.241 1004.22 686.241 cv
1000.52 686.241 997.272 688.741 996.311 692.32 cv
995.144 696.682 997.744 701.185 1002.11 702.356 cv
1002.8 702.542 1003.52 702.635 1004.23 702.635 cv
1007.93 702.635 1011.19 700.137 1012.15 696.561 cv
1012.72 694.445 1012.43 692.237 1011.33 690.341 cv
1010.24 688.445 1008.46 687.088 1006.35 686.525 cv
cp
f
963.42 810.264 mo
962.23 812.323 960.009 813.601 957.624 813.601 cv
956.461 813.601 955.309 813.292 954.297 812.709 cv
951.11 810.863 950.015 806.766 951.857 803.579 cv
953.044 801.522 955.26 800.244 957.644 800.244 cv
958.808 800.244 959.96 800.551 960.974 801.133 cv
964.16 802.979 965.256 807.077 963.42 810.264 cv
cp
961.732 799.816 mo
960.487 799.102 959.073 798.724 957.644 798.724 cv
954.718 798.724 951.997 800.293 950.542 802.819 cv
948.281 806.731 949.625 811.757 953.538 814.026 cv
954.781 814.743 956.195 815.121 957.624 815.121 cv
960.549 815.121 963.275 813.551 964.738 811.024 cv
966.991 807.111 965.645 802.083 961.732 799.816 cv
cp
f
793.376 979.37 mo
792.913 981.088 791.809 982.521 790.265 983.407 cv
789.248 983.996 788.093 984.308 786.926 984.308 cv
784.547 984.308 782.331 983.03 781.144 980.972 cv
779.308 977.782 780.407 973.691 783.59 971.853 cv
784.603 971.266 785.756 970.956 786.918 970.956 cv
789.294 970.956 791.512 972.235 792.708 974.295 cv
793.602 975.841 793.839 977.645 793.376 979.37 cv
cp
786.918 969.435 mo
785.488 969.435 784.074 969.817 782.831 970.538 cv
778.921 972.793 777.576 977.814 779.829 981.731 cv
781.285 984.257 784.005 985.828 786.926 985.828 cv
788.361 985.828 789.78 985.446 791.025 984.723 cv
792.918 983.637 794.275 981.876 794.843 979.764 cv
795.414 977.646 795.121 975.433 794.023 973.534 cv
792.556 971.005 789.834 969.435 786.918 969.435 cv
cp
f
676.171 1030.68 mo
675.606 1030.83 675.025 1030.9 674.445 1030.9 cv
671.431 1030.9 668.777 1028.87 667.994 1025.96 cv
667.532 1024.23 667.77 1022.43 668.661 1020.89 cv
669.551 1019.34 670.992 1018.24 672.718 1017.78 cv
673.287 1017.63 673.871 1017.55 674.455 1017.55 cv
677.469 1017.55 680.113 1019.58 680.886 1022.49 cv
681.839 1026.05 679.724 1029.72 676.171 1030.68 cv
cp
674.455 1016.03 mo
673.738 1016.03 673.023 1016.12 672.326 1016.31 cv
670.208 1016.88 668.439 1018.23 667.344 1020.13 cv
666.25 1022.02 665.958 1024.23 666.525 1026.35 cv
667.488 1029.93 670.744 1032.42 674.445 1032.42 cv
675.159 1032.42 675.872 1032.33 676.567 1032.14 cv
680.927 1030.97 683.524 1026.46 682.355 1022.1 cv
681.407 1018.53 678.157 1016.03 674.455 1016.03 cv
cp
f
439.469 1025.96 mo
438.688 1028.87 436.036 1030.9 433.02 1030.9 cv
432.438 1030.9 431.857 1030.83 431.291 1030.68 cv
427.74 1029.72 425.623 1026.05 426.572 1022.49 cv
427.352 1019.58 429.998 1017.55 433.01 1017.55 cv
433.592 1017.55 434.177 1017.63 434.748 1017.78 cv
438.299 1018.73 440.417 1022.4 439.469 1025.96 cv
cp
435.142 1016.31 mo
434.442 1016.12 433.726 1016.03 433.01 1016.03 cv
429.311 1016.03 426.061 1018.52 425.105 1022.1 cv
423.939 1026.46 426.537 1030.97 430.898 1032.14 cv
431.592 1032.33 432.307 1032.42 433.02 1032.42 cv
436.723 1032.42 439.979 1029.93 440.938 1026.35 cv
442.101 1021.98 439.5 1017.48 435.142 1016.31 cv
cp
f
326.314 980.971 mo
325.127 983.029 322.912 984.307 320.53 984.307 cv
319.363 984.307 318.211 983.996 317.193 983.406 cv
315.652 982.519 314.548 981.083 314.086 979.361 cv
313.625 977.637 313.863 975.837 314.757 974.294 cv
315.945 972.235 318.163 970.956 320.546 970.956 cv
321.711 970.956 322.862 971.266 323.877 971.853 cv
325.421 972.745 326.524 974.184 326.986 975.907 cv
327.445 977.628 327.208 979.427 326.314 980.971 cv
cp
324.638 970.538 mo
323.393 969.817 321.978 969.435 320.546 969.435 cv
317.622 969.435 314.898 971.005 313.442 973.534 cv
312.344 975.427 312.052 977.637 312.619 979.754 cv
313.186 981.869 314.541 983.634 316.433 984.722 cv
317.679 985.444 319.097 985.826 320.53 985.826 cv
323.453 985.826 326.174 984.256 327.63 981.732 cv
328.727 979.837 329.019 977.628 328.454 975.514 cv
327.888 973.4 326.532 971.631 324.638 970.538 cv
cp
f
153.162 812.708 mo
152.148 813.292 150.999 813.601 149.835 813.601 cv
147.454 813.601 145.231 812.323 144.038 810.266 cv
142.202 807.075 143.301 802.977 146.484 801.135 cv
147.502 800.551 148.655 800.244 149.82 800.244 cv
152.203 800.244 154.418 801.522 155.602 803.58 cv
157.444 806.766 156.349 810.863 153.162 812.708 cv
cp
149.82 798.724 mo
148.39 798.724 146.976 799.102 145.726 799.817 cv
141.816 802.081 140.468 807.108 142.723 811.027 cv
144.188 813.551 146.914 815.121 149.835 815.121 cv
151.264 815.121 152.676 814.743 153.921 814.025 cv
157.835 811.758 159.179 806.731 156.917 802.821 cv
155.464 800.293 152.745 798.724 149.82 798.724 cv
cp
f
104.954 700.887 mo
104.386 701.039 103.805 701.116 103.223 701.116 cv
100.213 701.116 97.5654 699.078 96.7837 696.161 cv
95.8335 692.605 97.9502 688.941 101.502 687.992 cv
102.073 687.838 102.657 687.76 103.24 687.76 cv
106.252 687.76 108.903 689.797 109.685 692.712 cv
110.63 696.267 108.507 699.935 104.954 700.887 cv
cp
103.24 686.241 mo
102.524 686.241 101.806 686.336 101.11 686.524 cv
96.7485 687.689 94.1494 692.188 95.3149 696.553 cv
96.2739 700.135 99.5269 702.635 103.223 702.635 cv
103.937 702.635 104.65 702.542 105.347 702.356 cv
109.708 701.187 112.313 696.685 111.153 692.32 cv
110.193 688.741 106.938 686.241 103.24 686.241 cv
cp
f
109.685 454.737 mo
108.902 457.653 106.249 459.689 103.233 459.689 cv
102.651 459.689 102.069 459.612 101.502 459.461 cv
97.9502 458.509 95.8325 454.84 96.7837 451.281 cv
97.5654 448.369 100.213 446.335 103.219 446.335 cv
103.801 446.335 104.384 446.412 104.954 446.564 cv
108.506 447.513 110.629 451.18 109.685 454.737 cv
cp
105.347 445.097 mo
104.65 444.91 103.935 444.815 103.219 444.815 cv
99.5269 444.815 96.2759 447.312 95.3149 450.888 cv
94.1484 455.257 96.7476 459.761 101.11 460.929 cv
101.805 461.115 102.518 461.209 103.233 461.209 cv
106.935 461.209 110.191 458.709 111.154 455.129 cv
112.313 450.761 109.707 446.261 105.347 445.097 cv
cp
f
144.036 337.19 mo
145.229 335.129 147.449 333.85 149.83 333.85 cv
150.994 333.85 152.146 334.16 153.162 334.747 cv
154.705 335.636 155.809 337.075 156.271 338.798 cv
156.732 340.521 156.494 342.322 155.601 343.869 cv
154.417 345.925 152.203 347.203 149.824 347.203 cv
148.658 347.203 147.504 346.893 146.486 346.306 cv
143.297 344.467 142.199 340.377 144.036 337.19 cv
cp
145.727 347.623 mo
146.976 348.342 148.393 348.722 149.824 348.722 cv
152.745 348.722 155.462 347.153 156.917 344.628 cv
158.012 342.73 158.304 340.52 157.738 338.405 cv
157.173 336.29 155.817 334.523 153.921 333.43 cv
152.676 332.711 151.261 332.331 149.83 332.331 cv
146.91 332.331 144.186 333.9 142.721 336.429 cv
140.464 340.344 141.812 345.365 145.727 347.623 cv
cp
f
314.086 168.088 mo
314.548 166.366 315.652 164.926 317.194 164.034 cv
318.209 163.448 319.362 163.138 320.528 163.138 cv
322.911 163.138 325.128 164.417 326.315 166.478 cv
327.208 168.023 327.445 169.823 326.986 171.545 cv
326.524 173.268 325.421 174.708 323.877 175.599 cv
322.862 176.184 321.711 176.494 320.545 176.494 cv
318.161 176.494 315.943 175.213 314.756 173.151 cv
313.863 171.609 313.625 169.811 314.086 168.088 cv
cp
320.545 178.013 mo
321.977 178.013 323.391 177.633 324.636 176.915 cv
326.532 175.821 327.888 174.053 328.454 171.938 cv
329.019 169.823 328.727 167.614 327.63 165.719 cv
326.174 163.189 323.453 161.618 320.528 161.618 cv
319.096 161.618 317.68 161.999 316.434 162.718 cv
314.54 163.814 313.185 165.581 312.619 167.695 cv
312.052 169.811 312.344 172.019 313.441 173.911 cv
314.896 176.441 317.619 178.013 320.545 178.013 cv
cp
f
431.289 116.775 mo
431.857 116.624 432.439 116.547 433.022 116.547 cv
436.038 116.547 438.689 118.581 439.469 121.494 cv
440.418 125.048 438.299 128.716 434.748 129.67 cv
434.179 129.822 433.596 129.899 433.014 129.899 cv
430 129.899 427.351 127.864 426.572 124.95 cv
425.621 121.394 427.737 117.726 431.289 116.775 cv
cp
433.014 131.418 mo
433.729 131.418 434.444 131.324 435.142 131.138 cv
439.501 129.967 442.102 125.465 440.938 121.101 cv
439.979 117.524 436.724 115.027 433.022 115.027 cv
432.307 115.027 431.593 115.122 430.897 115.307 cv
426.535 116.475 423.937 120.977 425.105 125.343 cv
426.061 128.92 429.313 131.418 433.014 131.418 cv
cp
f
599.603 402.573 mo
601.132 402.984 602.702 402.074 603.117 400.544 cv
603.524 399.014 602.615 397.443 601.09 397.03 cv
599.554 396.621 597.975 397.533 597.576 399.062 cv
597.159 400.591 598.07 402.165 599.603 402.573 cv
cp
f
642.306 420.265 mo
643.68 421.057 645.437 420.585 646.229 419.216 cv
647.019 417.845 646.545 416.089 645.181 415.295 cv
643.805 414.504 642.05 414.973 641.256 416.346 cv
640.466 417.716 640.938 419.472 642.306 420.265 cv
cp
f
707.122 485.077 mo
707.914 486.449 709.67 486.917 711.039 486.129 cv
712.414 485.336 712.884 483.581 712.092 482.206 cv
711.294 480.834 709.536 480.366 708.171 481.16 cv
706.804 481.953 706.333 483.704 707.122 485.077 cv
cp
f
728.327 529.813 mo
729.854 529.402 730.766 527.831 730.353 526.297 cv
729.945 524.771 728.369 523.864 726.843 524.273 cv
725.312 524.678 724.406 526.256 724.81 527.787 cv
725.219 529.312 726.799 530.224 728.327 529.813 cv
cp
f
728.327 617.414 mo
726.799 617.01 725.219 617.916 724.81 619.45 cv
724.406 620.977 725.312 622.546 726.843 622.961 cv
728.369 623.367 729.945 622.463 730.353 620.931 cv
730.766 619.402 729.854 617.827 728.327 617.414 cv
cp
f
711.039 661.101 mo
709.67 660.308 707.914 660.782 707.122 662.151 cv
706.333 663.529 706.804 665.283 708.171 666.075 cv
709.536 666.866 711.294 666.392 712.092 665.02 cv
712.884 663.65 712.414 661.893 711.039 661.101 cv
cp
f
646.229 728.021 mo
645.437 726.645 643.68 726.177 642.306 726.967 cv
640.938 727.761 640.466 729.513 641.256 730.889 cv
642.05 732.261 643.805 732.733 645.181 731.935 cv
646.545 731.15 647.019 729.39 646.229 728.021 cv
cp
f
599.603 744.652 mo
598.07 745.069 597.159 746.638 597.576 748.167 cv
597.975 749.704 599.554 750.612 601.09 750.203 cv
602.615 749.79 603.524 748.216 603.117 746.688 cv
602.702 745.157 601.132 744.244 599.603 744.652 cv
cp
f
507.94 744.652 mo
506.409 744.244 504.835 745.157 504.429 746.688 cv
504.018 748.216 504.926 749.79 506.454 750.203 cv
507.986 750.612 509.561 749.704 509.97 748.167 cv
510.377 746.638 509.471 745.069 507.94 744.652 cv
cp
f
465.233 726.967 mo
463.859 726.177 462.109 726.645 461.314 728.021 cv
460.521 729.39 460.992 731.15 462.366 731.935 cv
463.734 732.733 465.492 732.259 466.284 730.889 cv
467.075 729.513 466.607 727.761 465.233 726.967 cv
cp
f
400.421 662.151 mo
399.631 660.782 397.875 660.308 396.5 661.101 cv
395.128 661.893 394.657 663.65 395.453 665.02 cv
396.241 666.392 397.996 666.866 399.368 666.075 cv
400.738 665.283 401.212 663.529 400.421 662.151 cv
cp
f
379.221 617.414 mo
377.688 617.827 376.779 619.402 377.188 620.931 cv
377.601 622.463 379.168 623.367 380.702 622.961 cv
382.231 622.546 383.142 620.977 382.733 619.45 cv
382.322 617.916 380.744 617.01 379.221 617.414 cv
cp
f
379.221 529.813 mo
380.744 530.224 382.322 529.315 382.733 527.787 cv
383.142 526.256 382.231 524.678 380.702 524.273 cv
379.168 523.864 377.601 524.771 377.188 526.297 cv
376.779 527.831 377.688 529.402 379.221 529.813 cv
cp
f
396.5 486.129 mo
397.875 486.917 399.631 486.449 400.421 485.077 cv
401.212 483.704 400.738 481.953 399.368 481.16 cv
397.996 480.366 396.241 480.834 395.453 482.206 cv
394.657 483.581 395.128 485.336 396.5 486.129 cv
cp
f
461.314 419.216 mo
462.109 420.585 463.859 421.057 465.233 420.265 cv
466.607 419.472 467.075 417.716 466.284 416.346 cv
465.492 414.973 463.734 414.504 462.366 415.295 cv
460.992 416.089 460.521 417.845 461.314 419.216 cv
cp
f
507.94 402.573 mo
509.471 402.165 510.377 400.591 509.97 399.062 cv
509.561 397.533 507.986 396.621 506.454 397.03 cv
504.926 397.443 504.018 399.014 504.429 400.544 cv
504.835 402.074 506.409 402.984 507.94 402.573 cv
cp
f
553.531 574.308 mo
596.909 647.782 li
585.877 718.417 li
585.877 718.417 585.875 718.417 585.874 718.417 cv
585.566 720.391 li
585.568 720.39 585.57 720.39 585.57 720.39 cv
583.855 731.367 li
583.855 731.367 583.853 731.367 583.851 731.368 cv
583.23 735.341 li
583.232 735.34 583.234 735.34 583.234 735.34 cv
577.677 770.932 li
577.674 770.932 577.672 770.932 577.67 770.933 cv
577.033 775.017 li
577.035 775.016 577.037 775.016 577.039 775.016 cv
570.886 814.413 li
570.884 814.413 570.881 814.413 570.878 814.414 cv
570.673 815.727 li
570.676 815.727 570.679 815.727 570.682 815.727 cv
564.827 853.221 li
564.824 853.221 564.82 853.221 564.817 853.221 cv
563.765 859.954 li
563.768 859.954 563.772 859.954 563.775 859.954 cv
554.071 922.099 li
554.071 922.013 li
553.531 925.47 li
553.531 574.308 li
480.028 617.681 li
409.417 606.655 li
409.417 606.654 409.417 606.652 409.417 606.651 cv
407.442 606.342 li
407.443 606.343 407.443 606.345 407.443 606.346 cv
396.468 604.631 li
396.468 604.63 396.468 604.628 396.467 604.627 cv
392.491 604.007 li
392.491 604.008 392.492 604.01 392.492 604.011 cv
356.902 598.453 li
356.902 598.451 356.902 598.449 356.901 598.447 cv
352.816 597.809 li
352.817 597.811 352.817 597.813 352.817 597.815 cv
312.082 591.454 li
312.082 591.452 312.082 591.448 312.082 591.446 cv
310.762 591.24 li
310.763 591.243 310.763 591.245 310.763 591.248 cv
274.629 585.605 li
274.629 585.602 274.629 585.599 274.629 585.595 cv
267.9 584.544 li
267.9 584.547 267.9 584.551 267.9 584.554 cv
205.739 574.847 li
205.82 574.847 li
202.367 574.308 li
553.531 574.308 li
510.157 500.813 li
521.184 430.194 li
521.185 430.193 521.187 430.193 521.188 430.193 cv
521.497 428.221 li
521.494 428.221 521.493 428.221 521.492 428.222 cv
523.206 417.248 li
523.207 417.247 523.209 417.247 523.211 417.247 cv
523.833 413.266 li
523.831 413.267 523.83 413.267 523.828 413.267 cv
529.386 377.679 li
529.388 377.679 529.39 377.679 529.392 377.679 cv
530.03 373.59 li
530.027 373.59 530.025 373.59 530.023 373.59 cv
536.084 334.786 li
536.086 334.786 536.089 334.785 536.092 334.785 cv
536.296 333.471 li
536.293 333.471 536.292 333.472 536.289 333.472 cv
542.226 295.451 li
542.229 295.451 542.233 295.451 542.236 295.45 cv
543.289 288.712 li
543.285 288.713 543.281 288.713 543.278 288.713 cv
552.991 226.518 li
552.991 226.604 li
553.531 223.146 li
553.531 574.308 li
626.998 530.929 li
697.644 541.961 li
697.644 541.962 697.644 541.964 697.644 541.965 cv
699.615 542.272 li
699.615 542.271 699.613 542.27 699.613 542.269 cv
710.589 543.983 li
710.589 543.985 710.591 543.986 710.591 543.987 cv
714.565 544.608 li
714.565 544.606 714.563 544.605 714.563 544.604 cv
750.158 550.162 li
750.158 550.164 750.158 550.167 750.16 550.168 cv
754.246 550.807 li
754.246 550.805 754.246 550.802 754.246 550.8 cv
795.041 557.171 li
795.041 557.173 795.041 557.176 795.041 557.18 cv
796.356 557.385 li
796.356 557.382 796.356 557.379 796.356 557.377 cv
832.404 563.006 li
832.404 563.008 832.404 563.013 832.404 563.016 cv
839.136 564.067 li
839.136 564.064 839.136 564.06 839.136 564.057 cv
901.321 573.768 li
901.238 573.768 li
904.691 574.308 li
553.531 574.308 li
cp
662.32 696.652 mo
690.483 717.423 li
660.629 745.995 621.877 765.322 578.789 770.804 cv
584.361 735.125 li
613.941 729.487 640.696 715.894 662.32 696.652 cv
cp
650.622 688.026 mo
659.205 694.355 li
638.508 712.583 613.077 725.547 584.981 731.151 cv
586.7 720.144 li
610.715 714.705 632.532 703.485 650.622 688.026 cv
cp
649.082 686.889 mo
631.462 701.858 610.295 712.77 587.008 718.167 cv
597.799 649.068 li
649.082 686.889 li
cp
706.82 726.807 mo
556.988 576.979 li
628.044 618.991 li
706.82 726.807 li
cp
666.37 669.555 mo
629.036 618.456 li
697.394 607.78 li
692.029 630.936 681.208 651.996 666.37 669.555 cv
cp
714.347 605.132 mo
750.031 599.56 li
744.556 642.598 725.274 681.31 696.755 711.149 cv
676.087 682.859 li
695.218 661.275 708.732 634.607 714.347 605.132 cv
cp
673.802 679.729 mo
667.5 671.103 li
682.829 653.07 693.958 631.358 699.369 607.471 cv
710.375 605.752 li
704.794 633.737 691.912 659.081 673.802 679.729 cv
cp
750.895 771.715 mo
703.094 819.509 638.081 850.025 565.925 853.179 cv
571.786 815.653 li
617.021 812.351 659.95 796.742 696.888 769.999 cv
697.271 769.72 li
696.963 769.362 li
696.884 769.271 li
696.81 769.182 696.738 769.095 696.659 769.013 cv
696.397 768.735 li
696.086 768.958 li
659.468 795.495 616.89 811.007 571.991 814.337 cv
578.15 774.889 li
622.804 769.465 662.96 749.481 693.738 719.822 cv
710.995 732.55 li
711.061 732.617 li
711.071 732.608 li
711.135 732.655 li
711.232 732.725 711.345 732.76 711.456 732.76 cv
711.464 732.76 711.472 732.76 711.476 732.76 cv
711.774 732.76 712.016 732.519 712.016 732.22 cv
712.016 732.096 711.965 731.992 711.895 731.901 cv
711.91 731.89 li
699.141 714.416 li
728.751 683.651 748.699 643.531 754.119 598.921 cv
795.004 592.537 li
791.624 638.504 775.249 681.919 747.119 719.028 cv
746.867 719.359 li
747.857 720.187 li
748.132 719.823 li
776.486 682.435 792.965 638.677 796.318 592.332 cv
832.366 586.703 li
829.21 658.874 798.7 723.896 750.895 771.715 cv
cp
766.431 779.758 mo
771.47 793.757 li
757.475 788.711 li
746.811 784.873 li
752.283 779.847 757.552 774.606 762.618 769.172 cv
766.431 779.758 li
cp
508.828 648.823 mo
401.008 727.597 li
550.842 577.761 li
508.828 648.823 li
cp
522.707 735.127 mo
528.278 770.806 li
485.234 765.331 446.521 746.042 416.679 717.523 cv
444.966 696.856 li
466.552 715.991 493.226 729.508 522.707 735.127 cv
cp
458.269 687.136 mo
509.38 649.792 li
520.058 718.168 li
496.895 712.802 475.832 701.98 458.269 687.136 cv
cp
520.367 720.147 mo
522.086 731.152 li
494.098 725.572 468.75 712.688 448.095 694.57 cv
456.721 688.267 li
474.755 703.602 496.474 714.736 520.367 720.147 cv
cp
431.172 683.087 mo
410.403 711.25 li
381.833 681.398 362.513 642.651 357.031 599.565 cv
392.708 605.136 li
398.344 634.713 411.934 661.464 431.172 683.087 cv
cp
409.667 607.785 mo
478.75 618.574 li
440.936 669.847 li
425.972 652.231 415.063 631.068 409.667 607.785 cv
cp
439.8 671.389 mo
433.469 679.972 li
415.243 659.281 402.285 633.851 396.684 605.757 cv
407.689 607.476 li
413.128 631.487 424.344 653.301 439.8 671.389 cv
cp
356.142 771.715 mo
308.334 723.897 277.822 658.875 274.672 586.705 cv
310.838 592.352 li
314.116 637.519 329.892 680.331 356.976 717.094 cv
357.212 717.415 li
357.553 717.208 li
357.688 717.126 357.821 717.016 357.953 716.896 cv
358.242 716.631 li
358.011 716.316 li
331.146 679.815 315.469 637.353 312.157 592.557 cv
352.944 598.927 li
358.369 643.576 378.35 683.729 408.004 714.502 cv
395.27 731.77 li
395.203 731.836 li
395.212 731.848 li
395.165 731.913 li
394.997 732.14 395.033 732.458 395.246 732.642 cv
395.348 732.729 395.473 732.773 395.598 732.773 cv
395.708 732.773 395.815 732.729 395.908 732.662 cv
395.928 732.685 li
413.413 719.91 li
444.179 749.523 484.304 769.472 528.916 774.89 cv
535.075 814.33 li
488.917 810.896 445.336 794.635 408.078 766.768 cv
407.728 766.506 li
407.468 766.858 li
407.429 766.911 407.384 766.958 407.337 767.007 cv
407.208 767.149 li
407.208 767.155 li
406.905 767.501 li
407.278 767.781 li
444.845 795.874 488.777 812.239 535.28 815.644 cv
541.141 853.181 li
468.975 850.033 403.953 819.515 356.142 771.715 cv
cp
347.523 788.11 mo
333.527 793.145 li
338.566 779.15 li
342.792 767.421 li
348.03 773.136 353.503 778.631 359.187 783.904 cv
347.523 788.11 li
cp
444.75 451.945 mo
416.587 431.176 li
446.441 402.61 485.187 383.289 528.273 377.807 cv
522.702 413.482 li
493.125 419.12 466.373 432.709 444.75 451.945 cv
cp
456.452 460.575 mo
447.863 454.242 li
468.56 436.019 493.99 423.063 522.081 417.463 cv
520.362 428.468 li
496.353 433.906 474.539 445.122 456.452 460.575 cv
cp
457.99 461.709 mo
475.607 446.745 496.77 435.837 520.054 430.443 cv
509.266 499.524 li
457.99 461.709 li
cp
400.231 421.78 mo
550.061 571.608 li
479.003 529.598 li
400.231 421.78 li
cp
440.698 479.045 mo
478.042 530.158 li
409.666 540.836 li
415.031 517.673 425.854 496.608 440.698 479.045 cv
cp
392.706 543.484 mo
357.029 549.056 li
362.502 506.014 381.788 467.297 410.311 437.455 cv
430.978 465.741 li
411.839 487.328 398.322 514.003 392.706 543.484 cv
cp
433.263 468.868 mo
439.568 477.5 li
424.232 495.535 413.099 517.252 407.688 541.145 cv
396.682 542.863 li
402.26 514.873 415.142 489.523 433.263 468.868 cv
cp
356.142 376.958 mo
403.949 329.157 468.967 298.643 541.128 295.492 cv
535.186 333.548 li
489.206 336.932 445.703 353.003 408.413 380.554 cv
408.051 380.822 li
408.403 381.267 li
408.592 381.504 li
408.854 381.833 li
409.192 381.584 li
446.187 354.25 489.341 338.277 534.98 334.861 cv
528.912 373.717 li
484.264 379.142 444.109 399.123 413.334 428.777 cv
396.064 416.041 li
395.995 415.971 li
395.983 415.981 li
395.918 415.933 li
395.69 415.765 395.373 415.802 395.189 416.015 cv
395.024 416.207 395.025 416.479 395.169 416.678 cv
395.146 416.698 li
407.926 434.188 li
378.311 464.955 358.36 505.081 352.943 549.694 cv
312.197 556.057 li
315.628 511.005 331.573 468.354 358.838 431.749 cv
359.079 431.425 li
358.776 431.161 li
358.71 431.104 358.647 431.057 358.583 431.01 cv
358.537 430.976 358.49 430.941 358.442 430.899 cv
358.087 430.587 li
357.805 430.966 li
330.326 467.837 314.284 510.826 310.88 556.263 cv
274.674 561.917 li
277.836 489.766 308.345 424.76 356.142 376.958 cv
cp
339.532 369.701 mo
334.488 355.706 li
348.482 360.746 li
359.314 364.648 li
353.817 369.741 348.521 375.045 343.439 380.553 cv
339.532 369.701 li
cp
598.223 499.778 mo
706.041 421.005 li
556.209 570.836 li
598.223 499.778 li
cp
584.355 413.481 mo
578.783 377.807 li
621.819 383.282 660.531 402.565 690.373 431.078 cv
662.082 451.745 li
640.499 432.614 613.83 419.099 584.355 413.481 cv
cp
648.778 461.464 mo
597.677 498.797 li
587.002 430.443 li
610.159 435.808 631.218 446.625 648.778 461.464 cv
cp
586.694 428.467 mo
584.975 417.462 li
612.959 423.04 638.302 435.917 658.955 454.03 cv
650.325 460.335 li
632.292 445.005 610.58 433.876 586.694 428.467 cv
cp
675.879 465.517 mo
696.651 437.353 li
725.226 467.208 744.55 505.96 750.031 549.05 cv
714.347 543.479 li
708.711 513.897 695.122 487.141 675.879 465.517 cv
cp
697.394 540.831 mo
628.292 530.04 li
666.116 478.756 li
681.083 496.375 691.997 517.542 697.394 540.831 cv
cp
667.25 477.216 mo
673.583 468.631 li
691.809 489.328 704.773 514.762 710.375 542.858 cv
699.367 541.139 li
693.929 517.124 682.71 495.306 667.25 477.216 cv
cp
750.895 376.958 mo
798.685 424.758 829.195 489.761 832.362 561.907 cv
796.28 556.273 li
792.871 510.668 776.725 467.542 749.061 430.595 cv
748.79 430.231 li
748.439 430.519 li
748.333 430.604 748.215 430.707 748.102 430.811 cv
747.812 431.077 li
748.048 431.393 li
775.482 468.046 791.521 510.818 794.964 556.067 cv
754.119 549.689 li
748.695 505.035 728.709 464.877 699.048 434.1 cv
711.787 416.83 li
711.853 416.763 li
711.843 416.752 li
711.891 416.688 li
712.058 416.46 712.022 416.142 711.808 415.958 cv
711.617 415.794 711.345 415.794 711.146 415.938 cv
711.125 415.915 li
693.638 428.692 li
662.874 399.084 622.751 379.137 578.144 373.717 cv
572.075 334.852 li
617.479 338.23 660.456 354.052 697.33 381.131 cv
697.658 381.372 li
698.514 380.39 li
698.131 380.109 li
660.954 352.817 617.632 336.896 571.87 333.542 cv
565.928 295.493 li
638.083 298.648 703.094 329.162 750.895 376.958 cv
cp
759.387 359.809 mo
773.384 354.767 li
768.339 368.764 li
763.956 380.934 li
758.614 375.124 753.033 369.539 747.23 364.188 cv
759.387 359.809 li
cp
908.801 574.285 mo
908.801 574.279 908.806 574.273 908.803 574.265 cv
908.803 574.257 908.797 574.25 908.797 574.241 cv
908.79 574.186 908.778 574.135 908.755 574.087 cv
908.75 574.075 908.744 574.064 908.737 574.054 cv
908.71 574.006 908.683 573.965 908.644 573.929 cv
908.634 573.918 908.625 573.911 908.614 573.903 cv
908.576 573.87 908.534 573.842 908.485 573.821 cv
908.471 573.815 908.458 573.81 908.441 573.806 cv
908.413 573.796 908.386 573.78 908.354 573.774 cv
839.095 562.958 li
836.385 493.763 809.094 430.887 765.69 382.829 cv
770.484 369.537 li
776.336 353.264 li
776.484 352.852 776.38 352.386 776.073 352.079 cv
775.764 351.77 775.294 351.66 774.879 351.808 cv
758.614 357.672 li
745.348 362.45 li
697.246 318.874 634.235 291.469 564.876 288.755 cv
554.059 219.484 li
554.058 219.476 554.053 219.469 554.05 219.461 cv
554.04 219.407 554.022 219.356 553.996 219.309 cv
553.989 219.297 553.982 219.287 553.975 219.275 cv
553.947 219.232 553.915 219.194 553.875 219.161 cv
553.863 219.151 553.85 219.142 553.836 219.132 cv
553.798 219.105 553.757 219.083 553.712 219.066 cv
553.693 219.06 553.674 219.056 553.655 219.05 cv
553.627 219.044 553.602 219.03 553.573 219.028 cv
553.552 219.027 553.533 219.035 553.513 219.036 cv
553.504 219.037 553.498 219.033 553.489 219.033 cv
553.477 219.034 553.467 219.041 553.455 219.042 cv
553.409 219.05 553.365 219.061 553.323 219.079 cv
553.301 219.088 553.282 219.099 553.262 219.111 cv
553.225 219.133 553.192 219.157 553.161 219.187 cv
553.146 219.201 553.133 219.216 553.12 219.233 cv
553.09 219.269 553.066 219.306 553.046 219.35 cv
553.039 219.365 553.034 219.381 553.029 219.397 cv
553.019 219.426 553.003 219.452 552.998 219.483 cv
542.18 288.754 li
472.575 291.473 409.356 319.06 361.185 362.907 cv
349.258 358.606 li
332.988 352.747 li
332.574 352.599 332.107 352.703 331.799 353.015 cv
331.489 353.324 331.386 353.79 331.533 354.2 cv
337.393 370.474 li
341.7 382.434 li
298.087 430.543 270.658 493.58 267.943 562.967 cv
198.705 573.78 li
198.695 573.781 198.688 573.786 198.679 573.788 cv
198.626 573.8 198.578 573.816 198.531 573.841 cv
198.519 573.848 198.508 573.856 198.496 573.864 cv
198.453 573.893 198.415 573.925 198.381 573.964 cv
198.372 573.975 198.365 573.986 198.357 573.997 cv
198.327 574.038 198.304 574.083 198.286 574.13 cv
198.28 574.146 198.277 574.161 198.273 574.177 cv
198.266 574.208 198.251 574.233 198.249 574.265 cv
198.247 574.288 198.255 574.308 198.256 574.329 cv
198.256 574.336 198.254 574.342 198.254 574.348 cv
198.255 574.358 198.26 574.367 198.262 574.376 cv
198.268 574.428 198.281 574.479 198.303 574.526 cv
198.309 574.54 198.315 574.55 198.323 574.564 cv
198.348 574.608 198.377 574.648 198.414 574.686 cv
198.423 574.695 198.434 574.704 198.444 574.712 cv
198.484 574.745 198.525 574.772 198.573 574.793 cv
198.586 574.799 198.602 574.803 198.617 574.809 cv
198.646 574.82 198.672 574.835 198.704 574.839 cv
267.941 585.653 li
270.632 654.717 297.813 717.487 341.062 765.517 cv
336.425 778.38 li
330.569 794.657 li
330.417 795.062 330.526 795.527 330.834 795.838 cv
331.141 796.145 331.608 796.25 332.022 796.107 cv
348.291 790.246 li
361.057 785.645 li
409.248 829.562 472.52 857.198 542.193 859.913 cv
553.003 929.133 li
553.004 929.142 553.01 929.149 553.011 929.157 cv
553.022 929.208 553.037 929.254 553.06 929.3 cv
553.067 929.312 553.075 929.324 553.083 929.335 cv
553.109 929.376 553.139 929.414 553.175 929.448 cv
553.186 929.457 553.197 929.463 553.208 929.472 cv
553.248 929.501 553.288 929.528 553.334 929.546 cv
553.347 929.551 553.361 929.553 553.375 929.557 cv
553.412 929.569 553.448 929.585 553.488 929.588 cv
553.502 929.589 553.517 929.59 553.531 929.59 cv
553.544 929.59 553.556 929.584 553.569 929.583 cv
553.57 929.583 553.571 929.583 553.572 929.583 cv
553.574 929.583 553.575 929.583 553.577 929.583 cv
553.643 929.577 553.703 929.559 553.76 929.532 cv
553.768 929.529 553.772 929.525 553.779 929.521 cv
553.83 929.494 553.875 929.46 553.916 929.419 cv
553.921 929.413 553.927 929.405 553.933 929.398 cv
553.969 929.357 553.998 929.311 554.02 929.26 cv
554.024 929.249 554.027 929.239 554.03 929.229 cv
554.042 929.198 554.059 929.168 554.063 929.134 cv
564.874 859.912 li
634.025 857.208 696.863 829.957 744.911 786.607 cv
756.706 790.853 li
772.974 796.715 li
773.384 796.864 773.85 796.757 774.161 796.446 cv
774.473 796.14 774.576 795.669 774.424 795.259 cv
768.565 778.99 li
764.358 767.304 li
808.548 719.048 836.374 655.576 839.097 585.651 cv
908.354 574.835 li
908.363 574.833 908.371 574.828 908.378 574.826 cv
908.433 574.816 908.481 574.798 908.528 574.773 cv
908.54 574.766 908.549 574.759 908.562 574.751 cv
908.606 574.723 908.644 574.691 908.676 574.65 cv
908.687 574.64 908.693 574.629 908.701 574.618 cv
908.731 574.576 908.755 574.533 908.773 574.483 cv
908.778 574.469 908.782 574.454 908.786 574.439 cv
908.792 574.409 908.808 574.381 908.81 574.349 cv
908.812 574.327 908.803 574.307 908.801 574.285 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (Metal_Tank) ()
%%Title: (Compass rose 2 over white paper sticker isolated on white - eps10.eps)
%%CreationDate: 12/14/2013 8:40 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6CN!b8Of!Ih)t8>Ji4oTgS0>StI;ekr!E?-u[qBAYY\^cfh$np87?ojpV*M=sX+1)do>Xt%akU$cmab'I#%Q=A);MbIEa<.n
%MTZr'qq8<fGIOcZDVmRgqs,mo-Xgc`YISMe'^*_=b"mNXZ_.3PeaG+4%\Kf"Bj!2%gJ@E=q*[;]3Ap\95)hEh55Y9Ge[q<ogW(u9
%mp99`4Ik55hq^NpEc^sQ`U2g>(N8Xn(Rooa]Y;,WbN@LN`N)5XB0Q>qq>-#MlcUsLmVa^!2t_8*0n$/7s5CdXAM<!):B/l3X6Xu5
%0>Fm??bZNiNW&fAIq`9UQ`i"`+&-_7)Na0,J,=%h(o-Agc[Ks2(Otc5X1qn%^A@Qd4T,4s-N3Ph5Q:*Ac.0_lrPdgIh<dGmDkI'0
%\k$16^:j##(b:*nBD0Bjo?2&)hH`@+[r.hD+!6!Hn^mg7/X-KgWZ!)uB'TEkDdhK8`]ki%s6^q4s2<6'P;_+iI/2lFGXR%S:7GMT
%c`qsBX;F4u9L:MO^V@F,H[YF/WQEJ_S]5:1StjPSN%;d?ONjI_&B]#3>$*[1M%qdaROsW*(h'$&LCdDa`,;hbIWor1QX=Y0mdfB1
%jaCJLTAMk^FnICGpE>hos6>+/h7N!rq`ikB4k_T%d2&@A?f/Q2]_6(.0DOQ'Jq^En=Sd5kiqF8`D_<,K[GP9)@pXUu&rsa*k2";X
%`V5_n&*&Aef=u`\H2IKN5>"n`N\,V42'Jg\1bpc6BsHQ9fZ`s"M,inGg'%<8]@e4nk@M;@0PO59QaV?mH[k_NlLpPlZ.ZR%bN[fJ
%V6B@&]t\m,>M_7AZi<\Ul#beZh_P2_7CRhmI([*4h^-4Ec[NQSdkmWpqCD?U\:&dKGJfrTV1/-^2SlN_T'O!IrNEh?oJ_-9]=7_H
%M=C1Vmd($W\%ML65P^<=D>sCTlZ`'C^V.C/p\%[thq\2&-_GhdqX3J,k4eTdYO'BUDdWLQb?),D53mmX:LCfIHFuAR\9e&DO1`WL
%iVhlXs(WY-YP/"RnGf-OH/$$0J9ESblAOEc0!Fa#m_*j<\[[($q>6*I\"E53doEjnpDa'>qsO'Vn*D\D2H[T#mqA?c>$F"*D;b%0
%4`eEu!tXbsl'#4T4FV&qqssIR_tNKsl[eP#r0193p&3.Y]BcMQS*^UX.GLIZ;7afkqqL#b\sW6\*kpJ.rpK3#2\>sRs3kkKmiVKa
%58km'LQ=0o5Q5n7IWf^ZIJ)b%ipF3VYE$<raPXIchXfDr>",VOlGkkJrR7(cq@c('4q.'B=1<>SDPZrK,BnA'(3=<`e[H?5+nOb2
%HVa(d>J<!A]s!)b:4E&']Qn\4YGD3lro3U9l1eV'55W7bmD[?3lcknog-g;60rgcuEV&Pi:Ohqr5Q/_(pX>bQ'OqPk$=AH&iH[Bj
%cbejg`6WVp(],S8'Oh>V$IeWVH9Rloc_f%UT1/e(5Q/_(YIE`kWoqDMoVq'_qo:o[5&6e=s4UHF:RTB!/^*iNV8$g?(>eXLms)9h
%%rZ/XhD4=ac^3ge5C`D)m.p890:mZ%T*m=3MtA4.-njkDp0rKU]_MEDZPR9Jcgqr+?@61"\*s>cr$'fYH&-P&%>XEA\*+k2/Q$H.
%HZ.Sea.XKn,[%l.DgqEQZ[9sLF?6740%he-.4i`&_;,W($)Pp)*Vgjrbk,X^k#K)')r^*)ia'kOOD.J]*:4'=-r8l&Rf0U'Eo`:/
%lIkdb3Zm\_PLjt<^:;AFlF+*f`X:R,^JEF`W+Xl"I(m'NbJ?"3CTfmH`n-dDF4jn8I5^h#e\SgWrX=;N-P"bk&%a%Jq/jnBr@glR
%]Zeu\NKI#Kh&3LI'/QR_QaH*4^\9q_mp7+/q"gpZf>k/HZ!JNaH/I(V:S)j?eW"A3[^SG\XcC<lnSG$4dV=1MY+P_+)ImZ_V:G8A
%XcNIeKCtAul"%."6t[M8j1fe4jJ,?lY?&RL3s54Q_7G+'^/'OVB@?LdHEhm]B:g3r.Si::qW.3R4nFe7m6-p$,G07R^3]XDpMp$O
%Tq.Kq]%#gH>(,FBrPU1o^bQ:6YsYM]8o<4bIrN*qR86tD7k`4ZXh'R@B(<Xp7="h1)Ah'[rp/t-?Z,Pkk*NNVs04YerqY`H?i7pp
%pZ=]p1LFGD]Y2&74u@,*bJ3c,;h)B/niMT$PmIuMBl-M6PCAmn*$NK>pu_G9:S760iH+kEp\a_lm&0kq[(gFo[/'CW+9-W?]`+o/
%d9\=E[]t;?=6%'kkta4P0M2(+?d"15mn8(VFM>Dt^,.q,^W)Tn5@*\E-_Nre:]J;Q*I7t*I!%D@C]C,Yr6P*,,HaOCnE%"4f@^N0
%YFFWpPNp96Y/ea.q)9q+0_lghEmC`bY<fXa*E(e8TaO$=J'Tbh0A&>#(^(Tq^L"T_HnXp&mt<q(qYW9rY:nf)kJ,\tp=Gf">C5;H
%mToQg0Aep!55^p>D%D,FIt-uQoeerFQbDQgI=$,8qYp&o58?,lplu<=p<W[&nU%EoqX\A"cgAX%hd,#%r/L+3YDgBdS#=S]GB*S!
%q_3MEGgD!^IJp]/c,8";s-Fh-gUl4`:Dp"p]2sKrI/QXS1`lVA5Dh,hnk-0Wn0q_mf$%3^O2')Oq1LE4s7d,8./s0t&jAE+T/IBb
%(GDsF5A=bXb"Vhj08+hg;Y]?tT<8rSp;aGrq4=eH4ZqTWr!:g0s3N(gbD-H62U5.RLS):Ys(C[;`BA]Uo).saPoma9bE$%Zs"C%e
%+0MeRrU6N$7lj,qr8Mpe(Y9atpeRCO+,S\maX-&Dhs:/8qHi(Z8A8.2frg\gIe7E(H[5;HgJ?7cgIH`=?SLTjOAl#>2uLkLlc3p.
%kmR24IiR?ao8@7*G9?Zf0CKt,fJpYDk0_X:53XT#5P1_U/#4l6\pJZ$l;F$X57YTJcFY0P*&j4F(U)*Cq>l7PrnYHhhljZHjHJ0M
%hU<ZCA'7'J^:\j<>5[F;bGVW75QB9>H$f)Tnp^1LFn>$)Nj")ojH5Ata-UudpTHNZE,U^nHamG3p>C7DnbVo%X.,$&59K=*LUVJg
%LX072?]A@=`r:Dbp?K$6E[R8#pUdX/q6)]K^O*WJr9iS'nac\E?a`&/VE&M.aDaP<?/0mQnaP)sZ-WF>mnE+dFr=fi]Jo&Hs!i]H
%eq^*OW(kUMZ>od4rpo%=EO0jfY,.rbhSIs"c-+p2PaLM/rb(9jZQFVarT.e@-2Ud_Rk+A^(QXpVdRuS155b&FDsq$2q<m)!k)H8S
%l.In1<u*RhqXWV"m@\f,jDGOL*5nbIq<bf7\+\C6I-RIOZhq1Nn$0q1Mqa#r(Uao_I;a^E]s`Xn0:tA\Dsf9f48>Sg^&N%r15&gE
%pYT7oIXh1Fa3BOo=-".NYHG&M^Y]KFJ*hPnSR:0dH$Af@EqADKg[1q(h9E^LH[Dubp\sqLm"b?%oe:6sfe-O!g$>]nbKZg(pkb%q
%4PnuoH$a.WpH8CtI/CPE0(7]W+s*@)o2aGU1c;Q\^ICT(q!6s8JUQHZIDmQE^JC(qf2lm-^:6c7eJ?@JEcf>lVS--bs3/1-jiM_d
%d&-X#`V%4;X0%s!jYWK&Hck<nTE"27GLtGV')uX>P!JqiIro_&aYMM@Sb4;iW?q&ajn7M:4PK,Imp9:)ULbM=^i?tpqm:dVbPPX0
%J+Dt*hg`tc):mQWR@(2GmU'>84sJV@(VdM-I/<TA^P#sAq:4W:LQfD9-ZNW'qR:kfIJ%+c:%*GqpUbRYa35VcjRlK)8Y#HX55(8]
%HMGJ)3r?mG]6eg<q]2ea+Nr_BP3:j$qBM%ar;#XF93Y<S.,:r#eI,(XQnj#0q=>,TGCO>%nSlSd\c5&8LFRZGW"A"2I6mjEX6#/t
%rKk-_jLK.$(=Qprq!6,T=7:%`J"CBj5BMX7I08U)DPp)b=1?o1G7Rc97iq@_T<[e0qR6F[PAT4"_-6D>kSJa@mJcIoFq80Qi:=oY
%Cfb>fIek(V>YgANs3s&%O[Ml,V*e[>9!4KL#JS1SfDF%AogHptK-0s(+#egs_h[CAl$)mb5@MX)RL&k5T.jsYQ7`(/mJX$]O?]sR
%Gj)O?>K;#rPgf"os7"G79C87ekq^$BaX?i[c^nKm@peg"k2l?,kP'/4h>dEJ<ofHkpAT1#mB7!'H2gf=KK(kZH:k'a7lA4`Z.<j)
%^-B<9gWBb4\po-SGQ6gt_h.W<^>!#K`ufZ4PO`bk[Z<WIh1rr#;fAjHIK+l;iX``6IJD`^g-^p5"R]LMlXfhQk0Kq9K_%G%cqDT>
%O$3.#rpK.YjSn<8nauMIe(HbXd)3J^g[CGg0mbmn[SuDd6h3@0^:[pIIe]>cb;U6iGoqM#e_TVf@_3_.kW3ZX>Wf/He%pYIhbp#P
%Dq5tX$k)V!nmQ[&lp(3q\#3"2`aco(%q1fR5^Ie:md7'eO$3%&Tb5WbYMXc^OaQZ7O6gR:#AcBVh7i`YEmR`$\$t*2rWaMAW'5ZQ
%Z`ce]qnqZ"VjkH9HtgWr=_=irs7FuGJ,e7Vs68^9n)A].Q+c,CrS9D6gRT(?F"n?go'1C2amA+e*IY'CL6jrQSf08_=$JfRNrqgo
%bgofVra$Z7cg=HH#G-A@Rdmr&rH'LF^Ad>#I9Lei*oB8,<*W:nBfb1AXTglsml`6#iQ&'8iaeTDo(;n;Jb@t(et7.&m)P11]5PE/
%\6SjRed(?rF%=L@f9["LDf5;tBZCnAee!>a*O$W5Vk2[N[i^"eio0"Lj3>PuF:6Fk6hcAeeGIO0;n$A-4Q<I>OLREa[F8J\"oOMC
%nEq@(nD[pjfTY3[^AR]mra3[&H-^!3'g-crHgD$%o(qA5-Q!j%_%2q>3b^6c\PRd#8,8:K/[[O0+*cA6lLF.Z2tNrP**r5"CV(M^
%s1nUq/hAs)/%`-9m(*#,Crh[+)E>]B?JIbm:fV<`(Y__]eA]J#hW]qoGkh9;IJ^:iT4j/ZhWJf0mf33(+SdBI]p&@-*o<7]'-;WI
%q9b,EP:ue#iUZg#/%MB<[$0<"I!bn<h<bGk]M,RL'Zn6_QAA[HQ]D@e<1;ZR\(n/DP:kk8*e!WO8dpX$FkGa.WHA&(GBJAY#^X)L
%O'7Q]/G1Ob_[#i^-AoE1miK7BTJL6Ld8r9a%mBg>1%Y3cI,?ffml2^WfCP>1J%`Moo()dLb?'ISgaDutpZ"[IcbI0'^"d[f\HI[o
%h61_jc`JAP<u9b"rn>S]X1-]IT-(SFroV:]IkR;h+:jkqpJkM2Wq8G54mW1UZt0p1]SV>?JcbWCj\LBsffu;Mr[F+Cs/YiXqo$f>
%kI5J"Qu'gk8cJ4[kF5gr<Zh7n53T=1!G>e9rHp!lfArGP\,K0Qq<:]3l+]I[qOJ/RkAPd!Id=b_n_a&(nG3#r)ErWn&RSW!E16>!
%qF$lM"(2TtZ<+gfQtkHI`2T98dcSeGaeu*q+@96o>tPHn5P"$[4El+?SU;'IHs3P<AtcW][+GiP+5Y'*S3MDm^6/<Zfq,aVi`K3Q
%;]`OkWR(S0H_:-4?96V.3%\u^9AOskfsB"3g!]ZOh%SP<%mB)lMa"?gf@(^TZ9`0%3JT^dl#`A2qjbn(IAaUEbtmL@(p%s#6:uZ^
%C-&I?)0r[j0@AX?D,`koPdnuWNq8GQm8"C/'/hU[WLL6SN'B(*TDqCkfH9n?!m\lZra'C7mGSB^Sb?9:I.ONl)`bW55C')Sl8j@>
%.fE5Id6>LHb>L^SJ1gG6RTkpDosCUMI$!W->jB0KjjU3jBS2OE>LT$XiAA!5`un)*2%<GT0eu;n@#<P@WLR!.3%$:6a=$[f/`3n0
%S:0$$02d4NGW*p6g)PI\/pkcH?+bF9AtR!)kX1/=_d@Y-3A$0&:#ajHaWEm_@+0l^2T8S1c%K7uQT.do`Cm:lZ_O&"iluPMXbqAs
%Ve5e^Sk6@GVBY7uJ4NPD8S9N(68,ckWEIZWe&=4m(G=gt"H2;<,$YDjH&4E[_'sF6ZUV:Ocm7A'm7t$YN=DW8J5G9<cU>AkVsL/J
%&dBs>Mc%kj`@f-[-R!*6:3Xfr<>S4BCZE_lnnDQlVUI:RZ\oUJm%QofI#5:@]+]$2V+NSZLYF'&C$&hqAhPY_Y-?Q_,hAPYQ:fPt
%Z0t@-a_$I-1e,a@;QeqX9t\N4-Mq_Q>B=d7YI!Ue1"RW&%f(!2@n`=Z9@IUBpqF^*IC:G[D"_qn9Oh1@8XG*VV._FTf:;"`&(+:r
%Ot9+%""-"J[G!QIf#+Sm@Y.>!<ZQdGkY#d3F=11,VP"JObVn*]-j;I)Zp^8)7R$XHfkR\]/BL4j#\p#-^?`)a<JuZFZY6OFW3U$3
%fojEtb'b+nWG-"0g%<28;8-8nN8;-;37:SqdmN5=DY?p6(MoB5YhA*k^:.Urp1EI^!Y_TPRYQ"8L>jHniu9<!PZV_0]\=Eh#1=c<
%dACGm3]kK,-^sbE]O\aGShLnOHoCT?C=S\KM93OPC#QS`43lNfHC$,,BJ^CG#1L;AXiqWhc>7>V[\q64@YrgB2Kk7!c#kC7k\A_8
%N3Q^]N9RVo0.pGrqBD;5?#6hlRCtlg<_WquKLF!9DmJQT_YB5mX+`HOBP@a+c%WH0Z74b=UJ/.[Q.@h\D#:i@U;7+O8O#(Lle(3h
%"V,/Q_USHSDPqq):j0U,3$^!^a+]A9_JG:dQE`g.oW9_5g3A=nB%,W_Rm?&[Nj@K_QFaYum1j]-ij4?g9N+J?WDBs`bui*S!>@'[
%.^RqK;Al2p9;\@a+"&s@Xg6`!A=&U^k#[i0kW%$%3i7r,g^9@6Y&$fCE@U/qqf6cI@u;Pak(@8>CW;C8[d9pO?SeM5'o-Y_M'ZlQ
%fpRXE7`i(h=kXH]"/a_j.S.'+\\WKCmnUC@ea:TWFd6?qRhT/<a`WdRB8=b@n=LSd9;qhaZROZQ>H*&/VSZ2KZD"hQ*5rieeX'Fk
%*5/I$SP_nemR.Fgh9I`pkia1:g^XUHAp1J.DiG\cM%*mC:4ZgZ/A!g<+e,$^N16s9`$CbJ8^iW;_+)(+XZt:\<PmG,3i.l+h$RfL
%a&T9V^sc8*^gt/no7P1LC*u$)1g:i$B%j\qpfF$-_j>>Np8BE1\/6Q7DX`Vud*Z$K2Rt`m3k/ot0&)i^::AY0DDT7qQ`,[!B,=Wd
%dGC@s-nnIb6oUQNB&E*JmEui;+^.1JSg77^#W=\i<`-#9C>0`9VBF"QU9gUgGEPNIbUq0d:IoHV=%0,so,iD!m&\=_#.Den=_eo!
%^_DQ+@:iaW6\'VC)f[dRBu@a/qE_?"Sq<!P1/"ek@CqdT%R[^65NU,S*qm6WZaCc4R5e>Q_)sE.Ag(BIcC6NA,ap;4EWAn`j@;&$
%9o4"(.qgDjn(DNSKLE.2l23Z\Fsl%KEc'.T;NV,j\h&'m0q%Pcq64koe0r_=XBiI.RGBr`gs?;TACHs(<=TqrL)"7b+_tF92M`<r
%4I\\Y<,8pHdDE,,)s6*'M_T4m2F",ef!u<\Bd5&9)m/BP%OdCe4@HO9_2$:ZDm$fV&R&pOB\X*MZ5>uALhL>FNcNs42D!XL#o5rm
%`&YI)8S(q:nU&&&0bA0<R^'o5gD,mq<.$qC7iUS.m;LQ[R9=;`[XR,?rS$i%-Bd&fP&/Bb-eU1mbr3%Z/VDpR^9(F--Bl&Ucr_FC
%`[@k><l`reW'e!um0#hcW)Z&l[kG>Za5W989QK!&h]QQ%\Saj*L4S)q1T'<`AEPMd>+uc"-];>ToW:k$8<^XbTNjMA]4_4p7)XI`
%F>64AM9+WOiOa%p81pBRp=W<O45#@JgULSUg0mI:fbUEqCps1u%pS<l-8@-ZAE1,NNEj*KgRDd]Q\-_ZKX65(J8i*-Mf=le8+MSb
%fho1F[Wr`;DD`kXP`Hr-dPdXqQt[lD\ClaV_(W[&3NKnHKl5n=CmeMjM4JJk_eVc/rK/Nd%A`TKq_/gL'?q6%%acM+GG8dbe<u5N
%bkK15]4@8OFAh[6^gnpi"j(=jMD6n!C7<n=CKdsHUMM"kjV^^7!CY&Z$76&4`9&l!m$.`uG*MGjZ=2iqmUJu&1_p,*\o>L8PQhS\
%E(YT*bXG\jE`6u*0O^F]=jXP%W#/a%R\q.".m!JE9Jfr]3i7pVh24*$1Y8dk[LdOX[0+,#iBT6[3<dNU;5c@j2:Iir&"3O@D57PP
%C5d/=K.1N!E95c71K/J7$;u!]Mk.8,8if&VFsl#uF"9.?@T#nKfXkm;fiY+3qfO8A+ikGt@N)#&A=(PR3cZ=]5V^rhCs.XFo"-b<
%r40CTPLRVbY$9:i1lX5afkQMCkol'j=)<jjkbD`sWh:,$D:^=C131fc44gPHGqi*2@ciB.a4=UVX>V$QME*4Fbh(>rSZR<`N9sBI
%@HQ-S7`3H7"M:umXuf>)k1RdkfRo$__6ODVn^6Zc)6lf>XICt$*44@;(npK17)tCCB5G#kcHm<XSRB@V[4@SlUIC5#\%s>Y=np5H
%c#i6PqlcE$il$Im"j01h;is7W2N'J=7^5T%9.b*CcP"K=_aU<AQ$%87moHqZN*NuMiHmr(L;Fl$).i08`XRif.jNZCW*>RZ)gesc
%_is?&1,OTr=r>;ga^K'Jf]HkprGO<;gH38p-ebeEM[hn\'LR%>)5=Aj9+GiUcQW21,Y!p__&0bGM_bkX3+S3tjJ5AV0H,"C"`QTV
%k*9V:CZ=#EXuk#VQ5PR'.d-nn=a*HCo%g\'N<3+U91b5Q(9k9[Oc'bY=1j?1K<):TbR?tFlIT(>>RUNAdh[qDmFb@F>Ihm1EXRna
%OS'/[>'EMXSQh6f),aMM0\MSd+mX@./mBneHVCkI=k0BkgqaT45&`;3iMO^4&&R"2aG!jih$H$Ag`k(/1o[V$L(?Sei@L2a`=0/O
%7E!=.%^??$n2_*=dY'9:%7t6n"@&/>Yn:[iR6%uW2QRPB\:e)Xh$TL(SQi>"W`84n-`u4<>r\7s_/C)&D@A(!Nus%S8JOfTZ[sYZ
%+-Xt<pL^b``AB(I@]!8`oIE=mCk9dpfho1>fnQ2)d+XCOZ)P<='A:gnQF(NFBjheZ4RPE!M-FmWF`DtI*MV/*A=k[lKhXU:TjV3N
%pfs+1G=.es\p&hp::=Tr(0_S$bakTp5X.cDg*I>CU!@VIo'VpB1:S:7+K!nibPiK/\rb-B:&fdAd$N%\aq?tH.8/nH@Ch^T%841_
%7DMpUKKF8G6SoB.n3J:EN'l+?lOaAXIf#CD?qBkMdBVo='0G;"7=jqbP:?:3MBC,,?qj/ARdEkW@H_=06@CDZ^(Q$+:cCE29Ud=:
%5m0!70#?n"r23gSc-T&CPsb[j*CNr^Pe3R(%b23QB<X$dU?"Ar\WnWS'0"stOLd2jFp.[sAVZ:[K%UTW1LHmC0iM=OhTmkb!uI"*
%4,!c?UJkaZd20[VL08E_?fLE]A_^R(a-c8te)J]b.n0270@em@*.2g!h.1`m*EM/^7="FiVV]R%gV8rh5)Z.--5FDXEgap22@62A
%jXdLL`EI9;M)DA=1YQ[lbJi-p,$Ei@Z3Rn"c.rdY%BmuB^i@G,)^n=]ddY1SE!:*$BhUP:Ya*RiLo"n*feJdsZ,3_]m1AjXS31-q
%=VAn15jh.^>aJXq9=nV#j&0U/Y/OHWID>nb4bB)UZ>>iX/`,%`)O%1plHbJFh$H!`g5K4--?h'gU4<m#m&-f<B?0WWq6QBW>^+Tg
%RKUNWe+%)&Jr$a-2c]`IN9\@UYQNd)N!gE3`gn,[\eT$"7W"HnJlTHO[jVg3'[Z3tY^No)q^_F4M6.JH8ZU$n)PMEBn:Y27RFN6]
%\6)KQQL5I>H$/h=h4!G#XC9If<+(he1O)/^@bKA#I(YDZ5oc(=-uL5qe1bQ'GNrZ)bS\pdSekTd"Ci/#`>`G?bMA<5hIjlrmK=I5
%D.:G+d@N?oB0VF';/U2&2H*fR>R#-a'Bh!bR[&n6XPK*m8#@JD2U_@0Y\H05B&`(-/IFA,*TK0@C<NhmPMGB56eKtZh"sXdB%D21
%DU<[]%uYd7WdT99eU<o]q@U!ZD-VN+Ci[fN:26Sn\FZ=5j1(:fR'?tdSaKKG0!"jiQYeE>E8:g5b-Y!0;*+A(Cn(9=QNn6A(,<L=
%Mp+XI?sTFKAUk:QrTkB=SPTs?N;F_dDVm\R2RK`M>1ujg6,@?,?eqU-%Rm*anq?lTm/*Mo\LBp.Uh7K"beH^`#ccj^Q_AkOK]Q7/
%H'kakYad$Il^+ZOM.L%e'd'=62A9O'h&NX,Ejo75!p_+mJd2NUllK\U:7E+G)Zp5&MogKO$=fYJj11@h=KREf0$c<`'+QYUiir%5
%_F_W$ZX^27i:f\](gSb`i$Q"i%ne;g+C\Z3Q]gj.Z4XUj?u_eZA%<>T%=?X,=QA$#UI*_4)]\KfhR]CbFh+l#0?UM.+3^l,n;R5/
%,EBiJ@(&0`n;Y+4&^<ctBhRMb*:N52c^e=OldB=@GZCu4EA0g5\SSN=%@7sCo%kUXX*q,j,\D//FJtbO^-hgMlc2K3?7+4EQ=q"_
%!=;UT\QgYV41U*:RUea)Ha&(B.I0qYNPl>hi@!18Vb<,VK)O<Ge2mJ;"]2!4*OF[8U,=-MRRXIL9i=CiVmBkQ[o1abUIKr_Z!J?h
%VE5NL;bcfaR'(?nZ$3KT\6O&:QYrL+aiFd#H_[US'#m"G&c!895cKDJLn8,sB0$UU/9bP4q_[;Q+K%ob^Z%Gr8iBK3L@#].A9]O;
%>TtPkFo/Nq2+gbdQS")SD-H[W+d2CkO=;HiTrn--ALbSY-$:L^?J1PTUI,9ihs<99Ej0)Og6>:L%dWJ$hCd8Vr6VgsE]0&WK&,*u
%6<\\L/rH#1&p2EZZ.t0^gGIVgltsIrV+>KC+Q+it4o&TNhqF*,oPn^hJWr^&g*SiGmF!^H:U%/):E.jt)(Rg%9@ZG!Eg:NLF52U/
%lr%<c\j$acbsge)G%6N'_QYH(*10K1%$dL]&1LU>g<#OU&g>HCN]KX"aX'rX^6T3Ej5T;5.s>-Rnh<W[\%f#NSmtYZTnMiK=@b<-
%'$)t4P+<dQ]SkiR8g]]K:tb#PZ;o*C.?fVL0jV0.mNH7lG(egLVI>J(d(Qc36(N/T&4Fh_-JL5<r9iWdYh$53\h2'*B[$c3&D8Dp
%VV:j\+]V3F@Q!b/T[E:7RPi9j=D?E^8kN?uDV"5F67dMZ_5#bCqb!#ubrC/pC[,C%>S/_gPs*!(D0&Nnk@e[i]A@O?bdI9MY#t,1
%)RcTmMsqiE4(WCb+ZU]#H8I*$%>?qu,7n4S)&+]h*AXrX!f7;BaNZ!1fs1s5L[^+f`"FTZ[Q$@gE[TGB7"Yujk!l0E"uk1!*;sb(
%QD/%PE=8j)Ng&6-;<-n\I,\DBV_S)!Q58mo%7aJhGZn9$3c!:d[o11RLBd-Re2=QGRa)gl5pdSqB"BEm$)o6T-qebEGH'#dWBSSt
%*g"R.YRo"EBe^#dCHYE1PMa.+/9bP46W@Ae;YZWM`F`@a9s3og'bt(b9q-j)4Q1AG;huNhBrngPoK8FM-`rqmV-jkg,=0$Tia8)+
%B?*!C<'@:kVb8++QN"6jl$mKCo[,M[+(^W-+3ZVb$.?jTYE9<3POtb+m;`'Mg!oQ!pE-`mV_e:L4jU5DQY0rDcNt9OT!OJRa8QbN
%s.6rHpRa,8J*c4Ua76&If8n8,ZS)ggK2eE=hKRf,/\F*F"CU>bg2Hm"fVI&@CGr5(`]_!#6Y\)?q3]=(?NP4r]DZb=L`C-q-em-m
%/%()behm\bduV-'@.#lW$TSm,=[!Q2+2M<Dd"4kI)g]sK[A$c>"NVBfHk`rEeH]bg;RLphDS_M;>#Tr_Z_ZsEiJ)7aULBj]KcO<&
%FKjp*Iu4`-0%<[&VOt4dhm5_#PRDTJi4r-)gZGqdgfQ8*afNoS5gf%rR:@tpD9OTO7`TCWZ_ulIN*NcBm8AN.DMB5o4`3ePDhQ%H
%0d7>@R'K3,Nq;$V2+TL8QA'"VDL!CP3kid+k'G[I2ETI^a<b-]%,j@JmMK(\m2!@1=Ct^1.K=gYBQcb.A@(YE&X5%lG*M<!PsOXl
%)C3Pd\PlOIofKQ!'?_hk$+hqHM,+0fZJ).D0sd^Ag?au2+%IS$Q=\WJ`NUPSHGSQ'gO"p`=V&c4dCtoZI]p9L'cE*\,KVX<Y_G\l
%9RXt`2o*#HKRS`r5u7mlElkpE\PsS)9-#TYEaaaC,.Va%1E<q\L8(P(]2>im\Q<0H,N`HtSjn)5YPQaY;A1%p(pRT!SgCi]8nrN>
%,`fB[aFL[0`gFq<T-0>u&V3Q;b>,nu\Jhq2jJob'b-.3#ZM5A)3=/_K&VCGn"VG#o)g-L!/j5cU.)[^s/AZFJP@QXl(UO9a-V:aC
%(U67,=/'*hLM9nC"=s2r>d-Sm42Ffs\mRLuS*/][bLZnBXNTlf9AQC2CDh&s)koo)]P'fu79o=/)=cEi]$,UJ*'R$&YiJr]AM3,$
%Q;d3]G0"in._jp'PA%IA0mm-nZ$+59>l7.$80un0a5*]),UDUJ8*7%D`G1"LSetkMfcJNn`')%Lb+#$/Dq$W:0frdS=':%u6#qZX
%?#)-A#q`\$*'ZbF\Q\U*RZWJ/Vp)U;b$5\uN67fF@,=!"IPCjLKl(;-@(#a8C_/,:f#R*,k?_^#>=`38T!b7j9RQ7YMuYIRn;Ncr
%6d80?nP(AT(4F"E(4JV+R8mIRCbOL\[\?S-,S<F=,S?O.H7VJ1RTORc.kI(Db[7_k9Q-B6;APl4Q<iH[_DBuTd+,SQWl^O]gF0UE
%pQd?g9F5pU?(B9bMr[e0*cfe1P2pZ8`/<YO.OE2-.^I97+uD;IW8qTH@_$+6Cs[k=/<S$Ybn]Qogj?Q`GKAj'2I02H8r-/5(-n`C
%UO5^64ic6Ej%cHX(R&BEXr;Gnml=DgqDrJN\7?e;`9J-KU?G`TJ+TJ&(,Ac658G/9;J^f!(YU9N#,<Q'/u(Pglj2'G[_ADR,o<V\
%i:Sq_mVr>,_HD.1/=u[_Q4BU-#R+M/,nu\$1aoV:4./bjV0aKpV%b80ZKlUo:jo_nnCpMKR7p1_6U2\JOi$BD)iN4RXgo&n,dYh'
%3:2bm,2)C+>=-V8!j7cF+UU6074YCKM2"PnksM7-GmJT4EgHhlj1UXURB04#o;jFU)csn"T\I/E+t%+r=U1X8qBeE[,ZQ%P`SPLe
%TIuCb9Z&h_XCM]8kBCUljX'cZq!8:4SQM:;,-f3b-P/j9<:EGuZ=J0kR2P7_*PS0^!ck,Dg;_(QRlB)T2dCqd.^@JMS/N)n0?D,C
%N*)jVB?bKFQVn&6=!Z18QM3nKYW&_8jZ4eNF>pj'+dnb2A?*?h'bt>(Pg!+5"\BI+fZ6@P8PC2p8$'d`4?LQ'Q^$B^5r],$8>UXO
%hMnSH@_Z^dBskI((@kifi/gSM;fYT=q.@3A)2]bB2b0!'Y5G;N:Ms/8*:%6-Gj`LBVQjC-aV,(LF-09HEd6*e^%#^IGZN(ZAeq\2
%#L+3C&7n7$&f$k2ZJ:A-Y"5?b\a1<+7V;tmG+%b+_(=."EY0SMHYsm<]((2aLK!%DZ2mgF$aGFXZU_qc1`'lGQ"M9Uh%*1)'(]"b
%81H\i,X7@fMWoc#ijk8RZsN^R(_EC!;tBRh)rJ4-F^@UB`t1!.aNcQQ>g1\KE,UhC=O.m9N"S40)YqB@JF(EO?C'?Gb+D&*H1lL!
%Rd!SOJ@X;?RKM\s1keMcd07GYYS"99[d=]d,ZUKPaV@aH5r+EU@V(TMg>JAKMFh:=W%#+60h++6'F6i``c@DlO3-`t<VLmqH-T"I
%;?^,N'k>OTrPl#>BEY'0e]eoPAY2M*.a?C7fJ9I96^;;PG<p9F6&MMmEZ_FdSia2Rn1I`P$;aB!PP]QlIhe?7i(A/<jj<^$R`&*=
%are;(ZVd8UF4ubk@J<.<f[DCVF:'0,NY&!9/bIFOA@W?]\Ql6&(P,*h;Y>AI_eeVW%$An!O_(N6PQ%P8e&a,NP/l*c]]Son9WmMX
%@)s)*`*#W;GHMQ0f@G`COQeCV^/BG+_9C-=cA9o\;pTum?7\u!`ZN6?Q,T+:R!+,cUCrJ([ja>6CUCJD?PeU,U?3&30=`"NB%Pg.
%m#^I,YXhSnJmer<R)HtE*,bZ^-2),Np4XD/4*?@ffUSe>^nnsVY!Zg)O"egI5nD)7Lm9=3A*pEN14Q=%fW83C'((sQ.&jj_@?\2,
%k1l:>"[j2l)=+K#I&_+.`%ns-07--tODEFPf2O]Kq3OqbR`=IlY=fGk%qiq-mc5iC]a@eJ+iQ3R'#cW.Ve?Y<QIDUN:Ui$&XGAn0
%9H3'0k/Fj"l'"d]6DHXTSVpl$\fk-Eo-0N=?"_3&mc4^'=ij,+K'CNJJaMGSkR^apAW+oY:A+!2e[A"$7>`DC9T0Up8CJdTb,&=[
%_h=oJK!h!e>210B_%)n$;X>@_-c&X4FtlUB+l#?b/P`a2.M:nZASS5'Gu!15P$#up=D#buWfe<^(!][FoE<D`nc.`q1I2M@*FZLB
%.Wo+M6C?(/hG'`eVI-?#<nZ!sVD\k!]!t<C",@GZ&C1oXQ24C?/%\5`2S<f=jAMBkE[@.DPLiX&*TO]R?FTO*%Fg8mf??nt3O^87
%nf#YCWA6t$g8JW.,0RuS&<'M^&7\aMND3DOHD9f[-)pYu8utJ`"*2p5EEVheM.J`SMj=6)PJad#g6e<QP1\Q^Q?9&.%s?,gopr6c
%<Frs_(8jup>\*eSop9*q\@4jb?K<TX,K4Gq42E+;:2bMr$Dj?I'W<LT,hV19[c(J%^Xr_*^,MKDiTbBCY/Z<=!o$.#'.,`7p=2Ps
%B[Ajo?442TMGk>XOQeBmIZ@&;/@rR>.-U(97#@@,giPuNZ+<aYKJP%il?)DNo)\R%glI&a'HlO$O\)Eq[,X#U?XNAlS/l+M'.`)s
%H/it#ELk;>CJdu0&uD%7=ZU0=p>mW`,uuKoQ\ua^/8'"(,HG,c^liH4I23XsWCRcaR)K/f4/"!aQf%Rc-0ck`dc%h.Cl>))9IZ-#
%EVcC,=Oo;(f[7ACaO9R&cKm!,75K,@q[9[k>`16:X::t'IH]?=QFm(j$5:7_/8k<HT.OhO@R\h`aH@1q`"K[2O'H[E&&bQ$8!@]]
%q@W"<IDV.>1P3Op\[pplJm7jtN]X4NO1a^mLo"RuB1GDS$S-J;RKHY`Di;c[N8[G]UI,)+%T_L]`n?"V,TTRbYJZ+]LrEY%5,D*2
%s0,tCbF;kKg.<is@9[8rCe;808h=FKA;8g;7kUTOLe%`,-F(+V6Xh2_R<N2:Tr4>7Q$>JmG6?m5%!L$b@!:hG>_bFcEYX+%hY?)"
%G>c[o=$RiZndGh^Bk(S\/1MBEA>gC,g+'?UR,YD@Gmft2k3tYpk@U7;8uV/OXj+mZpQ2^+4Ek7gggO@,qSA(nd"S9T8M7/mX=Y`A
%Erc_5,7M-DnX!KDhfd"3,LrTP;-^BSn6eY<"1_rQpVGCZMfm*^QT.3G5sd@A=r1bpFX*0P!gh4[IYr]M0d]dE8[n5?5LScJYuB6>
%XW!!LR@?1Elr4^qS1#H2H3V]Un_AsY]N[hO1:@2GT"?5PluG;CE&Oq!E-C5p?^M8?;B/#4E>i:J@m!Z&aOaP`P7p&YmTjn4.efa9
%V(Dd%kpb)Z)%n"G4W<&Q`5(fU26;-]W;E=ul2Hbn'(Nr%0gu/CegV7#=<L#1D"101F-kVZYec!qV"(R:ps[32(tm='k.L@CMcrRY
%lC@_*kh9FlY4`E)`_n'M\PM!hjA?eqEnMhi/TT].WMn2HOhtk#U)ugX$Go6rV0d0-8#6+AHMf]kW[l%,"Y5DtP^AkgdLA9[0)"WU
%P7/,MPX0&U:kj0CUIH2):rIJL`febYXJ70%qac=mm''InJ.q\!GK/gdUbUl8Q`,\crbr6Uqs2Lrd3L%;HuhUe=<k@mg2OT#^,lF4
%Q^Fc4PZ#ne593gFs!_cUR?BS86PT;I'eC[*DAE9kJ]+`I$Q:BbZ,o3CJ8\?Pk"dm)-RN-md/"'F`a0$ojRX\?9X[<IbGh7h4F76Y
%>g/5&Z_4;A]_XJYci-r28Sja\0k7ZH14qS7_<0FW+(-sS]WoZcVElWG^V2B+J*#A.B4mk:C,Ed&rASrp2u^9Le6]N<f>,t+e6gW&
%j6I`c_t@j[p"Ga.r7<To*Q7?@e`+JHLG!VWLECR.&=A7nWE%pR1*>7G4n-kD^Pp&ZaGX#?Y=Pg^Q:N34o!isaZ`_u(d]B(Dd44r0
%/*[)m#?<I)3`&h(%`?gi&+&qcEe!U/8R37UKi_CnH&c>,aJ,]^Pf81e3-oF<^Za^#NcXLN<*9=,4?^<@fMQ:k&(q\fUdsBZks:g.
%J(U)@cGa3+c]:]s!?IDQ&^=q=/6_+Zkt1%mAfk#<i8[4AU$W@<=eH\AGd]i@lR</@"/^BQ0^=Dp;_QVUrH.,L-^h=TLJTIj?UB**
%"/']NJKKmoN\Z[Fp'?2GkNkD0FQSE2BBG;4b%/Eh+4]u1<V%Yck<EEg#oR\)IgeD-=>A@,R;j=1O3Bc0$T=pkGK56o]OGlEPH;X8
%oiLq)[1B`j-,+J:9k>IZ>CBsg\1BU3UZ,fqQuKiXHG!<E'^&!DqB66cUbrTd)W'IFUQqi^k1#][VZ(QM&HVp1NdODQ\_OSe=@bmV
%4QQ*H^r]dOlp-+hTck%do74Ad8q=#9Gk@b"XtmWVf1^0_f+([)/(@e#WOU4H.=@b9.UO<\jP3Ei#Pkh.7l>\BP51Jo2ur-E%S`El
%hH9OGoD/7lo4)_6cl+PM36F$;W??/r9ectN?p8%Tf0_V^.)@X69dHL5W]Xn]=IL*dBN(Lf))J\!k1(5I\%r5>6;>4c2mu@h55sLR
%PnBdCiecHVg21ed@k/t]OfT3#qC$:?9LH/RTZV=;&"if9\;(@q&rrBY#hsk(3EUb^Mu@.$kG*f@:UZklWAsQu%R>[`7rG-.D'?9d
%,[7;,ZS2Q(hPp!oTI.m)I#U4V_n+I08,D9FTs48rGGZj5:"I*EN9?iLc;[<.&qCJ^210n!RKo#M'9U',5u5=F=4&+]\l.n0s68>l
%@9jHoC9Ib.Pc0XM]I"Z/"W\#.\2%'Hf1&`5El^j[=41%q7W9Q[6n!pB5cMV5V(rApKWGN)1FLh1Pfo79"OW?+/!YjI5;p,OLjno4
%.BgB*8k!H@NtEUS/stQWG6D?U[.-.(P15;5I-nn>[Ps5/\58;)GJ4%(j2@N.n<>okM3KFZ?tL\q2ZHZ2X##OalTHP!oF*^8N\XT^
%cgAe>3!bEQCi+Ri8iE`Q4srep"a6muPeUi1$9KG.-]<n[Ln33U#ma^._^A6gan)3t&:nqabOX_`V;1#6Se+ilSCQEq*[.L:">f#Y
%80'&ZaDa,c'="DuiMn"oJfA:Ke`cQ'7(elq_EOnj'&tb2n0rL#UfB$JpkN"@^_R9'K;>;Ea*,DoH\c]O5MmOeY3!b]`'Cr5F(T*D
%Qdfd`^g!j563g,.15\D@S.EVd]^pQiDt`DslgXI3b(p.Fj%35g[d>o\$RgY6QA3hIYC/&:I8,VR+(E:KLeSR4![oi2O'>3ui+:=*
%D''^KJEj+[hAp0*AG4P.ENe7e[.!^\rd`"7ma3g:GdDpCT+T.8o"4=UGl<:T3AULG,4QCO3=li;?kB2u$<PX'_J*F?kgK%E__t7h
%[RJ_=V2?_T6@05_HlO><6j23d<lNEW2p>-N#YAGp)=kXf8)3uR>[&E$GEg2I/*<`dL36PXA9'1HQ0(`#@%F$F2YWff"kt%PW:]0)
%F&:&]AX>Z==Ip'[pgj.?pXpT6Z4BUN:>F.W1#eCX""d^=pCOg>6c;,WFTY%DT&p,!#RPQp7[*$%ZB9ffWRIE6o#07[lCK]%9"8kU
%W-[BeLIu,%UtXS9m(Q$VA]]:`iktHSf]p/!&+LSMSVVW<0j!mW&CdEViuDgSq2s1Y4I\C+petqt1Vt;@5qU9ZojT;qEQrU1,<@Cs
%O,0Mb+G!irM,-R!496mW/\0#\*3G<."=R$bH;PFOQGdE9$DW&0gBYjYC-pGR,T_=K+MP,`=E>mASY=B0.7sgH<\6Zk4dB'0?:%rR
%-Y63%r1c>_n/Q9$->!<p1.i-_V=A5p":_EXVK)>2=(BX%")ptjKq\;,b#I/<1o'D^M0q4D7doi5Upj7[P^6Yg:a[\CfP!1L"4K,_
%'B?E0!m@tq=%(AdnMULOMPKRSN^S%>]asbW6(FoUYo0B%:2"$eW[=,H9JC[Ic5ft^ib!.I*Nr*d8IGM8GPjnH<Tf8UFZUKU/W%Gn
%C$Zn9.Z@U[6*-^_[(Dc:bnY7Vqn+=q<mWs4KHuhHGjI\l(kq<e3`;KT%L'`T8'98GGeHnkXQ_d4O.5*K5V0eIcOT:E^4Bm!Lg;.R
%OP%Acm9Zhgd2/W^5f]Mia-&3fZbDb+Wi5_,F=BShN5[;PgK$B!2,fj[Z"*'bH(WIR[U/dtFlLi#mB]W&JTE"S%,;6IXgASbpP!2S
%au=PQMaQ6!&1ruZSuT8P!'ETW;'GGV]E4I9I;\9\US*@0U@To`;B42n"FL@GG0WDY["i?%TXi:<qUf3bUMiRSlr8)_`gc3mk,4tq
%ZIUk%jEXJ+K/QH2HXJJhlp*,So4De)PF;Sqop*n'_DH$dZ9f)**TfH/e2r7pTk6&nPW=`*>s8//U$(f9B*rQdm@^#!RfUEB&d$H'
%Bd%"BWok`?JcOlS1-8;S6S;1Gf58\nDl71g$<4O)9VFfWUDF_##5@c`d.+<"CB!Pn;)p&qjE@S:cHGaQD*g"q9ZG`OQa[tITK3WV
%Se;jupd'u_<CS_MIuJMGjc3X\eE9c$E_,g<?m<3ZFfeIsFj*B7@s1B,'-_Pk/b/ZDdD#c?nF9JcHBbl4@8]>2)1+\[I8\4r'o!Yf
%8jWTCI[[5];6<V.Uu*]C_d(!/JS(@>i=MAN<k>f`-$GMuG!N),5pqi?6iu;1Z/$djieG'oqsc&P>W`J[.5<mI5,Z0<j1W;[<)Ee9
%:DK($ZMFV0<J=hE.qBY(loE44<7)g'UQHO\I[3Q*DMct@LgUfhZD>%+._jq*`4_5PaYDM@&pnKI:*/Nf,`/VRE1+?`!;9AN7a+iP
%?Ld.m%"QLSTZe[H;R<;;&UTc)C9E'5M,-Th&=79U6`H:#0P,0=Do@a5?7P9a"Gfa7i`Jic!8=0'?50hPDT[P50Q;O/LE6\GZ;c%d
%h)[dUe*iuYo030aJJiT4W`6GY*IJ[):L"\I<FZ+WiJ=El"N['uZ\hA[Wmk0A(L7^#8^qr8j+]bDT$g&00Vl[':m+la*MnmOCSj?q
%T/L9(HSc!pcVsRA7TGE^0,n-CGgkY+b>"6r.N;jGA._e3`M$J!ITKSSK'<Lcr83&`HXpGj7kr4!Zfeu"S2_.'E.(Q<##.RM&DkL*
%K];sc3&jIrBn1[;LT=Ync^h#':XXsAM@BJel3Eu$6ObMI<%VhS^0G;'`D[s6Mq&E<a@os<:(/.TNN&D5d'JZHpWmOs!6uaDCuICY
%?6#AZG'qajjij(A;rY>$eXl0MB2qJP$@6?u*m]iudds"sKohcZ/1EN<9Bg.pb13p2p_M5ccAnJhRV$OZC*98Q>*2+0SraopM_G=r
%5V%DX2&mJg<^LnYe+7(.had%)M1Zi4ma^LmCT=:hSsFMb!NU.c*.UX<XZZs$V2<&$daWeug;uW(O^ggBGG="#p-+E)^I1q2<B&1U
%H`L*arCrkS:/8%aXHc6.1X`57:eC]qfoE/qK>^)3C886@fdfncO,GEdT3!$<%9Ao?6TqQ#:$cf)gCd^$mk6]tf^l(u:iQ_-;8<Bn
%<#@9`&e3GV"bLpfEm4YH\4nBoEq/_gpQ,YTWl>C@E1SJ9+cRAX31<:()=<hJ:t2EP%C@=N4&H_<'U$R"$Y>?oOL#KcVs"??-p,Mn
%p2*T^N!<^q+NVPnbg)!"Wc]cYib^Y>5Z<&#P77M-;j$A#(Bc\Dos-\A[T<.2U)?J7B#s=\U&9HNCHH"F>p(./*7:Uj`F1H"j4`Y0
%>'a0oCI?pjoHXmRR+a!-Tk[]U3c%)'R<q_e2>?hW5I)@;cCb/O/!@qu.)\\*9c3:mWF8Oe)fn3k5&1`+@JGM!mPLBQm!TGlS3is:
%2sur',ROYYW#$/"3NkUpgkVXP,lfnRjC;Xf_=P.n7oKQsVI9XVL9`oGS79;_!9!&@d^#*H5D'GZj%Y_.EgQ=.\e7mV#!tDuNp__=
%p$O]>60UfbP%p1Cc35[V>q.&g0SbHJ7[h"_#p0UJn'**(ZBbRfm\`\LAXbVC3"JUD_FkZ]8F0UlLh`+QLfI"qleM@sd!B6eXUl"6
%."CO05TK-!&'\U(:FT"<g5)(;VlB8)aLK`Y.IbBs)kXsB/d;-1mHefbmHlOAD1KmWkZ:9j=?:muXR7&lG@Z'Njm!W9V8.Ogc>n$*
%$lt,NbGaq"VDO>9>&^#X*DVV*Eldo5l!l(\EHF7Dk%WT6"If1]$$nBQV1B?',kL)f4a2Q5=p#k0cC^8190c>@)nnld,H5)C3uYYo
%SgN,]4p1>:(e7)1D6e>S-;2YApX69s6"'tu4F&["m'S=@B(U&.G"a!LkU+]7VDn1iC0HucK2l]D_i$,W&9M]^)J8[a.;dHeQ$[!D
%*A#;eR[DR^)"m?maTW9OQb(BJ@aDcj0SUaLP8jVl`IXL[1qcKS]kG9kJ1q#-!Xo;/1:,Csr)4IAl8(X3T$Ycr+XHgNW1H,"7]DcT
%7,GRon,p&%"OV<HB]c,k\Jm08JtB'UZQj7*rr?!8F!:e0^=KYcfN#U_/A%1Ajrnu0gD8Fl7A,77(;/DY\XQC6%OtjPCS&02'Kb0r
%:/A"e^5$lBS*g6W]gf\c^h#JN9/$8J,U_k86GY-WjNblr/7,,BD.m&,XFM]l?US9:-pWuC$d+.W&W4:h"1kT^*j>CN^mUQ!"e+'`
%C'9+F$#hT63?YcP7lB="ah5%V=k.678C/\'Q(TVRO9#]ROBEqnQ';G"XeYWlRCY'U,=:NQ7mh>K)V]3O5_@b-m+7/3dk98h?7T,*
%&Jm*pL$0#1V>DPU**oQOV2tTac@=_=CVF:t#de(HESb8F#aj`Fc(ZZV"D7q(A3.kE4#d@73c=r&]KiaE3q/kBe1)Y`.P=UAF^*q=
%k1ZX4p7Los#.?d:q"6c;>S*sf_1UmHg,BnFWGIF^.76csc=pl8f=EBg(h`2!d#a^%D#D@[ZgErFI_)m0@):%A=#,=W0)'GD.^h[-
%MCJ@d80nsRaeW*[P00I:#-EG3"\n,eR2/T,C$O'iJ[f09k+`#r";`<m`8oLOQa1):K/53ld?Sj'ZCm!Rc<bUaeU(rn6sTDLm"NDO
%N<LX375fBhf[]Njenk4oJMTPqFd/"2QuCcnW5ar2H`+nhnQp2F(@lKoRqKO]"*]mU1]F&k<&KRHj`bY"0b0'ZAXsiO42_F^h/U$A
%[3a,Z"`t<^?bC@O7d=9(CJG@/%ahs9&8@K,O/cg$b[(:;Q0%#?e!fdm(t1*rlBk`4o&+b5D\bMU4qr-MmD<8\#63,o2a6[@JuJ$(
%(,?K'fS?\0ZM/ncV0M1Q2;>j,gXKj9k>UpZI\@Q3GIlK1X=V\p7\1G0Z^6G7X:+uVqOU:8FpoR+4&&k2[_grGW#L!&Z*i`ZlaUa=
%icB'<Ehj;'8liW^9mL_"]rNm+3BQ)I62q5SJD3P5XOTW;Pt6,Bh&QtoGRZ?(P]=sVM^.CD#7e4PPQ^!El;_HejG/dcLX)*iBJrjS
%@Us]q;rj[TV:LKTP#-@3<SnFTceA,O$JX0;a5@*(nnZ$(/.Ti.\s4bEWOBt14mP2Y5FqD+=@5"K87>OJ$.UsXcH@?AaqF[ak]#Sa
%9'P9+@uIJbG'WZ>jo&GKe)Z?:`>;l^l)M=sMG*ST.II\6?k<tWjU=3Elqk./mNcLaQG>p@)5(NOE3B#.D3qQ>-K1Mc(C)<<Jo5(2
%eN0uRM];oa_!5$rR[:S^:@X/VpG!F@X-qd@.e'F3r%]%_4Pls)em,gD\4qWV#8TqPcD>W%#,80+H0Z:r`(TU;5ZI)L"$nVqh4KB$
%j%iR*O?J_40FSM'Jq2EeqJ`e'3i%U<M1I3[rV.r/)iYK<]fiMk]M^2+NW.>M0jI=KpX2KaqkiQ2+?!Dio1g$R_^4;eEKcdFr"\*A
%&(a/86/>dUQR@)/CD4-[?_KI!31@AE"Ma^H\NbWg_dtbJ`!?Pp"/=S?:mC%he@*n^CW3\S,IB%gU)*dg/"+J9VFBFND&JiWJ3I5+
%AB1>>\KAXNQA]\GM[Y(smKJE#]X]4Vj3fA]/Co2SSsk7@-0(s>/.2ndW:Nr94-Mk=d6K'eFno^&:@XIFJ;4D>0*M%)5c!A7Y&!<U
%!NHS/b>MMPEkoRMh_%\)3jJm4nb73G2#7rC<b))Oe0_2V$^`Xk##32?bURrCB+n!Q#l8^JOY=<Ap4e>&CnZ)j`enPuL8K$.7f6l@
%$.7t0-?QH.)r/"]1FW]#6mZecFHY-)\<^_<(T.k_?n$lf3Xj/)`?Q'ST3S]CK@:M5E"07I]3X[KXkPWC7<T2\0%Jp"fL<(BY%ib&
%q:9ZZF:/bV>.Y*P&SMBY9JUac_h5&Dp9b=m9#]Z**Sb[R^-`/h\J*]RP+B_Sjds'W<VLqXOs_/khBWUu*^jRW5`B*j_Bh'*3#$;8
%]]M:fX*(cn8r/sh\Q$ci'Nl(,Y)?4FLRk-:<p;,[6k$ST[6A%XN1"c^hC+=1GYAN$'FDJ8g8.ZT+*'m18P9m9!_p28("L[SkfNAG
%32hJ=Dmfs0_Lb1Wg#HiZ#n97;UfYFMD0lG4Sa_<qR&Hb+4i+]Yp,t8jcU>apcMd])9h1LeF$$\+n;YnJ'XOKf()!i2>iP)eK12_p
%KLh>071YJIVHjsT2nBaNA>JDQ+h+Q+k4Yr"6(2D%h)b@sp=p23M60/[6eUt"W9tp*%T_%7:kW<bKumT+*TBoFmLcSd8ABO4623A/
%cAVQHKY^4I'6$"C"!D!ab&.6Ba4+oQ7`T@tQmd00iqf&G(:qs8EpYAhm^N)9SS3"R0WfXF9#C8daDaNJFNG4f'Y,Yd+'p^,"'B3D
%Y?t^B$<E,b\tD[;/MSRAO=@R!g81JTU_)>Di4`'2+j9hYn%O9QYb[*!FV_EMb4$RS1L^ZJUseb9dtF,!:%iC'^1[&aVqO)5foEo=
%M6(H5hYPlD-;P\LS)#+)L]gk[GkJ@LE,&V4&Q5l\;@A+*isqf(!T>3O*1/:aH!bP3A((l&%;5>\S3Zm'7:F^(rNnEaXo!aLp.-6\
%XP=kT(m="<%guZ^'^MilKare[<ldn<WtjAA:<=Ls*#sXmn=`+UfnQ"3oG.eC`!II:Mp0G^)5W;6<Rl0G0pU.U`.E7\ksG;3;jO-M
%V2bR,Y%)DdGNW"&1j2*-#RV`\JCIS`<D;^+P!0"Fg2.'Tr)o>^[iQ0%p7-tsF%_FKH#t+Hqt.&%Nj2_djtD,CjPCQ;\0$gX)Qh="
%hI\*'_:CU?TcrfGake(I:3dC^<!c!\@h"<N%G;**>WlUZUe(Y<[X*D$`!P6%):LJN_;qX/0*1j\2cGFq%<Wa`h%1dL*$d+lM<c[V
%Cdtua;WMW->on-h.#nU'SIsl.n4Ub>f:\sY?(*o2Wi0uM0qZ(Kk_UaPLS@3^?UMn(WZ9\W:iBD@8h!js*O8(gC=g`O@oI[c&GeS&
%G@B(]:dT_.r>JUUE1hZEA*Kmm<VLaC_QT4F^G@@F3+\.^XSKFi!j!\C^^1O!Lt6P`l][:RSc^.>,5:@0\5_]Rg14.)G,5pDF'B?Q
%ZMksN"\CZe0Mp]%S<c%i/e9sLH?)9gp@sb"pG>^\Othb/9g9A&c'JoUMhiF/C+=\"6?C[Qp<W*I*kL!'[7d!;ofZkIKRo\bEgYhN
%bC&>Fr>BitQCDb2)P#`g&oGjQV'r*(4.7hWHPU:/!@1o--F;G:;ST2$$eB-L30PS$1RV0b<u4VbM5C<=,Ydaf.RsntL90t).mjb>
%?m8W,Qu\7d&Ul)Z]dhbQ007g=!!*e5^bsjicBpr[^Gr0<;pR044Dh@8#7JmDh=:P&&UL)S,'Id/U'Wu2#,5q:.OZQ9&`YVY=+O#>
%_J7?)bG3&iW*^*^B1I!.ob"cT0I#Up1\hZ+%TbSOa]VP02=ut+HupR!)e`u%+E^H90hdi/\RsU8R>.hL*,6@*!"21BUWA_tYOAR$
%jF/e,lk.o7\G/$,e7\I0hak*\Re.d,?&#"#iH`Caa9&:CGh0`C/6s+,B2s7J=PUtCQR7Ec-]<Y,BOISJ(9:sUO8Yur6G\M1]Tqc_
%l;'EcTCOkoXoo';91d_$ILR<hc$]k8@eAlR$8&:P_ccQc9egr@1/jI%dNc/[s33G,AX5ltRd("k4M%,OpmQ+C*^$.WjqR/NIS__;
%n`tS=iB2C+Qm.23P<sise.Z(J=EnO#!3d-%$A3]Spa18eVp[$^3EWQRim`E5#4,u1h?gTF==0\__t7g2<6k?)*S<6.I6%.b$<U+'
%]M=]b=Hj`Bd6PTEM+tulOXL!emuV1*PWaEFH;a;JD`Ugq+p^@-C_;7h0I!bc2mW5R7*MR-@=W!J6<)>A`"[=VT]T.tm,:E<nK%0'
%?YDk^T#((BN_/_6la68]',%,;VQ.1bh`A;]c")P`KlWW+%AhI+R&EuGc2t9a-N/[BaL7"ZlC:Hg[N>*@MB1P"DSnKQSoqgh!``:1
%-T\hB\Im%dNQY(J'AJ):<XDJ\4F"QDM?ueUflhAVYbrnMW/Af)POm:tNPYWr$_)3um*@j#eb_Mo,ic1GB6I/FB,WU64JfsZ_o-__
%;qs7E@QVNM*gP7J\+Vlm[h?D^[Bi:J"6WEY0M^JiR(>9!I0;*J<V^a2`c:8]b"YA\4tbf7E_*:a%WTRB8!f@32g\=H&eh9+29!;.
%,n;t&p.6+3Q2$aqop9$ZHbU``H%VD!:!D%(1?=VCMJ+(e*@n%6iB*s.n;qQnF/YQ4hS\'r,[0XZKgd+#N>RklM.%HK^/Ki*[aY,.
%66I]!BSV`N(g=9%/S$/N!96;'lR/r(oj1LM[GMhJ'T.+de4YDiU=FB,pMEDtLZY.3nE/%h\I=LL#:2%>"%c;A\i<;*_58hNCXuDm
%;obl&41Qk#:oBjRm?4B"@@0^fOpt\$8`@mf9JssqVN/Lu#<fc_fnX1=IL4'VXld"3&pr4gKjGNZ\KM<,SZp9+LS>U8M$43P3H(2E
%ZJ\-.*H)08JIK7:#98;X(#L1\m$3n@05'qk'S'`eO2CFZ]?r=5W)K(9C7Lg60rDV\63c7:^KeGF"e%Kbj/&P)(Hg3iC!CckPIrIN
%N,&ZlR]4KiW_#<bgclr3/_BD$/=&I\al-b<9a:0q--FS$DY6e\,&7F@i,2V4a)MSaXlq*DF>WY.OXUGYGc''SLkDs*b%MZP$.&S1
%MYS[u1A15G^C`CJi[:<$?kfGA6CF(^ZJsX#R>YDd$D,H#rH)_OT^tca%+"L;Bn2)9Qi_DI5PIs/1m*Y?Vd(-.@HUDV\cpEu;8/()
%h.FoQa>3Y%06Gd*I3GY44:Y,.GBM4W7(KLYi84)!5aCB!8R8oOh%P-#F[Go^gP6s\%>o@Q?h)s3NEWt0+k-=:D^HY>e8#?9g!o+T
%I`rD)c=rbI-P$M<e_WU?oB:4U]],D^!^)oSd91ePYIP-W@\4>G)s=qUkkdk(#lm\rek;D^*h"P[).'`hKK1O_hR3`'&1],q,3M-k
%*?GtKNnD,+4'(q3YTF%mMCJ3Llfqb'$Fnq[*$TBU_"^=@h$-:[D\OBk3tcm4Tl_W],F7qMm@Z>WY)M$_3*ERK/pJW<=lW)&$X]]U
%ec8)YVUU0c2*?qZQ:NOI$=3N<&7ThLqV]pTPQH%W0i(Pib'1p*eHA7)La)mm>>bd"eS2rr4%d4$59VO)[8b0*0&GHiGkQS6$5uNe
%W\c;YU7=n*C*'nI462em8?)a_kfDVe9ET5A._=4J#t0aQXAeFR;SdbpWf3Nq>-t<W8`_7hJg1qd@TtOK_fa4ILf<*Q@jGSM8t>/p
%,>-jnm]<+nOQ8,KUhT0Po%PY4i9A#>r^P_7+=\*8MSrD$V7Q3!\;p03M^uRE9at-.(f(@\.XIMo/@d]g:i]c!O==^PTLkOiMAtO`
%&.Fc&>dpT=<7uPqDJ-q2B3$GH0miGG&'](Y:sqQ%!!L6a$)[CK]1;C2ft#dGTP4tNk"giTZff9,K2,IfJAk6@VgQNa"`N@aM2N/T
%?`1QCJn:RR\=NP*JuGaO,t?I7^>k!hGKiB&c)VLPaYJrLBEA`!MtpZKPr7/:%E`!Ud*"<mc."Zq-:7%-#81nmVqn.l+E=Ftm/SO$
%Ya1i[<#8#[Ar&&Y-n5IW8QE+#(#(HGeB\0g"R>41!Cf,L8]sjL3VV<CPB$Z#4]O<r0?kgKFm6U-+ZB!hjl/mc(!;Jn*[Yp9XP")'
%9#$]e_*bjJVg=X5Yi2j6LhG8sMb)-.md_(,ROScSV_tHtLjG`RN<YjZNt_qS,'\buh_#GB,N_#NM!OU[E=IF2CkBq8)J?QcBt<H=
%N3XnKV3qM4fLZG'6BY20GOLc&L')nLF!lmS-Wj$rZV$np8egb<on_U$>6kYpb[*nj2s0.aUfP+A@D$XZ"_3=(gdo+=>gUkieu>m6
%&,GYSiG_BZe>2KY#e3hf8%h?DLj4sDcdP%UHoMGfLTM?Tm<GVt&W+Zk.Z$S*lgC9G0cdPr9#f/Q-A6/^^HO(5(]YLD.<V=LM*mCM
%?PH2hXC,`-kc8R5%3rG3r0QP%SEYIN&KKDMcaW4B8iMqH)n\t+hEZ0EPG6J%TL..aANXsTCn]kUFg;WhVB)oGJZEMa`$A3o^ucsU
%HHgUA:\H=U5g<9.-ul9-=B%2LqDjD-PLa6:X3KJ<cc7h:_Q404GtXXW<.-*@;q2aP?CNKr8,@S6fFDnaVjk`n-n(75;Gf8!aT/a'
%lN#Kis-2=)"m>l!2.6ZL7=MF8FQH:2"30![<C^A&5/CgLG"C)%j=&[LXeB>^/"2PHMAOa54#)Be9m-HVCm\^&n]8iuRcZn8g)NLL
%rksJ="@<8g2>n]QSMW;ii1["jP(nc6cukj^^"G)-V0-D#6Kc'(KArt8mIeUEWC&_N,`3R,_=%^S">u0!i&O3i&2,JU(LfVMQ0I<l
%k.5!!DXTJ+8JU(;TS^?K1a,.edND#JHmLeiZ#V6X,tn=U-)%O<mS+DL/?+T'PjM.aUIl+hSUO1sm)bAHS=@_`(eZ-Y_X(b"i'Nt_
%7mKrbqqS*g(/c'$+`"N51M-G<!BQ:bW6\Efq^1;!O516-mRtbH&Lm#pYC%6oQj?dD)@&tkdhI-\N$sp16:n"5jU'PpQI;X$9$/1+
%#I9UCl:D[IoEEE-@kjge_l)&9^uLccVE-:"FpB<+=K+"fKsXQ&_N.mlmIH@m9ZT&%,!au.5s58AKakOC40?L48M]$T\Y0Qp:MQoM
%S4pm6@qjDi%^Tfn6-9@=`%q!G?ElZNg8(-PHP4n/pCNEj7]JnO]#!ELZT@n+,<E4;+CnUfMFo@c#^$^/&M#<"E_;h'O_Ro@n7$OH
%B"K!&,uZ'4V,fO;kn=8G6;m)q8jgk'o:qu/Z8>-raKd(nd(CY8*KWYq4kW7K5mCaIPCll++62+27lf`@>?MpZWumskSd:a$lleuk
%"dq>q<N@PEW04;!5>i^k(VEH8<^0K7:`3iKoUFlum7nY3;uh8\A_E[;V+I3>fp,ha2%>6fD'V^fHCT<9F[C2%WcYj49$'_k9!j$h
%>d<+A,HDueVBg#t;19<pK"9)mRRU>.*X&M-#t6gR>GEGm"5iEB`.:QPg8bupZQ3gAHaPtljf06/EH>7T"VGZppQT]AOVS['^Q)`<
%,-*M7`5l))p-utB"Hb-gTGmdmbD=,caE;]X;!L:kQkXW9]e/Y1MSdF.9IYeaf;K1a?2XhU6">mFD*mQ$`3adVFX2*$2nR$b'Hm`f
%B$GHh;r*7e2)=Lrrm8Yd(*7UB"ZFtW;71];gukE+5+$Gk=aHi&Lk7F:QpIm*&i`IV9G8Gt<d],#]pVti,]nmKeSQsa(YDiD>jRfj
%i'&MLn.*MEmZ<PfegT=`('d\@F&Xk-2DK`+j;l.68k5u8%R1!E>J*ca_>4I1h#pPfOVKl57F(>EM,\$(&Y(H0;(O2HZK"j@.F@8k
%$fiRs6UBh>64<n[A&WZTSFhBN/_Ab1j.qsDNc%&Pd^?4(faq&XVKM4#D+&"]AQEj_jX>SUM<tQNm`V/Q\-VbRc$)i_#D.eIs6X+Z
%":mq70@&#^V$<Za-5#_,dW'7np2\fa4OGljg%-+"1hEgT;0*X(<:R'Cm[QskACu`lA#Tnb'*eTb.Q5maE%*?`@j#<4AQ)89QqetL
%)[9/W!/O3qMrHa0YaAu%XdBT,89a)*<obX:i=IR>^:`j2"VI@o'HUR$mPir2&i]6hmkt5HeFFm1=8#X-*gqYR:6]Ok4)^ciTG*fY
%HXujT/m,l94=kX@/bLnh=F&^u!3Q[0M3D;[bWAZ%9h@;WFD_WGm3`3(&kBs!m;O<Ek/(P(ghmrjNOBY>Q;-eXX0W^@g<XkP:g@Gp
%1N%TOD9K`U>Gel9!&Bs\%Rje-.&j54m""KU<QUGQ,OQH<]f$*><lWJPb?ZMj3TG;:KI(R*>]%:17!*73)koI:&-WP2CF&aM7X9"c
%k)em?B(@daa<\go5s_1HnfQ3i4WdHp.rN3)mBV\NrnoD=qP6eJ9nt+sd1k;\H(GN=J%-o$!nIEX3Fk4iWLhNY.7]d%i<`0i`X1IP
%'I`<P7IdWBWS1l%Sl$\9%!h0t<>#H&Xf,2%e^O5\hPcHp!ts`&hd'h&EKqAf\5)$7%_j'iKNl4>JFUM\P2TDik.(`AjD'Ugetnt.
%L8dIW:Pb/0F9UIhd)/<H`td>@]Uq>IK7QjmW$X%+F#%-YKX$W&&53-q:7-@YJ=98KaJX<O#>IbJ;;d_8GN478ZWP9W=>LtQPoZ\&
%=PssYHl7"?jn]fscV"T)g6CfD_V!/?B9at/)'R#bf]2/o8t"<dG*!!b<8?)5U,nJQf0'X++n3SO4nY"2BoPe#1KMPuWH`/kN;\dd
%:X2EWYXl?1:>>P#'+%D4&dYJ0gMn/<%:dA#LdTC_!3O\]"A>9IFa;&7kIM$sX&V;]]l_=>4F)#ON!.]:'F1b]F`8ZI>cIoRN%t3$
%XDHZ,gL57+&qP?/WGO)uX5`.,9>4-c3>H';..]=EU:F"Q_uVmY0j\?0B%Q,#j%)oi?kH3<J-3dWUq0_#*JkPqhf6K[&a'(Pk>Wip
%%9B`>TmQ3la#\cj&O-*&k>\Bd%9T4O"8Wm6N#kS.C-n!)l6G1+Ws9ct2:j!Ga4gmLd?UQ+`+6VgJQ808FbW!rC"8lDr7"k&I`2e-
%f[!jdd--`7/r2h";PbVR<cHH'IEcuWP<I>1Lf\lcMU'"P#RmA3m=e2D`<_#X#[+0#dp7q)F0TYs,q9-*@Sd[EKfjaGhNLf*G6^fs
%`p$&qJZEMN6Sj&m;36F1.i2+5CeXseQh%N.?)lZf!qtO$Ys.Z8O`_F]_84i(C:h_L'XB8"H&c;>DM?Jq:#;$P%p1JOG/EsFdl7ab
%&#>&>N7i8Jm8<7J+Si6qD/tYqH8MP:eQQ-U)ab2sp6t;<rWU)iYCY#p]*QK>,H;4fe8Y5G&?H.!BSo.0KLcG'0"m>_O,fe..i3/=
%"8/icCQo9e;*Z%G;(D,[f9$Y)Goe5jrp8S2.<m[j8E)AuH:f3>1+>I6T6c5OaaZ?;-s>fB_+G@d@LZ0W5#BU]l@foUrcH5(8:qun
%!3VX#$]=L$4,s_Tc3BY);j^s!2"^ri8u\7q$Z>BRc\<U@'8HS+ae]$*55J7#S$Q]g`+`O;('sWGF'Wu40_5CN$=eDrllsb'!9BVq
%<`#>-c4<!VlF8a[a4Z*IH>`l2#frHNMc[p#\.4.#Ec5O)A@%3A^thl=!s:ROhW3RoUmk\4G*D=(3PiUJJ\+qIi'?@7&>t5\68:@a
%`etG;#^7f5,8E4SM1I5,Mos.%/kO=3m&9;35qH>B\P?@tnr$(d=gCD4Fdg22$71h"5B<#<XiW&aH-1(OBP.j^!1BquT`jb/)CLpR
%4+i_ae6O1T7K'a7s0r?>1C8WEdfSr%BEILTL%%oHTaHl=dkN2-=+)^>ksC`5)m&7aOTgQE=!b1alPrb7GZ#2RmhX8al8&dm:/_bh
%dX*OiNfLm63(@J!_bd:Zh&7Vc5EfsgTN:9b!Po4cm7;r%]:BfdmuAlrZVdnm5!L3#U%=C[!C\V%@JCF3>&t_'H.BS]deieo,YdsM
%Z+98Q,E;eI]3i!Z'hRd0T)n`KenamP%"WC.%=.!7JF1^u]E0e=2:GEPesPahF.W9GSNNSKA^QWd<0G74^)"bX3;6$$j[01T'n)6E
%CrR#Q'F9uh"/U(S''#js@QFiL4E3(=9%)0XYrYG,j5QWap(5)P^$L-8<1=0-")R^O$Pe7AU"p9k<YWn/:)m@AV/XCp=-KB,R3:;3
%%dR[rHD\?"ffP[7*YdOm\c2;;"'S3.dpR&&0+L8OBmHB]2Qo=gl3F#5A[pk`V!66*==mJ8jo]0==h?9sO<op7EijsHjaD3pDM_iX
%#\^a^m1/AmO?f-9p-H!(:iJHWd`5:`UXH1jqZ;JT9:pm:]r/4E?+PqdLCkn>#eP.CE4Ejr6:'amI7JlX&9\4;OJr=\6;aW%Rd[2.
%RiLmiA4J)`nX;D-5e8H;C(Dq-lk52tb,BQ[Ki9:+EJm%N(#2KL*=C"VI>6Z/S)r-MndZLsC;oDk*N]+u79.h`.d8+'1&e^b_l@T@
%./pc8Q5lY7)lK=b.T@\"b\.<tLrpSam\=P8e$3@A`hRkEPHqmuGR3+PDFf*AQ<^O:Fr7Zs>u_sZh^fdQZdV#QEV;p/"KqgpP,B&0
%0c\F=E6(el]6WF:UU#.+n]\[O[<gUD[.^er.=ps=lCjM=.nRY*cTg+"<Vf6dDhn76ZQ^DDpUeq7fC^W2J@)D<f)][n8b*#;HI@Gg
%5]P8t*B1a^i^3.Cpn=C%i8X4//FaIm*B8f*Pd]u88B;-4[q/o\SUo^qUDcOBI#8D;JH_HgXY#(Y34^fEK'FGYB:%33OM*0)>nC<t
%JZf7HJ*@'`4G:teB'L,*oB[B\>f[t0</icN!@.6212I1?-D-3J-o/CBL]`)h=Krgc%Xr:#3Rpa3n]LXBI2'ZOM[cq3&s+Q$C;1F^
%$pHaDmQC0BXZ!ucRf%?ZHXG_FnhrcaL3r%6C=FB=,p*ROJnCkT\h6&4V/*E+g,dgN\JNp,[:TnQLfE4iPH-b&as#Cq_<L85_2@8,
%$F3/8=]fPRQs05fNP2pQWC-N]Q_B1Tlfe3U1r1puJmQSUZTFH_$'(KG0nN@_#Q+e?6Z?76q*R=a7D0"@erk1'ESM_7Ko>F,kBH1S
%:!p<)"QgB,1e5lo?M4X0pC@U$+`172#7*ioped/N3sJ2tM7H0#cRtJ;C(hl.OU`hFF;Te/W)=]-<jHegP9?o/5TM-+e'8-sjrqVs
%+O+um`gLi,8/jFb;2oOu3Wr#NC<=SnfZ2L(2JfCMn5G\n#2hpoXa?$r&GUuR2%h/7$<luTiQ'#e+?O'O#V"0e:C6F]UQdeo-!.%)
%7+\]-j2R5HiGg3k;3^j6H\rai"M)\EaC#adp^JsH=1=KoQ7b+V=(B:3m4iMu-1)C-$lg>T%eqB[B;$;S#M[0t6_2ZD$e)[<4[lo'
%rGfo^92X4s8W^Z-?`+SeB!n)%fq(:7KegY)T9sZ+/%/5Hl]$(0d!%bY+98!B7g'TZ*lk#cJ##89fse*S@J<O(S$)%Uo;"N9l)5]/
%3Ga[9L<dMF]\JC9O'D@f!/@LW*qF0JMQN*W.^XC(q2jVJUcTjoV&WqH'+1XU86[X0l4,b#,H"I)oPs.CjbnCT=#=0WR=mEF6l+<^
%WRQj=A/,t(n/J91nl)!3DGs%r^s.b+5O8Ae.l$Un9Dpb!aH<%72't]9;pg9u`,.4ZR_Nj$.$!`TB\Y+m6]T-T)fg2b%ZWfL5'$I!
%L>Dqf1+B\R&l.sr[t%_TGK2GbV[AM<&qYcTKaG1I8.FJce4h%UlcW8HC;_9op[D;dWGLQZ4Q3n?&$o/eVKU5re^X<JdEg>3QQ5r6
%mSS(W_+@"SS*abm$Hca#!"Qa&fgS3SYt<KP_d,i!b"Z"5-X=g+,V2F-jIt71o,XUo;qrOn/Pqg2k/\[>W[2mQ;jmi2n(e"F*4m=9
%[1sV?Y`(_<?'S3=r+KhKL;)S@i0$K#2p3&:)>%(S7`2U0,s&\bJgN?m=b0`PM/Z"g=H4Qhi-\rLZ(n<i=5"==_KF48mX8rH8(ap<
%j115A.e#eFhCM20gc\QpX%L$nVibtC/kjh>a!&MTk<(!C@FJ22KP!FlV6ll[79Ogkh;a[QX8djjW:$[*$T1i3q'_CWB\Pq=K@;sH
%r,YiA".!5SWT.J"gDM5&8f)LG'2Ib/OU=sPI0jo#>q!k8-eX"hq`IF7VF-RsX7gB'9+7F;OLJ]P,ln:5?%N<k\3WM[R67Gr37`D3
%8(GSBqCn4PA6p!TEo`Lf26WH#Kqo;L78oE-js`MtF9aqd3CKkFT&%&M$)5q@'m2j1ZOZ?Nk$dBc.<\ejWo2;`_(X1?8U15dfNYAB
%D^e0(<-,P.3"EV3^#FiqId0e=;D]^dOhPlA6Ck!*E7;7!6"m-/FAeUk!=51-k8K4I<G_GGK7]D(IC\@I4+.9**.uiC8.ZnkApX;N
%$JXs?WOG-_Q09%)kpob*s-6nU+CnZWAh$9X9K7IjI&U=$=7&A@/dYNc!<IaJ<TCb3-d$<k+dgp2GJMm3_DfEl%2VJe[m#N(qD&hN
%0+P;T4,*H&:^.Gkb5^(@]0*KGH.jOb;$VUO'7%FsF.r_35@r=eNe<_5fjg1uVbGC2G;Ja[=g6(<g_ZDg,o(g,V)>F*dX(T>;ncah
%B#dK2<%I2N)ZV8/Xb]*V>W[.3j?1gk'XP?Y0')*<HIY^#(C1:j))!P+3AP^\cV//1n7JW4FlQE7?(Mi01(e%qHJ@-(OlRAdFc1rF
%lP0hC/)L4r6GLP1JuE)g,$S8Wf`FTr>e(NtO*nofLk</uHaf*i1M+BSa(,t7`@ZEdSH9AV&@\FrLp2e]+6eA6pZnb26E2MqMnZ'"
%3$%SU@Z[=\>UmIVqZQt@(Vo/>Ajm"Hc$f,8D2=n;W)DO8GoH$J\!aOBc\O><C-3Iu>72uD.LltlG"IK5OfUlZh6BpMD:4c;(XWcU
%X=ch#XljPYL.]Rd:/,K3dV7*=W'i+d0b[a*';>ur(!e&Glt0BIWM6jHR!LU\6kGO;0VSH.\s.gGe8(M,YHRLTJ7Y$Xcsi_=7Le[I
%.aU`4aMJedhk.+m-Xud;CMq6nFPZS1%SPtQNH2Z%Vh,)b</;uH3(U3Rf]nt\*A^72&cf[Hq?/Lt,c),L.>e<207Udd7A5LCIc\dR
%^A&.*OOhc1(e1Z:PAkGjN+NI*6->b*YQu]8nj5#ZN$(Ha/H_8R?(nA\T"?7@<VDtq@e*/fo&d*LNJ+K/K+FIp8W@P6`KE>Y?R14U
%]l\$6iI`3(=sG<>!'`(!4*ScL(j7q%`Q+T*Y<D39MQ)G9;i#MfW-VA;*UZ'#,[V0`Be<)LnM]oa`dZ%P%Ljo@;O+`6e%?rLc-f&&
%6:6q;&+#-c<3#e0l5O<in?SK?Q+1,jS]1h^[kFV-lNJ!/7/a:\C+]X,,cs(M8O?3.3DlK+UKus-1$^!#HY:F4n4#%D<s:l$cS4YZ
%q'8OpW"OII.>4[90cdB/a#K+DaaRf$7_:`XBN_JOjhqi3`AY-d<K&:tWHT"SKnHl<TQPHVP,iA=l]J/@WmM>$i.bF?m.uABBV;2`
%:`2V=P=8K2-[qER+c/?f;9+%8Vc)0qZ"eH\VP@*WWJC^H%i0,$HmgI's6LTC5!(N@-U6tI$iik.Y@2s[2L=QCTiDCP3;7b-2YH_)
%7YhEPB/9[e0.X;L.B4,P5tDAMW;"j`/"U#^D@D3jFPLFdZEq])n7:pYJ]'3R\_cmj#H*U3n0rDEl#ZX*akrQ;/il!^Hfu9pZXXu1
%,X%20]!MI#3"/J.p2kJ6l7A[45]4U,6(,0P[dBlL9d!N)Ju-CtD:rHTbusZ)X#;:pRSf31pK^<T7Sq0N12e\-'1n:!ckB*(m'^(q
%M9;PUV0;-p-MImV5Q2`7C@=jK)i)UoAQSYKp8-dqBqc*o75^=bgaD.dFq@_IX6_fI^M<8gI&j(*=ogi^*OP)akKk74&@,qpGdcHP
%b:X'9R!(K7:)5KD[I_r78@`9,Sq`D-oiBV!H^hm;;E*:H[MMVHaJ5mQg26bjcm6`*<0++?G!Y2L+s^=)[lAsF9j#*0o@ADfdPk<*
%5S3Q/;%uj+N@RW'4*I8GD-HboG1s_uc@7Ujn\ZBQm#p;!N088jRmXHJRZF'D,n.=0l=HY^@G?c?kt)Upa5-2Nh35/<'GVoF=*i3O
%EN``S4PR#?eUlh;RsjVTm1RH\_X2'(-GOP^bKUhb+l_6J.W_>ZE7b4`ZWsQX%_Bf<i-gN8K3>98NZm@p+O9>a!#cHLQ*`;<`9\Fu
%[/!h[Rkbt38YD`-&!)#g8BM8Gd7[DH:l:DQ4fEAAZ-/iLjGBhAB:.KLkR(qu6nLeiGq>rj;g3_2mYY,AfCs9/T"=SkU\>f;rVd!/
%C(h<4:0osSK]S;kkG7gaYo=KS=aMM_Idc1$`rBAtg[n[pCtW"jP3P8BV^+O]7s<MpgJ(3k'%3)=_7eXY6:Z<^$7)na<>?YU4mRC5
%N*'laQ&+":F.VJ6@65G`5K4[Q30``.&DYXBTOWP#>eMbA?pl%,+n<mL[8$N92>lq'eLVuI,THH5$Zk6Fjl;h'C2L>618+RZj<2Jl
%`-ErJ"0&Ca<Bt@i<gQsA_q$MoF*2^KJ*m,pR>>-:LL^[?0c0kW8Q4%*:=N6M7g$1)cN_n9M'Q9^P7Ol.,6SqY/j\ADr0'S[dM_g*
%+@Q%QgOM-l#hbY-jc<=`i\<9*[D4^#@RTS`CV'1l>N^O0)9E<o*+TYdfT$*\'<i0ITlqZ3:YO>lr:)]'GTKpoa3po?B!h*YPDCoN
%RtO0k9T>G\W\_UP19utJJ!TP9(E%)rq/bXG/^CNGil'An)mJIE/LdD'#s=hM:\uqV9h@Zlq*K9=S,8XCe#jH$/W`J,qA*`Z,"\qJ
%%0#@r7LG$K5G-H[J2IjaCEO3=-]WJfMPS,`_Z<o')rP_I<J"k_hUcr6i*q`u:kc#9LV-eiq[\$t`4B'$g4-bp2dT,fK"kZ$olZ\*
%&Me#q6r`3B39Z\R/(*N)17-D7fuQX\>Mfu7i9LNp:HmuA+oAPA[NBDiNlTP!\jqWo&'Uo%PJluIYith+gu'p>[`9l2GH6l$A9IZ)
%8C&DIKJ![&&e'[mce/Z^L)[J/_Kl@8D&'SEDR6:ubbXCHY6rN\.^:fdfb?_El)r^rKnrm\0Zh(0B86uap8r]]Y]_aQ@KKe4,/q[I
%PjR0$:h(brR&8@Z&[@;K5ne8]MW:L^A=UjHiab1k.(7/ANPg%6GA(gML9-fE96O_T(jjc(\-m)5oXYgBKtDQpr7ITIo*0Eu@6K""
%#]CpQ-ij!P[5"&lBQ[4fNEEB=r[mgdTRACd/G'V_lsfEE;cnBkKZ+qGKPlI@[$60jFUUtT9^YY2^+Gg+:QeD?:gtOD5%)WfF8V=5
%D>'p15*0[8G4<W%)A@G+2%&m+o_@!N)(->=Ed+(C4Q\B"-#Y?8cJ*kZ*a<sLeW`U9M)I'^%JmBRf:\$qD][@)1[Z&29dZU;ia+6A
%ouB4M1UFPZH,r_++Sa]I2%_qtmsquJI5A#YZ>m3RVU6Ze*b^]%2!%&h\sSr+r%2&`J_&<3ZNoGLi7i0[eJ+q^Z.IYiR\E4q:2_gX
%"cM=k.KH?gmp1BDgP9,+DLsgU-*`A]^:%ClAZS17e[GS"4-?'aB[D)t&n'g@#th=bjs&nU!I*9crTEOgYAF<#NXuY00To>^dk/6K
%G6o$`qsU;?Vm8gEKZ<aB![diYLG,R&n3E0qh:4kdg<`]F\AuRXHmD2/"rJ*V"3S\Ak\d1TR`MlW*e_!7CEbl)R:kd@MC`:R/]+I5
%5b7!DM#q075:3nImD[0NZ/.J+p?Dba5Y-4Dp>JqmUqF4H&][;>0,A/OCJ9BjYr)WCEXpi)/IJdap)90meLS_V_H&Mi@)Pe`0L7'C
%D(n,76DZHp7]_Fd"dn;E9RgH>^&FN-_;FbuoK?D-(@!!L_XJP/$baZq%[O33"T3\kQul%flh,\A9OieFJImrj^I,iMass\$`p1kA
%=o-bnMUqGL,Ir]M"P+]/2=B3;ZL`Wa"k)+_q//N,hhE/X\KaQRNnBp>V?:F]2$)]]:`%O"U+]:0]Csto"[#$_iesjS&#3:i<H]?k
%DP/XrC'n!:W;D"q0qBOEA3btdY]MqU4!I9L,i^\lmsEFOa(0^H">M_Egu=1b[[3+'Q8LX46Ro\!BUoa<bjPBmC<_LE&RlpLn<KEd
%+g#Yb)a;%aX,,!?X1)R_Ps>+*9sk605KC+h@pQZqd=R(S1SfK)fWXg/lBi#PW]QbBQG6]cCK+m3=fTJihQb<<(9BloZVmQ-;kZQm
%3SH;2D2HZc4"SgI0o5hdqlhpu)8_Fk/I^Sdet&5ra;WUoXM-aL=mGB?L'e95>lplS>ALTBO[VNucjcHg,U5iPn36!%b8$,Hq#;jq
%+0/fT:N\6F2,;cK_<mf>4E?sYQJRcj.YMeE8N*;!:+D#Rbj=GiG\gRPUXj6,$%C[[>s(`oo;']"no;1BlfeLa<,Zh5C!o3uo.'Bd
%KobBb)>r>m5TUd'otdtWM1$Ic9]X@iFs$7qS]D[>(gTTGg8qT`JoJHQn+[dpb,"f*<s4$A!_[)F_f;l9\3YCJ,N&5-CEiHs*&ac\
%T!E_3D4?nSJ]3MehnLaPfsS7'lIPob/n1-e=`alcjZ6P0I\:]#DS*2&3rLttR)p(!+6"":)W#gE=hsYOiSJc5THpf-_po]AGMk3!
%Z41HM)47;YD0+UHo/?NTkn/7]F\LpgQ\WK`7I>2`+>'.$KCFR)V*(h;#ae]H"oXo)C[4oo6t`fs.*dc"%F!c#m>9k]GosC?!uMBV
%+5Y(^L2ND2G6((B$7&E1#bu2[.uY#cAk8Q]#-bn7_eN8k8-EU9,2#;,VWq-f:Zm/URSC/&>96qD[cmXN"d4>^_Z-^7$:l%"^2bT?
%Aj821@t.oKVf=l<]PMR5f-,jc+D*mrLE-n\:DD#8Hl?dH!>4)E&_h>f_uZ#0p(Du]0;aAE\8ZI4ZoT598f\JKf]%r\V$/DJ$bR!R
%P9Ho6+FM\Ac*JRX!1HB4Q9Kg0k6Qm5QE7?Y3)6ffJJ)_j8`@okk$HR=kKQ7cVGfc"KR`'"gbBoD`qX*Okr>:cGXL&t>p:CAclbSZ
%WrbVmJVO>u_Y[K96O':l09!OJ$l`_@(bRmohaSWm\WS335=g+ucAj&uShG(K[T?VbHMWqnl4LM#p\+(M^PmOO7`%!OZ>Z>_NncPu
%(pOe]L\G5t6Dg\os)=I=edSLXRdD]?DOK4h\TJA;ht<rI<o."5/NB@'-kcOA_D11_](\&8.k1'RDWX;Q6SR;EKUP1(Cd)l+#sJ#Y
%D164r%ZKZs4SKKNaHLk7M>WjHlgY\1q!>rhTP&7+hhJ17S7,lX]0MIL/L'GZJaL94r2Ipf9*4``C?NZ@aD#MWN06S0['2^gJ)8^Q
%K#'e+gOM/B,DS@cV<A)0B(AQeH.[m[C(I`T[L;j)S5r]^-_;VGH$[?u+NP6n^aX9@Q/7b7!GdtIg:+9EQ=s@#-HRJ#o$\X06]V[_
%3gAVjG!B:`9Qg5.oi9UL&7"NujBL`#3/bfZ1<B2ea18QfVed>iebBQ1T/EpEa[n7U@fI_FE1c.r>11D76V8Yg1"m!eOU;CB/Gll1
%>/ePW2X#B@=-:NgDR.7IL#sIVYq]qRM2?/$*QWBRCKFa*@tpOh8E[*1'bMgRN/c\)O29,opHci1H<rJfs&LEo5ZkP/maCco5b*GI
%[!Od2(9TMR-'M%LZ<%\r:g1!Ob.:3+cdIL`B.#qC2X'bSh"\@Se[B6)6^f<+n%/9-^71"#cpBk8\7En,YL7Dqg_1O,#>%X3g.luB
%fdqc<&_u-62&S[%-@P-fh,<gR[T#Ood:RaQZdl="SPscrMhO7.3HWfk\$cR;L73o=OA$9kpE2/9+*5Z&MBf>jSSM\<L*M+4Ak6P&
%:Mk7^i<`dY^q*^HV/[>iW3]qHBT5@IeC.ZRAbUc2'c+QF3lj"L$*r6bS`>Nh0L!\"SWr-Hgm_it<PccPN>'0!:1;[8Bl#.#5cHZH
%d?d>uI5@;&(f#H!EUXiFHK;6s.=n6CppBZ*"mjU"*[BQK0O+.ED6Ne*c)iB8.>#Wd5[U$1AB4u5I!clP&=&>Y\YTo0M\V)2GK`jL
%D(X+gobPQSNJTCei%SA&)\Lh^aGJDZ1n7B,!rrTkRM+60L9"I]9.ZERI^Pu9ktRH!NpLP$q<V0,$n=k>Z#*)Q!G%$^q9c$e#L@op
%r[9hZY9O,TI=<-?Nh@mb&e`K,]g.^Z=A\-Y>N/RcG40L1-^;,+%^aRb`j8WqR--@u"RitdS"pt`;#3B8oF1HDVRCh\Y0FUaK>TR3
%NkH,\>_'fZE0n??I'"XP/bSm^BG7QU*u#R*D(T)Z[h1D.`/*ZY54]ER&1FQR?>nk&RsSt8@^Kei>@`8cQS*pC1nnR4<Co2VV4!.U
%Nm_k+eKjk84]2NUNJ]4\;DhTi]@0X!EVMOA`Sqrc46=jUKd?%iPtZag>^O8VelaFK]a\*8(u0alO4'D4$:-:3\9VUV&u6_\6$7B&
%>ufSgM)6R^B<QL:0$a9JZ?og>2m),R%9Kl\4SL)]OS`$kr&WtafI7/P8iC'Q7^eT7iM@T"fM=$dEF"^lnGK+*a76CdZ,&Wq=;]qM
%)i_4MO^\@,+GmZ8D&p(T;./_:mZUtFc+B*rL&cCtV!djCD./W%DWiQd!F-`(7i[MqZk>5N)<5rbF`0buY"?#*P%@-cE6E=%T'%ee
%niL!4@Zs:nS,/$[W%COVN-k.Sid;q_QY#mu#Ci>$j[YCNCYX),dMreD2E+u-lf.c`G(u.S/3\S?`=mNK8aj;$3$3r-1uO.L4'NQC
%&YQ>5/MFO7LGi")js@.lIM"o3f'J/2(`bW*T:G`<`aJl&Nens.)t7pM;WB*[R\dC7Mil^2)X@EchKjb%G$r50pR'ch5r1Wn_j5<l
%q_@oe92'f^DSq;.IDC.MG@i-VWu,lcEraUjloLcm/D#NM)ncbK/EGes-JSV@hi@'^Yc`/qJl%C>7(`t2BAAZ!?SH]A6'RL,gH*EA
%[mIP(M6m!Sl(uF8YO4=Eb32Q&:AN^),uYnX&p3.JTI=Kf%9Kl<_u@$bX;FF=XYM%c/uG:NhLZnTS%:LjaX^!;?IZN$)AZk,#>B5?
%[tFVIg]$5M]YSP"pM@/?E>3d]ZL&W/XTT(,im-H4@o?C#76qHD^>sOD8VJZ=&_kt?ZJU=;WW)d3`5-=(M-&W/l87RlNSjoE6<."J
%m%mstMs4qc,0Gio3)F^7!WnC<&hIu2'$[J3E/0>2D8>=]!KmY[G7Zn.?L2gjScZZ+-kDbY9k'DRF0lbuKW&KTGc[,1ZI'?r`\iin
%`?en!GT6/J@Q"B6TVe,1`de(1"dKnq@N&Yo65!40GYNgk=qH+`&#k'nN*mGjbZ:#9;N92)h?KKWMb>,@pAAZ*D?5['7>O$tMlNWu
%\W=RqOT&&[3slMYpVC@;P7\)e=nu++59s&(52q+AV6IIfs"+`9.o9[Y8quo[(%@USGhKd6Pge/D5r4Y@(O$2'IDl;dWX-E_8:44D
%cTdB`3BTW^[Lp]m>Frp=cHd&jW[=l+-#aTu.Ofpe#NmAJkkj(gc,C-^g87)>`3/Z19E*me`;)g,"=Y,r7M-2Ub0PmHbr3,+N/?qT
%ll-&n.S.^\.q"C*q]lr\VH!!^YW,uIl-DSQpK;1QJ=C6qg"+5aou]1/Jr8-!aBs.PP)u[=?=F-V_B<n;g[Kt&*1Ja7GaERg'i.$n
%0]8IVO&*`e,P`4=?-6C,/W2[]:ap>S_/I3,!)@A4ZguGcBp%aTQ@lq(WBP\Fk<7,6YN*lA#k6NC"^0umO/lb47?N@Yma5AB.Xi:^
%Z4-<5ZtMPSBp<="<Ic36D.=Jka/`/=:=C1T<>$7lTTP8Gj%2Rf?DPhBUJW=Ecip@;or<0DRqe(/K9<K,k3EjV=B':s"tUklW!<6J
%NVo<khN:c'GYFEd6js)shG70cMHc`o<>d;mmV<>%O]l;::gTtPWF?_Te(][9OY]7$]'.q#Ca[N-7Pf-$`b>HCj\cDg&nC6]n%>J^
%)Bm#S:s;4XN/S"[D\0jc</*p92I9*f92d9SDmK119oriAY!?a10l#kS&@CjWf/eMl]-6L\+"9MICD2Sbl%CMD.dBS(IY7[oD8;$E
%9=Tu<cGH1neRqGuUO?4#Y>pseGB'kahN^@2_6\5XA7br78maE$2_n[>h7'4Dr;2!h?$AdqLLm5oJ]&lILJUFI[WU<K:H/N6MFZW&
%V/X$2QZYdo(_)g6Wi@@S$+gu'b753@gSf8Ih8+)XB6SJUZYe*9I,=+?9`!e"IY)am6'Oh*>ilOBY@F@rd^FO,>`oB`0j4cX;s%r8
%R>4?eCG1G1jC)_qoF[_GEk]^[*J)-QZ9!mMA%2"+/.'eDYLlqYB9di=o.km3NE=Tml/nYdG\u^:'BRGXg5hK:5.0M>_eD.;k'I46
%&[n48kWN3]Zmi%1!@\`E9aoGq]o>"X@gZ#-,J9$&=;j[Ur2pi'^i#e>)1:8<f1JKPfrQhB)f@hdd4,h\BmHqt>X$[+"-+WVm_PKT
%rO[#@p38nG0IWi^6p76>3-b)Mo$!H[:YX`5VkTSZpi`G5TGE<c!dH//9otCKO#c>hSQRs`3B2MXe<X>OKj=lH5.11q6(RLi/2P[j
%j]QVY^@/sQRuT$0lW'1$m*g_0PkU7-6]R">M%^A115:Tn-km0+s3e(fS79u`9#KMEp2Tf(Q>RRs]i<cU8<G&0\;r=^^OEg+3]<5/
%KQJ@J8VLD]9^]>jnMZ5-Q&6%OF![t^9gQc=<KBX!I8M)[73(!l4g^rEkVO4#4OU])T)]CUmg`@Te%c+eC)&S7LZg/>CPsK$f[8>F
%ji:?8,V@(0//_`)Pg*@:EE0b"DEItSq`=#@ee]t[O$U)&hj3C88A/GO>*btqmq(tqmbu@a9W;CX29A)f$tVLm5noESXJ^j=`5eF]
%g&$lk-..1e&2Z1D#:/7R]l5BXO5>c#&Bd1;bM&RgfRq!@)=aCYNmTFQ[IJsRNCB#F;iAken"\1'0X%gJ\7GO$a.b[2JKN0!mO@,3
%OXaol]iSa2OE\Hth#a48:]@RtR_%f"Z1a@`F8bVe@SNXg8a9-a/\6Y99]<<p,#W(0[FZoNUfR==ikCa9U42t5U4^aK!7Ghe7[&JT
%%]m,OCEe,TV;\'r:al1^[t"DdS\h;TE-kRp;)cT=g@"J"_XK9+>`R(Xq&%17Tj*TV(P<">mfO&a^_S(m=Kp*3"P-Vi-hLG@OW]/o
%3+2sVRpDB7Nm^RR1!<Uq1:#[.a>Mk+8O1A7&=ZdXmt2)M`=YpaV[?V--Qk?#O=gFmWIXN#=f5J6c5-sC6a$LP]X8J`!G3mkBoIpA
%9)63<Y6@'"8\"M7a*d;kkHL?lVYG-(`1bP;4WN208@AN=i$FQtjYPNu+gpg0D5FVQg*%lr=_XV6WO]*jZ3o3/)gBM]`Y,#WV7t+0
%FlJ86<h_=F#;A/iC3gPF=BH1C8WUVYS@>ZAY[+JjG68HP7tb(Kag:nJ;@$WbI0*)Qm=<`j[B$12L*F!GUi)s'\g2+pJ_sH1&g3e*
%14l$#LQPgWB,^Gn]u1LDNDs"@'71gF^f1nL"?]H-Tb[Q=CQW+Y,&O:3JmDCPWUEW+;W+G(m[I?+2LJL?>>@-`BnXa6M,P;2:6G9j
%a'l3oW!1A?1j?]UFK1b`U\?fXD5&L_IogBH!n`%T5/&[jUXq1<3ScT?T0f&/?(+m$R_B:nk-EKc7\j&Fs.Dl%EZZCOe2mk_BO<d'
%?hNp7!ZI6hi`5C=:1[YF;n7p>E.URoFu4ND8;t9D3Y$!@-$gsqf>,H5B(Sqcd%#@en<d%k3pn%(N6`UUh;E8VV_c6YGWD0<mn4c]
%B.<e(gs=`B@k(]-f8oMPSdiJi"=R(=i=+SNq-0cZIIr(17Nkan<-`qYBfrj[b0@+0.D1^SjP8Y5*2qOPXWSWfUuK2n,23VdVu,^]
%XceW-NoD+FZ3&<Xb%l))PH%Y$i9Yc(%%MIUCU"/DGTV*:S*uSVA=Pj8_HEK;>[`H%g1UTPq33%Q*IJN.09"-Od0G)di+CUL\g!aj
%2""bB(rTt&qlo,Flk)>GF=:3.:7*?S2-=9]G^S(3i$5#AB.kOW4jG%S$^\X:"?>F1FnIIlZBFeL_:)t-,K&9Gj7+*X@XSquf>ke3
%c<4fQ5G(ms4,+UME]pVqQ,8`4p!M!lf?LN-b-krT&nC78hV4+c;+JOZRE;_o:OKE,9DF[L?.<IR-cnr>OXBFp6&D@'qiCpU*^+RM
%GpkX/kq$3FWB_;o&KeZH3N@+$&enU)c8[`orYl&5ZohmJbWTu*VqgJ>]n?)O!_dimV[S+/<Y%%doL4s;G6kgnhZk/4k"(JU[7f_b
%<f3&N^$_:[?P=DrA<d@+VF"R39l/Ff>D`YQp(G/VR]ulc*H$+G!;5fUNh3Mm%.F;=TCY-[_-Tp%0grF](`lF>N$ZsHR?fX#-p$u#
%'iHpT7:jte?kd)s/>@^Q`uSgT&OK;h65S;C*5[lqYXP'p\J.:P4N%%['cU2_3/jLpLK@$oR[CP<,H`ZE&`+q^>@Gk8LE4iH!u\rH
%4Kj&n'`'CN'B+nicb1\0eW4?4J0Wi;Sj$n_5qo<dcJR,1_ici>i++;Ln)KG2TUn1FcCT'scDRX-cGOM<BRl-hIq,DAgh6X_*[@'4
%3ka0f0>6R$HPAhD@$J?*"i7Z&a';fu'&"(\IbbscEGYIW-Z4&XD.f;0]/6]_gWTj>r9+G?AntT3h'^(SCu7"fl-_VDg4(&b1pq2B
%!NVr8-!s%JRmDY##=m4?oXaF70W5s"&=5Oq%4YGY^f,Ah8j&=JMn:tb;$'i6-$^SVFSiIV6b7)>_9FgelPo+&qZMd7SFoksLj_lS
%#j=ZiYEMW9Wr!95=;?G"HJY,24a2?%.I[/D@m4Q%+&:>o;l"*tnW40TUfg[N9nM3Aho$qRj_("k-.=hj[B@e>3Y4<JpmX`uN+/DD
%((4gEj,X,cLQ`%LT]/":kSrnI-?qM>*8f;BI&>^84e&k)<4b@(HP#;L?@#$4UH(h?;9j,O&/!bcL\m/,EF7SS0!sZ[_>HAX]='bk
%:l=tQ\mj9ADGPCK&pNr]G0lBlWWOf3na9tq^>f#nC(rh<pMlga'fs6V<RZF6%0@OZVeqUW,qpA1b1uquNQ%Pn%!ujnL:rs;cD^&N
%-*0qY"OFA,Z'[t.)g8Sk,LLZbD)7Eo3+]2-T2MF;oAheCJr!-p^hfh/iGnOr5ML%#D>gJiBLhbB<C;g_pbq?'bEA.nKI"3O-aQ:F
%m0(:2(%@lVd>jF&4s?IKmckPfJ6ee\n[eT7%CYVhmkR>=0Zq.kqs:q$.93@pF'[=\06,2"7^3a!O?IF\G0a_-=lF!sl#!lhntfqN
%$C\jSj/--,+gd[\Vi"/66%9o!GSnXeCMlrOi)_&:gL#;.WKOIQ-J&Z=^c,I/mOE;?ZWccn8ZMC_\e0k2%kMFHr\iuuDeKGt:)YUD
%1^6Pp4</`@J#YfNl>X-]MJ.@5<Ao[TTsc>OXT!I'c5*2N8Od^%15]6bn)FmiM^;s$LVGO:^FCMXn;V0rmjW,T,aA?9j%so0Ope*!
%G/dkb4r?^6\;(^$bJcbVPu3bsHlmRVVl,.-;3WZ#D$bG=$?t6Q'pAkp,qL#MmYVhr&e.dE>\l2k)%A;SWh^g\#ArP"*O7./IiW[9
%Nr\l`YClUdXUY*+^N-?)QWO9#'E^mb&s:`Z(Q_<q5"&(JOS7DHGrI&"TT`2=AWJ,/f3u^AH;o2dPOZbRWZ7%gXWle391N(p[sX"4
%c+n\n9eRM)i3B,@j%o7E$F6Q(MErH1pJL6FJ`S&ALPD(O&\j7cCHnP_[o@&_f,IgV.\NOg*>U:E(<=KZWP<9?k7;l4b@cUs!Z$Ve
%h?U/Q_]HdWi@-cF5eDalGE6F8[HlQ:R@$=4K=$?t&G^g9e%r3iN=acWCgkW&$7Ksff+0Y1D:G!`ki%h!W^,ZVf!sMVGTA(feDs$V
%4[G6Qf#g0LNL!'ZMQVmn+(1>-?d(9S3>PuggTY0G93_H2!LG[.S?P&bZq`(6L<!BGE[8qjd[HXf:+%"M1<?H[M..0a.97>E0pWA[
%]o>+6nNF"s&Tp1P[XcdU>+$<`U"X`g`rmH*W]j9m3s@o"H)L:I`=G7/n9".D:_BHr?SiPYTD)b!I]0.ca1&@HGs'gfp]at=JR>g7
%J8@)?Ki(j[cg[FGT$HG=b9<;uV6(r1oQ_]$VSu9nD;:RUhnndBWnddIJrMCp*BB\^.-thkj^D+=m5#GppX5d8C[:h0;96S%KlKU7
%=OK.FCNXPelF`0>k&UcKK]8JQ,/5p*&B(IR42kl+Ud@J)EOkO0)CPCK4I1*WQdKCPN:qI5]bE"7jP_#d+7I+uF<44E7RM9Af=MUF
%,j=bHd'"ICEl=apGViK$\,`+&DJOpsY3hUrHPeaOaG,f^3UPQ(n+em*R*6.E1hq050`MVWUboLca5?2`9TS5DUD7AYXG^:r7(@WZ
%MIdR]5'_cZ)=[`Z5$6"F=s9>_)n4rs>.<*,mg=1h,=9Arp:o5YX4S`a&P8k-3,]C%p/iT4O[BPPVo:)bf,aXP<*cC*`&6JSYJ\q5
%kQM.PW@W&(MD:=_B'>JN1_:jfPn>2>H5F@+f7*J%m'ENT`_;(h+3%^.iRK35N^`TYqlhrKm0rdtgRFFL9F(RV9C_^ILe,]BOk(sd
%[Tj3>?aa4PpI$eSXj*dN8P^jH8;V]9cN\FWD:C;0aM=K^%I^WE=Tcf6pf2F1ZWRnVW=rQ_81@1p%YTGsK\p=EB7I4Ge-"c4VXlWf
%^4(GOoQc\EXJP"@;HmOT$m5*/GIj.61e[?UmG)1g@?gG+-3^k@:\,#d5"8$(/E\HujX7bQR`PQuN&35&UGI>-TL))r,;j9Zib(5m
%%>$9Oe_VtV/n-G>?:YSeH4B.67=j/j:41a;!XI91\2BmZbSo,VkC/0nH)9__*qJMO#2S(RoA%Mr.]4L[1;uYOAh-Yg]KjAM`6X`e
%=ddB!V!7^8IFt!K>YNnP>u&W$@7)q!cBDoVb^aCc[=keo$@.f6LjA[ki>uC47]JI(/qZL;EXIp-54!MT"<+ha^'<=8A/Y4mSqH+6
%T:r(+c7:b=]e"[RippLe=N;Xje(CO[DF`+(9NDPS_ma&i2X=Mf)`\AU._UJ'_*qena4s"^]bX9^UKJ.f7rYR_j<5bPp:pkhnnIP[
%PK$Jhs5(euq*8\M-[$Pb,lSfjG,+5U^\='q%.*lDU@31TC-7,@iSo%2$`#-dqD=.S2.?#bG79@1n"Yor['Zd%2I%P>!B+(PS.bm(
%hhnZ;<)s9/.uH0_no_Vlb?^]eqQ!8E;?U[oQ2js<BY1`NCXW<b!A_VRC;2-E^4gA;c?6lbK'p!=@bcjP:VM4jA1lKM/*#GsdQuCZ
%&I7'$mogo2^A`@!Fe"tGHHo=O%Md47Q`&GWp#k:ac61:Hj7n5U1U-<OQ`QIU_#n7a`X#I4AV;X&fMhBibY7-5qEP#Zn(&T\/\;dJ
%i;R`DqV78ee]%iA_7!Y'+$d+W][^&E<K+9qkNYZ$X]kkuMhD1hnQ&%Xi#&nuj!^WX\MZKg5KQs(>cOo-Z?hF,qKD^8`*\S*R\jPa
%7("K/ofWqs:4[l\%sqF*_:qUKncP\;)Q!/D/GjuVD0^6YqZ^pp`qD73"Rag:'RCKhp-V-Za8K9jnK]UK!G>`Y20\J]@^c_*Ep?i^
%7X(_!IRmVQ\t6U(j)']f99@8Ik3kE++D8nc+be+p0,slaGFE`in@h]?\ein&LZifgKCqWPm#FaR*LjP/69Rc/4G!1REaSXX0Lkp(
%am$HjS\<eJ@l,@rHYmWX;OU;u8)QTMmcUWQ'Zf7Z([4#e5tqr`*eJ&R*Ju9r'On,:%he>R2nt"bL8t]rA)7sBG/[qe(+3h&os'fZ
%3'M2JVY0GkAf=ekWagQRg%2@]T\aqbr#lJZaE^!Sh26\Emr@]/\4le6#M"j-02pXO%(qc2SG,;ncbf3*'!>lsgBj/K]'F+5T!gd%
%S,!,*-m/`(U[#B[?BA,l7I@gVT'#!Qpkl\phH*i<T^=9M1JCpEFhZt.kVPY3,pp0&2?R2'\JuF5Fk1B.f?^;eH;g.3@)2QYhq>p"
%\#;I\GU/0W`)EjLh+&^f6@^(u36%d/UbBhCU#WjZpVEJq+2M/c+l\AjaZ$`diKeTl:l"j#WsJilS[,%b$&Bh4(%UTu8kAI=qtZNU
%o\[FMWEkC*PM&T4:.3gRo+,!G0EUiK9t2Di#[kCX<33a>5]M5Ra$6S:R^3oPm\R2i<!'^$/8bLUnK.u9<j/Rj6lT6U09j+<#U]l[
%dUlB3nMZ\L:`'@F6Nf7p1:Yp%7l,oqb+:_/-g@mt=)%ck$&'$)5aKK*YXpC>f"HnJ3f844?)@&KL%B-!d7VctkIS(N\kJ+T1>MDq
%7f_1sH6(p!$Zk+4>SKCYT\UE'A]Rj@RA[4n:4^2-)HB;XW](S`@:I=#C4U0EC%PA*=6ioH_A''+r):$1-nj<4L(`SC3-DcnPTFKj
%.Hr`@Ve_Bd4D[ga+<.a#O2tc"/&JTQ(NeeN8to&"OB2<*O@<e%G7RK,/pU1`C=`0HG]2Aui0p`,O?ILio@NSE#f*3HHErD-Nj7Lq
%=5_Hb.[43"^,T_p%e/`U/pHhe`*/K5mi@N8kTU^f%+cO7i3L2<F$o&o>e+_[9//o)i<+i<mroQs%!Nk^0c26]?10s-Lt#]m9I=?X
%Sb:k.P-7=]E.tn/?Sh;gj%lr:Xhhb8M<@Bh>jFjs=)c-M0X_&`UG"pY*4kZfM%U<'W5p+TRGtV#/GFIG-T8B21Cr*;Z^74u*j3?d
%(8?=Dr5t#$FF;0N"#?4`IGG)&T\@RbKQ159jkLm.S^%R<V>Dd"G+/U.4H-DG.D&/Q;+kqnOfHs[U1Bj!+iQPd*T2Ocpi5+4I/tkF
%/s\7IfMXd&Lr+2(:hLc9%ud5=/Cdg`L@OeY:.OP;l/u;B).4/$cBN>K)@ja&2@>sV)NIkKr*#3&V.7C.c6G-;cGS:"qRfoib8rGY
%$TSagLqBN:n=h\pQ>kRZ.BPJT]WI0K[O?dQh?0:'qmgkr+,d"$c/a&&GM<Sn=.WUQg#kn\UYad+=N](6:;/;o99TSVb%fW;+^fj6
%C55QB^"$\CjVG5&j.<QRS:SF!U:c3/CTjbOS][G.P(KWNQ&jo/AUPWO;;-d]Qp*>*]$s1(hg($Z=lY(E.<3*"MK86_H"rm/W*ab%
%O*sG=!.ek!Z;`s\XJSlfp*;(R&_EST<`J#F6L=kbTju%TZB2*B1oC.b:SYZ9R(FJXeFti!a[tI&NY>e<SoSHnHp$R1nZ)P[V[>Q1
%")Y6$CocX+Y?s0ujJ$hNhUdANWC6.a]qrUACZnjo]VBn,KZ"<"nP[LLI(ATgX/'(^r@95D>`I"?faf2(Q&a>fc0JG2DZCc`-h9nI
%Ndo*Z\YeU%Rn/:q]X'@@0#PsHM;F8K$']E32@S2AM0DK`h*Z?MKGL'D*)-2XdFKj(*n`De("^NHE/+/cDFKh=baQ1PWRuMl#OZ/F
%AuS"7n=\H4b2&grAg:qmTD2a6C0Zr>8*<+5c6I0#4k.PQSmnT41g(]@TcR+o/a&%SaPKkpN4rKoaY<Rb8m`JH(iO(M4I\fs*Z-D3
%"&?]jKM(+XfOpIf97Bd"U*]cnCruBi<"=S-l^Cl:AtB9hi*Oj#0"_=p$mH7G8)8MS#A)@eS$rOA4k*9Ia]dsDD^=tA]m`FnUKrSc
%Q1,6/8dh-Zl7^\Vk_2ZmaZ;XG@ou&0B"nD-Ur\XGYlC;!/nAmSV2_Y9PYt64`)""ApOO.F>fq-"Y;oSpKE:kRHV"h$is/J4_Q^6N
%JJ5I(ZNcY/)l(?Lbj.<Ucm)'4O(p:\/GYFMNW6"FnDPq,,45Q8Sq!A,L98'iVWB44h%lZ=3amQs"u@=%BQ=SM5=rGN$YfR$_0&C]
%b=XM2V:.Yp5*_Nn"Nn(A9D(eVXE^]np#9<"-RY@JVGct>>/1A!"o$VNd\<I52KNK!H2/7ODs.e/5$lN:^T(@O8+$qFA==<B@=\0,
%8$sgrjg(1"XsLELL&\2[`P%r_a?nKW-9=6L_CN'?QDlQ(=U<&(]rhVbYTWLf?WVQ.Gc(Igrfl/nc``i?f@I2R)R;S]3LkO%H[=$n
%=G,NF>P:$S/t-:nVU9HP><4\;$:KjC\'=bo:;*`,SS#T(HhX&^Z"C'$*b4-9Nqur8@-\T';Qu[$@b!<ShtODGR<u#[>iNA8iR"]L
%e)5S$)HO1ao.j\PR>N!]LfD4]&m"WN\E:eD;]<&oj`[@Mg"-H*mJHnUq))N9X7\1(57X_OahC!!'_.lM1F29icKq.thi^MMi:YH:
%/KaB8eP"Up.)\V3DP<EER(S:Q^GX[6iH7;F^;DaT93[if%soF##Gf:4^W1NY?nQA,,uQsZ)GG*B08m[V!i]kU!1QRui"/G%'aXf9
%nO2c'F2jT.#C^oa3nalhBTKR4!!^"d@0,EACsVFKCE?OMll)Xh:A^ui?i>og`fWjYXlQoTj4*EpNYl^H&Tq^1f$4QA,/ed<Wf3:O
%5rFJ[UrSZtmjn^#J;+k,-Q^MT>7i@6Jnj3r@[`kefWVYJGo`U/a`Vemj18oCg!O<#r]>Hp[g:iK4S]`ld9^dOS&um+`G5D%G3!)f
%)\(`@BA5/8[.WdRkDV'/%1Ygn[oN5B==`Z%-a?WnTd_-?@RoM)`&`gW?@".'IRdHs"ub.TniXE>_J\St=@fBYNV07c=TmcQShI9f
%",)0&N7NV<:KQ,]#CP&:W-Xt3LQ#"Ds(o[9_oa[5dK/d=%%@EkW9IdZ^9:23F@ZIoXInh6O5Y_@Gncms^fp[dBMRpm$d1/!+ku)J
%>?\:1i-*d's"%ZBh@[gppTpF`-4.K8+!=%o#Es$Z&V\1dVCr`8QQnm!$FLK%\c)**o2o@,2^lIQjFsaMTjqp)R`ILk`WlNV6L[M;
%R@,])FcG_:DPt,$DpWlp]oLGuQn#n@jk\@`03R\g\o55]f'6G3b\gnt`ab!McY&iFkoi9HC/?7:Ek2^9`QA_]ikYr,!esN-%k_r[
%,jq"A)jqDZ,nFu`7BD+`Nr\\06pkWMT8snF]We`rFO#Zjs"GF,<j#/@"]E;+M:FDZDoF^ZdWO\JGYC#>NemP7Y'7,qDX),;cl!n4
%n`ut>qB"MTN8\]25'b>_BY8Q3[H+S3Empo*3kIucJ<m97$^qpmi'64!2Q:$R.eOnfSAGIRAAYc]Eh%msJNNIlkjK)5YZ0>Vb!$&$
%Ua!Y69oD0S\F)e@rk'5R^3]ZlOsW<"A^+F&YAO]h<EHI+a!eao37URrXMf.FigMdBchGbi_@"BHQJs/,4heKC5\@QUick(iZVV]/
%DiT<po6`&m=pdHG$>iD3&]@[nT%(HSGBD0\ZOR?OF*(:i$=*LfPLSgt`,./d\OBcKC0]+X(uZk\MB3>k<0VSAY45=(jk@^6*cqs-
%=>;4Z7#=D_6'f0%iOSl:G<)BN]_LfI56-_gIa,]_Ycu^IG+Z\,2VE8pYIPDCnf5YdDK_a+@?tp*+ism?&i_tVI6Eq.HqC+!nW_jV
%Ir"^8O.N3T2Xk$F<8_BAX$#>k'].l4*ZR5q#\K-F<_"YiZ&88BY/WI>aoN@Pfl^'D3AI'?[./W8GH0)hX@!iumU7Uo3G46='uG)6
%EH\Q]qS1^l"=jO"`A;3^N0=$X`7RXrS1j'GIRV9)5>D<?kPh#=7<<HpiLT,4OOA$I)sI^S.l4"'_,%4+o_:g"p/%B;]O7(>-:b?f
%_uPC7\bHp6Ls5Q,VfUaL8*-:Y3j*QI/D%rN.&V>]Sl]2h=/ialr#QF+`uOY4-E%^c351:E:p4I;q[.dJS$1ts=]4luMQ*akdF@MN
%2a\ZeSslE`p0J.mfeWJ.:EE4+RTj1d&Vd5/@+E3^]Q`9GDAMT8dK7nbIMBI*DbA8%-?U@!^0@dWnt?IEBcV!&/3s%4;o2``+i\pL
%Hi2+A0`S7p>L/F"g>]4-OF:0@Be+Lu-EI/40O1YSY!c/h&sN,+D1P_E.@P[_05A8kc\,M68K-mc%j,5oc(e:iU'p]$h(h#7A<l@r
%<^#tL6\i&Ge`(MaDmE2MmP#=A[g+6%Y+UY)23H9R8VqL3Ha[H4HtV8P1,%c$RUt[/'fkJf.rI/scY_FuDg/_dk[Ad*S[jh1aP#%_
%`/_`/"g`6C4;)RV(g#D.%+LpJhKK]8B^)0RBqm1/(5o6#X*2OS:ls1&4+J[/M8,"81k^u_?DK,S5?$ab_tS+<-+U3VG!+uRU4^oM
%3BpG`M2@(:OWS,]ElWa1&MFjd]0^]n>T2`@q3h,rq`Xp.-Ib,Ze1@ciLp#oT6'%)JOu)l1SQ1',/PN)Dmn6dcbs;t@+S2_D)bk3n
%)urHHH&MBKd./SWKAQqLi'O@SN$PhcfE;%/F[TWHUjo[?k3B1Emb2^;Se^Fd!BC>db"-]s[_[K4G?B'lS$9_AG(qAt45W]-B=FF,
%8G&<ldB4\e*ftIL8T!/,%IgNO#k*BA!!a_46aPasnTt[L<'/!%egi$oL(-Y1$b'><1.o-N'\P7?Ee=G#jK].<3SM!iK)KS==`!1P
%kMD44E!V'nIYW(/is*q`'j[DVT+=^@rm,s-Ue<Vo2Y.I-e0?*_M.B`DQ$Wt101Z.B05EFEV.;u'L4I7dl8G'KNH!-i'Z_$]o/`L>
%%'^'o8AF`PI'>");u`?5IM7T/?e3s@Nl>=_Q;V'CWk5gKWTlA<(i/e7)Aa7Q=@176I(d(qd[CG6-8JUH5?k+mbXH=+Tq_Co[OF=`
%g<\l!?'<Z[IO,[_N-]5,5:5;Knl<pF%ZB=/n$b:M\D!rj_V*9,(jhc7g+&n]3.1(=BM2M>Ql?98/I*"-GF[Ao@,"QkEpc5oQ0dnK
%;m"J+DH1k_%?3TLLGUqQ`EuXrR^G)sn[MSQBl'KIqoF.E\(T;\Qi?%D%Y*$6<l`[7k:#t)X$_ikb!ja]3p5^:ToEP''ssF[8tQ=q
%%du%3ei7`R;ug6"VUQYLdH^Y(K8<"fH,Q8M="k.O";6ckW9.f>%ee(cTMhY[f(!oj^T*o;:FkFlK'b*P?H\]`h']A*E@5H+b+-K=
%@T*QH*f3TBd%ZJS`h,+kn1k),BC)W?e"gj#rg%OK;#TkN$M.jO:1n%>nO0mcHI)3,hX7DDLNb&-k2NIkb&.E4XPmcgIm9OjgaX!A
%QIj*M&r^k,=]%R`W[#_VB70u?_!B]"`Y;E5Q`sJ@>mf"`k!XW8Ts%f*;;ZZ1p@HN_/'CfcX<Jnhp&9D7dYs`p4?'(nU#[p`R/<2n
%4oLm4)nuC'pprERVsKeB>6s:I1*4YV#.b-R/h`]V1d"f2CWjR;%W60"OZr]Sq5K.]?8$XN"?Ho@II<m!G?8u_gR_9f3.?=3ZL&5>
%SBk,+of>.5k=LCsE:1nh+QXN$AFn;QonJ_Ob/".GMB(-L`t-Z83l:KQ;WLZrRW4LaC&I`;[Q<nu"'i@_K0.CJrr,>ZlSpr_Dm4,,
%r4V=pr!kBT_bNF):2Th?o+#)4Nd78G1RZQuH8"<8]sp&nYtdf&55OLpbo:p#39G'Qa(.Akl+=Uc@GQ2\U$;1a!L*t/qM&K3%e"D=
%f2ic0Y3P8.cBUW-ea\(#qR#9%)NO:ab,0)>Qg:])3EPnG6g)Ua^?XIteYY7uMWs1$Y!Sn'd0Kp<[PPgT\N@Jo'lt%X_8k3jApc?m
%_q-SSm[5lbRJZ9.M!"F')H=pTCrRN;T:>Amq^oN&?5;/l:?/1+_$g>,GqjriEN$O)P4R`P!TuS7AkY6]Yh.6ESoZ^)*@KeSK'..L
%&kL;(FbZC3@s<U%n+ZSBCQ4J+Y!o_<\chjB7X&M@fH2_jg^lpu'>":7^(^u1$[j<34=rN)VARVqUBGOoQ6R5q/8bM*<M256m_`)k
%p>Z5ID&>`.St+sik9STQo8%1/D+.(UFaF)mf60WnO3D6(BD*OK6kA@pZ[45H/Z..0YZFcW72^6Or2-LA=P?4nVI*3QS/*d5dolS=
%ZS_`Z$S%gO(kLdL@e)&G86gDTs)G6Q7gd.9eD.c;:H;?r;82%aW41s>-6[<6*KO#L!A^J%ico1[h7gYDQ_GH51bEgkb*7"#C&[_Z
%I@Np_nM__aiE<$]q0W0REB7*ZHhl?cZ7?]q(g*Hp_(\\9XGn5QEaKRY_P*JlG6Yor9h(>\^6H=Q50>Ca0RB_*^*bil@t%Gdfi/f.
%W%)/=7ggWe?ZUZY9XRif_Eo"#!Z]e#m<'/1`B/a0#<;\RB0BW_/9[t#0rKB+WqY-!E'*YcJUK5gI;F2&.5d*Rb9`TqX4=_W%)VoG
%X'r8OU/oJ:j8CS/q?%`;KS#GC"B+T5R`i=+Jp=o3V`,N/<7"iYBl$.YedqpX"#1>onD!p<UL$V$S4RZ[YoUe.Vb^ia"4<B#+i(fq
%H3(Vbmkc!k-=P5pR7i8c=AX>&aPihFpm++SddCLMfW*QMKG57MS-cb\#P*M8DH'oe]>3OpY;b9]=Sfb`*D/RO/ALJta9FMO-N=>0
%_n?8P#YiS#Wh[lgh[A%8b"q3\Krq5P*]TluD_L.Y;U2SFGXiG(i-g6NaXfQ&Ms<&`]H`]'9rICEIB<$=kB>rUIed-I-=WEV="SYX
%kF!+1G1M@;8dLC>%dtWLePJA,Vir*WGk1.1kB^,db2e8ZY(X79C"STGOEQIdl3,hJ(/u!T&dSc7P%<cOP\,;/?N;#,;CmH]S)f!I
%1%J_RNC-3D9nIRlNSShUq6G7hSj.6VKGLUgB@9dRC%&7b%q!mtUQ4mLH%9B8)1<+bQg$P')kdY'I(Zfok"0t>qFo&H^2+NBJT-='
%jauU_[bkO%[H")!mJsk3>In3X4G?RiSh.)Iln27q'tnUQg[j<-[LZiEq4kXu_6Kf6Ont2*$)gt7/FcAJJ0Tj\8I-sts$GhZ7?m_%
%)IRJtFHMm@$]ebU!sEAJTUgi2!S*D1qCl9j$`5[]0(gfAd--/3dE(r\*1RDo'$QR/SlJG>H2ZJ&[\[I4ntRG=-dW%de3uC."dq&@
%aZOs?hmgo=J.TI.n]u(+lGo[/p^p-c4pU_9(TTf>"A<81*/\;fmf%OuAbhT1b_Yk''R*eA=%];Oe7-Lrh`Im.<tsLfBsSD>ghiV'
%_D,5AH_>jlgdlUtm8PT*>#1ad?-7ZGGhIc@pkH#S]CJ(.U'*#68UeMJhZAtX.%TDYW2Zr3]@]5aHE<@I,%a$EWSFjo;**K@_.#e`
%!FpXNj:0n;GY+DKZGPt@DGOpEYnSbY?A`U`5\HL.'5qkhQ)?1JEo6Fi^\k0g:'Aa`d+V-`h@_XbAb_Bo\5nS":K-)o4]AYan=hng
%Y0)a*>?YDe2IaHf4G6(?(XO`>ba0^TrC+AJ)DLW\Zigf#h>VVWSR<G4)u_-%EJqf5d[,;6M[sYRXbpQ"S\C-s-Jul<G)Js:4%Wf8
%[EaPE@8;un47CVMK"I#p/8@oGo"1GeIB3cSZ"P$>m+f&3;<^p.R-d:6Cc.+lVf7nr=bf<J0oAT9e>;&43KWQRH#@3`64*nnl`XK<
%-('9ILVCf%`MGYoGJ0rgh%?25HcLgi\ZiljC:q<=5CQW*EDSMV[fi&h)oAPF?G84'pf<pL46LKpbat-3RthC%?[oL`H6.JT/S!VY
%N^[k>(QRTKTiXoZ<\J:u.+g#m3u5@PV+[ushlA@!-sfW_(\"4p(sH,5Wu][IMdG^ub*L@Ph;2G]pABX[JR?td5(5_=eU;/&TA'C3
%nHG?I\SDIPBM"!)c%X27(Y/f/1L<l4n$cBgnm0L?:3h49:"=V":AP7)@t$*o2<B3lm_16[Vs#_Ir2cf:+H\0p_fPY+s)HW`:hqU.
%FJ?CP%W)IPg$O^8"lT>O'35pPh.<f\oIpY[3!c1gp:?o+W6`VbkkUuO,-d!"ePl'\CheUXa*>:3FQ7AY:6R=M9Qf5;qjm2jVn:T%
%9l1kf'5^S8cE/@qr8FE`^PY7e@Ro'ui3_@!.Wd^YY^JTDgp:kHU<IH!?9nJ,;J32Ian'0A0/-NnhN%OLe'2#aLEnLEh@OMJ#>k?_
%0q"?'"Y>\a'iJkqIUbc!"@NYQ;LC;VfOc@_,KDU2Q=%0mK7TA]p!B&qpMFf)k=>]1pu<XqiaC>:9nLClV6E4A'jf_jVtt`3PafT5
%]qYoI?]#U1nrdD3oX>+'R#J>tcat#0mpZmZp\Yco*SoJNA@D7%=m/8><[djfFD[Cu8=SlCE*Kb79J:)`fQ1ok?,`/i<_nNjVRs5W
%71]7#1<T/<rk4E7Q_/-C4g?^+BpTcpAShJ%``o6Yj!_HC4\ER-T0H0Lmgo%dZ$aMV+6qU68CYGG>gkMV\DK4sVRC-iq*F2u)>?2>
%.CLaBFU#&lD+bG%3;9]6I*bPg*Rb=M%t8\'IFaJt^5Oo^YKi>KH<Md@Q!XLPB,.1OOcD2jr8V45M"IjeX5W7/GkR,d'AuC-\&fqC
%'hQ;ulF4UFQseR9G9\-$8I,G&5(MQ`Rm(j-+4B8S`u&[t(=0l2-^UpTj$oZ%q"oto%HEG-ThD([]*-EBHe91IVuC1n/a5bEaE=9J
%j7GgmOcCP"#-s-6Wa,[QDUt,oj*lF3bA=UYRc&QJ-C*Nf,<0f=B:-lDW_o-cQkf$5?mhE51(QrcS/G@WcrGHp(dFa5N2dN:#b;4R
%mqmQ"Ch4GBGTX+R+s6=Dc1jZsC!X0&#@6"e22[i.J:ON!WCnQ=ESpH/g\'V*<W(gN9#C%:Uj_lEB)eETT6o]W*[=IAjm(?37Y^R<
%B;?+,1D,Pm`As-i+2,s[RFD,uV&E:S?rOf^p`g-[N:cU0037;)7K,PP)+LXK'P7G,O!H_t6Mc<l^qlAEmBJl-Q*ri:`tA4>ZTH\A
%/G;aa;gpL])4C$;^Y2u_5t`2q]80s;9MA-;cK+VYmd4,gpVKQ$IfQY=-M=E%nFE*a^Q'smlXZ+qGc/CMGAQE10hMhEI.S#/i9H[+
%0?^O53gAoYq,q:E5EKu[s",[#+6>PMm**D^]U4:=Iu&Q&am"7bfo2aNWeAuA&<Z=`IgC5J>%P8d=ChC+Q/[].8;r]:R?'P`=JG$R
%Hu*An"T-X9lfDbk^pi,[M!:OgEi.^%OXNHZ;r[c&p;_mHa?Por"9SDt?2W[9K)3l0><\1Z$(IlUmJ.nS09;"9I-"RGRJ/@m!$V)`
%oa;X%K?U!(fb5uUTTPPSf!:2qN5#5K([1.sRS*-$T[g.%I?cqB5WoK<D*se+)`Y.CpOL5#gA/uQ<>#M>T,-K^)o:_/BD/_pL\aV%
%RdMU"k$q0BD`\U1\-Y^TAG>u,jqWL7G^lSD+3:=X3cBDI=8>*1J?b5qA\BsTNaJ+ObABAV&<,U'?@EYUe+p,"5^Mh*$rX=dA>t*1
%bf0/*+L^d:oNG'q]`O5>f6)l=51n@fSs0mr^-(h!I4jKF[IIMd/0QIo?[bIKk'9*SR]TTa8%u)NMBJ0>+na6`WLro/Qa5L(m1&Lp
%oaa]d<qHSUCAM%)3V98W9im8XrW<dqkrM@YZCbKO$/4iPdlAA^6A#!HT2#\5XUCt\=5Uu7HuK\/35'P[ORMg84O[?c<aE9]4GmIr
%e#9'4A`#.?'YNop>qJ/[T"T-gjt$h`ikNU/dE$`Pjl:3uP6#9!]^STElfDbq-Mq+E-';^%*l[fbM\?LZTK:CF#Eg$[`\m2ql;h%k
%N]g]T+i="Y8sFakj?5l5@($k!_n>@5qg8.?e7Da;UU8fD2T1@C\5VH@efM6k\6Sq0HM;"@mU;pFman(r(u]T-j:D>A&mm=i$NqD(
%cGaA]=1os+IbdTr8+o<B5,%)PlFJeJlH_n<L57V!dns@B+9^_6NFd+-?[6s,9_8o?[&:D,>eNq":0nu[kP6Y'T%j3c%TrjbhHkWO
%-C%Os&ijHL9sr!C#<.pOH=f?5G.c\%ma">+PS_=LhQsr1]YHaZ_7Mgcq_RN(fecn,e$^p'-^cuKX]W4K,GuXoPH2d=UDim96(q\j
%c!JnpCR'uDMiH`lFfj!*S[!uYAo,4$LE'YV!(_Gd4?.i?_^[ZF#nl'RHp^ojfD7jH,sWa'YQl>f86c/4JX[tMNR\?`DaFqN-:-jX
%7!mqhFM9uVQZ%\gAoWJ.nCq(ah_p>;0H]scl9mEA0Q6b5>l`FEZ+m(B^dT]W2=_4ZFc]]dV&1J0"To]_T-.Rjd[$8j'XO<*'tBkn
%d^lgG);WJd$.mjds.=N5bS&:n$eG7OUFZ@+dga0c9HK=[#k?;>!7.(DTFktScY%:Ym0Wc#&V&_KhDT.L:AD<<bJ)nKr/b:HI*"Bu
%a;'+CPn-TTki8Pl$tb=PUY#L=lq-cOoLOJQndD8?`2t-4a')nDZFfmSA>LGBWr+NV4F9.sPJeQ+/AY:GIM=ooqFies-p^SAn0KHa
%kU_S7A$h*_V(\+h-MeDS7W/)L"hq7TmOsE;9'H8rk;.F2PV9*5A+aUZq:[rCLjANjAleZ$aYU=f1VYSer_*lQ^s2u?nG+k@oOc\G
%#b`WL67<^s:mFQ98KZb>/tE";V1CV8oUGqLqnPMXgG3>e`mOXELRp;;A9L1&T=`'Co(V8>B861k@=#C#gDI8HXNsQrmaoiV5!%OL
%!^=!f-#:aEPuVe*`&7kspW**-V*3]7/A(l3Qpid2F06b5`*'q::+ka7?OM:'9g4'hZDI)=e-tO":1\Fk,7fL2"\EgYr'pV,mlgX7
%o2BreJUZsn'P=2+Y>UA+=kR;Z]t6KkCOIa-X0g?sg'(,G<Q!8h%dkXN`K[s0AHE)@C`DmN<D>&@7P!X"EPBF)obLI//$To`cF7Gc
%N7IFmF6EM'VnLm%Zg-]$!fd0V)'gm-k0=%b>c"WH^:BWA;g"#)i2[o8"6'/1?4)kel^;>-q1[)Ak0'KD<^?Ui.1e[mf&W@WT#K3i
%<*p#]dd[lC>7GsR%r-q!Y'OORnb,*F'J//;(+(e)-M+_d'0i3YZF'^snG"./3`-RN9HHF.<SK+\`BDQ?=*2GZNPm`li;:'smK%GI
%C*'Te>[aloCX#jH5B8`=oP1MI6*RUhicc)eUunOi;CE2LGcT#,!)YlHQh(Si75nn*q2p\8?O,lXMDlgeAO9nDaqFAd+f5$GD*Vns
%rkC\cfB%K/4:VRk"Ts]c@A,%GaDaM".h+&OF7N,Fa^4bWkDuXi3Ir^@<.@>Ha>\O;`DG69[*,$9:i)s/>PVHY*7.R)qq(s\iMFp>
%]n?DP7;b-X7l0?:?:<D@O@Q$;L@[0?-dO+47&T5Q>qb+M*@8NN'i+!d_5R/2L-`t7-QgD<gsejQO@7V=gQ/i,rl79nLnd0hLqaUC
%GgoN!,&^Y?#/W(q*d%+lhGlsHEStPLcl+At@n#<aC@[@7nl1RVT]m]h'^^Xu3FbuAEIG#;PU:D]OPkqB/'\TiYbdu<?%(]A]toM0
%4CO)'XB"8I5?e5*Sd<Aikkk/Z#al59E#Z4FrJFEi<%GmdY3hVk#kYF[,F;g'i-`t$<H]N6cC'>f$g`/W4\r)pQN75AXoP?ahg`A3
%D_LW<fWGcDi530<+"P]$9Cd>I_EfUlGD49<?!tZfA10!":WR$tn+M@)I!OLCoOL;a[CuS+$I-`s@O@sOVr4(uWAF*E]RXj<7].n4
%V1R?@W'$**f^^;O!3'?C=Ce7g.V(.g@il@AZC[`0)1>:gjRZeEiKK,Z$]1<Z/O`>N*9MBD;?2O7$X@c8%YF!$[N@<=n?Pm)]tlq1
%L3r21ZSCB^dWd5G9Oj7)eBLMD_9@DC!o&nc"j^i5._PGO;Hogd.QPb,lRN0hk%+YF2ug?4dll[fac3b."nb)9_(S#7_Os%2#a/.N
%qj0L!jIVDgBR*OAk,6O!bXciQZ-s9s.eK.r:?)K?Sf.'8I=5AXTBbaAek4#&K(+9Q502q_UqTFXrJBWc\bdc857-E:I/+XOk.>pE
%f(Me+#+U-B[Zu[D%]Gp&W0r+rT$0(:/F=sH50;UWHD9ejnEng@OoKIf:Z/r2Lnr@(I^Xop1-GWhrldd.<M5=arV1?XZl!m,b8Q[i
%(5gn>muR(Nbjj5AVeZ`++jSl&RVE4[83=#bdWR%^!<R$kQ;`5k;[s,O77=H0+d-T7gt8iFZiKJZSNo^!^5o&a8:G+c11a+]"ddYd
%S+$eaN\nOR6L`"P#-R?I91ji\6@R:0n/jF7LFX!"in%DYmDEcS.Q=j;Mom4XI7ksjV%g1U/t>"-\,`et@>-HjASan)PX;]"DO'J2
%+Ok9g?e_8Zq3q;m]2s`&.hOc?C<ENW9Z4rU.#UOCS_bn^^=Q\m+aB#1Cd,:]+(O3d5L'fMI_Wj/e_siJjZD6tf23RVCXRGa,T?.)
%-;Im!,.!A['F`n.[68NQdZ$<(*i!ji/<;UVnM8I>][f(<SH@>:%I*(TqVX-tB:$L"G[e4g.$MK;W86j@Qra4gEj7qZ,u3IqaOL7B
%?5QIHL%cOf)ojf`>h]-?mkgHJC//CH`lhCE5JiHQ<WQ*o6`9Tm[uW].Tbn;8bT3kQgRj$;i;p2Dhh?:ko"f82%K$s82S&iA%]t7M
%_5=/gLJ`L*lgGP5j%3l2_$0s&p66+l!5uo%aj0c8I_0`flLlXqc-)6HCVoj^"F_*:[kSKg`+pB0M`'C/S-8GLfI9Up7H^4O;)[N;
%c%62=l"09k5"%&W=)'qb/Sp6ZH]2%c2"Hgp[Ah1_?HDTE30nnCgF*6/79YnoXlup)+CkANbBqWT0ijEaVe`R*N5\iQB)@Y"+Jh=b
%n)q!AVtR-6Q*IhBBATr(Zi6FR+XKM@/!85)07s&j0em"$`.*/R9ZnR@r<C:X=$)]FhS`U4@rt(R_NN4<@r?UPeT\^n)uRYP5]&Ju
%0DmQh[Di^+6K[gnVcnmRF&hU>L*p;-)]o!U1)t@BS=rOAVlNK9>GMYh"rhFO[f1Nd]A3)7nF73p^j;kP?<dV"2knMW4$k1,5>N-5
%N2:4^k<Upn>NT>tX0<"Fo1\1'1\;YW+3$HhLH6ISqj\Vs&=!X5W''6GlV&,DF*/NC33>&nYI@WC/p$LXp!+<-Q@uoR7d+]mM]DeM
%.C7WOT`!BmMSkse!cas'k:Q55M)i?+3KpuLrpkT*>*dKi-qQe*j32/LJ1eC(08-.N\Sa(hm/-b[.e-LOC&;t^WfrA@5F8`<WU"WM
%UTKE*qs2th/-?S0N(ZhJ<Z8+&1/oF*.sV)!XBQD6SkFAkWnfk>^>2tqCVO2j%6CbZaW2H7#2++`$[]Lh?W2o2H/4d8(VL&IC30-T
%<?:AQ\\k\)"M=W<:"XI2g)?H;"H,O9k([@^4JDf@^=3QED5FH'MZG&I1Nkb")C2P:fa&mrfET;PgSK5Wlh9+2heqr8jL;eKT7/r?
%@**2K,Ngf.UboUUk>?fl6oOT.7.EUbIHSGah`oX`Xg9J3J$",Z_O;`'k['74/r],`I%H'pU'^R7BQBf`)tRn=n)IN0j7iK^^YS^d
%h_MC,BE&r;rr?)P3K[B%@a91D)tTYU6Se-.eSQ2MB0&!C&P`RE53Z-5Btf\n:<f+`?*<o`*,E7=luY7;LH!&G4[%9)r29-If$LH&
%3#:6?'B`Ph^>rP)Y:f!Cg!_[HX+*16o-8O'ETaef4lPqA9kX;##03=$%;H(b^Ir*`I7>Ega3@^tlkcknrn(.]:b[*a)*#jRkr$2B
%>M'?O`\'1pQ+7^F"uLDES8lm1<bH+<G&L_`Y:m0E3!5cB>b)MRODgX8?R!C-j?*OcE@a8*b].sB`hN'dRj%)[#Y.iUO3?/-G9!X/
%#^MrPcRAYerVcT8BRpelr*cP`h*jI"e]?L)79."s2IfTUrm$H%3A0)2KW(m](Ah^N;"4I!)=:TG3I[4gTR.F^br[60(W4YlDn=)+
%4GDZLZIs!ohl?oCUD=RaYH5l$gmZF)/7<-F[:umW'oN^"=4j-[\>6IthqoVrC(JLR,]A_I!esg?Sl0J?2c&Jio!<Jn@o6bHb<dLO
%9>O4W6>mt+RHH4"^)$KX[-WYo/qKXT$N\dn6s'O':`BMEJ0<9\e1L+?jZPet^5$3DYi8VQPqVoKV1H6Gj?e>Zlq.o-(Mp*%bY7qa
%QF,0%Dft.[aj"(;.,X!GmV:Mp_V>_@H$iNcSSWHPIfAP'J>?j'#2>@"[TfqM=,.-[Rj;YJlua`+N.tMhg+_/UgsUGnXH%To#GQTI
%9nD[7QAbopS;@%^GI=Yt.#H=R4d=6h4ekYO,U:c5EM\;Q=<_X;HtGV2.+t5*32C&sap=Xo(,XjV..YAC9E%t7hXSY[-0k2]$ts@c
%9N6aeSTK?q3OX'8kKR`%</cMf3Yp"P/HctqaO6%Ul)ZtU@Q;c0p+dC#6*PU>A+:i?Pm_f?HQ(Ma&`!HqBE:E""_Efu_V0pqZX"gK
%C+YV>@6"KUS`CmY_E77Q8BPg)g@1cS)NpDXV^4L0Q=@>Q87bHKQ'qIR[!8P<2FD@ng#dFXFWZU=@;K'c56LJTAY#.DkClQ'[+1pQ
%oJ;dpf.D8V>/k-sH.K?+?A3;?L,G#A_XUie:=_LkhC;"fja6WBnmLsZY^gW]M,s577Y"iknGD@oUuB`'3*T#tQ=IJGKpS7l^=Xt,
%^1U.`+f3`E2)AN?G'.)X*F2nFlOd\M#ITl+[':a_ELlX'9:,TFbPVY20D3$1H=,F>_9ts5-.7TXcZ`iNU)##f[1q;^`cYOqe[1P^
%eABC/82p!ZT<^CHf:O<LZ9q"t%I0pJ;mKsV!IbMa*?8cV.lm*kFQp+BoA)Y1fHUqo[[4+S'Lt!rNSJ2f8N&")M&:Yj(bLOm_Brsu
%!/!?;'6.=VVkOCu)iHJbg[g^jd::(YP<`2a3PZkM,DA+=R@u>@pu5,YW0j[>2[Nn&Q/JB?[ZVB9EcMHG?YN=rXrK'"-)P!+>0\7C
%d)QF$PkFEhI!oaFB[+Kh=LNFIq)-MUJq;oP%)HOKpXST^6f!``&$`VaZB(o@@2l-4BUis-LO0>p?_+0::fN!8@u>+_LOAk&YoRrq
%)sZ933qdPD*fe7R7[YBj8%LI[nYiim#/efKGRMAV0[RA0TdRjk7k,-UHedpm=I$BiO2]Dtp@r`>f[@j7D$VG_:a&,0q.G<D1upj$
%(B[=64&sT8"5Zh$3a._Ko^2P)405Ku(<"bIr)hqWS&78d0"5n[4S]d4?q_#,E>J6=jki)W?iMbQmrXo+WWq,p=rFL'*#Dc%_RAiW
%<bm.o=,'M7.N*tU:=_mL)&k'P(tK+DEnL.^lCs;#=r.2tcurrK]&">Re%&$Cr'E$(XFCQM[F&ofUtPMTOX14S_&E#<Y$o5SdKZ(m
%<SK:FrI/R_Y5OgIBOb%WlRZ!+qf#?ZE9,oP&G,Ac@bB>R[/hQGbA3NjNY\W:E6VHi^n6]Wntj5b>I)gr&F9Wi7M'_a_L?&],b%1F
%Rf7pDFX5rcX)nf5qIL1pg9T4jV.bB%D5YVsnK#oK1(*EbfO.qUB?IhL4M"I&#*K%W:!QgJTYGO+$,7P$FZlL:f`I/I,*df"U9MBm
%+tMM`J!WP;T6MB6PYa8%^'LYa9bFB3?X9ca@kfo<$bWD7$ujBG"i'6W6R2<2%Od@4<p/r7YjH"+l:<1UM#e\E#4c/E8<:M2F[jca
%jbP2>@#O#E7kHFS4n>!#.^D9=-1]q?)Y[VQ1gI]34kdF+o[i)(R'WETn6V?T]C5XJ!(<XfdXT9FN2radfTT7_(Kp/`L2i4!'FV43
%nS4`Z+O.TdIjF6':P*FC6dfA,^iGsD2'\*1ULr#5a^M\q1qKUq\&C]CA7SI?-'$i)a08iFs)<mqQ1sP6;OOTp$5f(;>U8+hogd0r
%@Q<C*7u;X)]i"T[C;UHa%-r+)HQ'n+$EAUOd8@Aq&&WZf6]Dg7eAHH0m'83IT)56<Gt-#r(U4t?WlKk@@]N"tY2C?ZP5P4&H`0>Y
%,)[as\R5:QUUX(M&]XGo\%U&LIcP'c>iji\8oA2L>OGn+,AZUJVN6g_"CP<FLSLC1W+R2m\W/XEne:$RZ[Tck`Mou/Pd=Q`lg8uF
%0(ccir"3,d_R/F%*b"c2:V9`?5q1tGl8_]l,'(*[pHFLN&]bnnV,cbe?-b%20)0a>m9<lT4F25`@,\%?K^XQ6i=)E!)=P`aQjW#&
%YOKl1OU]/OZ3nd_L+&Q'I8RDCrN]GMDRosD8EXeFfX$K?gb?Fg!mYDmJ"/A.P*:E_rE.H?cN(6clcp;Z32FcP/dMU`E..ut/Vmu!
%U33SkccD3,6gV.<4Ll:0qI$#Y=:;`3/9U`)IHJ%MCX!IE/!k=Z8"I"kP!B*:Zr@N?,:S-_g-$l,WD,M+GoU"6*UN&keqF=E)JMWb
%B!q7^f$'hYj^;5;)&L.UUp3p_a\Z3">]<@#ok5d&As."R7m>Om[aRUTbAc$>1.iJ:STWh&V&))-:>IXh)e8,XaB'n_3V/!eRU!mV
%<*jV?EB(C16kec.DDOMc%nGi\K_%'p#pAUu2u<-"b2ND!:JM`UhBVkBo,F?3DsN*!L7MBV,IA5ODW6R6qWJqQfsR686EM%FSF4K,
%V5ahY=?uR+4>M<!$fBmg5KtL;6'&KQ'P5(+QX\2r7`%^PAKb.'8hOTAeYR6ei1h:'iO$QUJ2BZr2KI9DJ3Us-@C,p8QkD\.KpTfa
%I._S.FU65R'ES9[H6+;#'>B6UU_7IuM[gqW%pNQLD-S<>c/j^VAIUlQ+W8H8b=VQm&>2l=I40!9A[EFUJ$$$l*.S%:'X!\]6=u0:
%X&1Cp#+WuoQP'^4rOP-,l1IgN\Kb,]G^$(,Hq*(b]+ASb""GZEKUShRffO^h^ta]9AZ#Qc6q_!03D(P/]YYH?]P-hP&PLl6NoL_=
%$asQE-&(kqUVLV1]o8,+A+UJbdTU(t>!YEJA[l#+S:BY;BW41SlA>Z<\G,#5$gcR[;YBr:@A,mfI#0s)`]ZNQ!?oQsd!nGs)ro=e
%9MsisF#]6uOE)B8C/1h#Q?^LQTh!e"$.q<H\R\KD>q&@W@kHdt1c"IH7;?l%)^A.p+2,d0/G\H#V1+TfV%Xa_C5RRd*L=_A$3P0E
%=Iifjl@tjV'ICEt^]j?a/89P._)rXO$0=JWFS-m>fkOj%EX*^@BcrIm2]rLgY9C5%Omd:SH6rMX/@M^6:1jFkRncCB#uXA=NsL(J
%n)2&:=h[,OF5J1pGmnj:550G-OINL$n*9NtJ`5kHm\ibk6iYA?Z/i?s>IqZ9eK/=Z2p&Zu7S[q,2rl^@j2_&HZB+iKOS7Z%=ef!o
%Kg9?FRC3]*Itdqm7eqg,(Eqb`:otR2TUtZBj\Ig;WQ98B6uo!i6e'Je\NK#EkV9G&5iWHT@22D=<V!"'oGd[MVJ_0UAC>P.&VVkF
%?7hc9^/Tj_BCo7moa19iWiaLN':U;i+?H[,bdQFO;m6*WYtT@#2oNg''(6<]_N'*B=h4sl;BHVdY?f@Nd3S3'2sLt[;Q]g.5crf'
%_1t=Pc-+q$I34u?Br''GlM*+E>7,2&gEXUaW9EM1s*\eXM"`sYG=:2*L'eRD@%Q#3,<_0]\N:)4fVbq$;PcB)-sL8&f`@$4Y;E*/
%$1g>I4g";a^CL#jF0@d0()gPGVn<sd)K\1!iUX6i\n>Z[>Y6Xsl-.3JY'#Qe^(E7S':&4?ao;3@i)oi^&)6QV1s53'3&>^V2RAi,
%aX.<Sl'+]_rHD(fer6`=oC*4RmuS9%&9"uO\*oZMS0q]nHo9]7USm'2kTk5jW/4J#Js2O,nD4d&R@S$M"ZWYW9DQI]3fNu*MRQiY
%Q$_@6YG8T-V`9>j#eBs4do:(>E;A0VpYqp?bAsD,bd>=+-Z@+PARhNkMA/.a/DFfH9mR[Hl^JU`,ZA*t6C9dmbrdq2gD9+9CXUL4
%8u61Ff6=N_22Cu<Rqt<SR?=...fMMdG)W`-?kf>37a$c.%2$a-.]mnE9p9B(^kV&_/P.$=ja1@`:oH1lSNY95[+F]gP!cIYoH9G?
%-R4,#Xs-H!cH>oup)rFP"g,>_^C+Bf?`P$iT>=P#?FY!Kr?[kY7.:+`][pk-l!V*R.BRBHDnLV`&,B"L"k(-d?>[BgLF#cu1Jm]/
%=amlVVpZo';[i2FbeciO,YlXmBD/?>#NdK*c=^JATkje+*TqT@2-Pikn\^YK:%pTQiO]Fk$Ul$SL2lI(%06X5I5:O3fZRo)N\iOr
%omL!]+dopBl=.c7.11%h[^K'8jn6LnL'tSX]'CNQ<jnE-SKAsZWOAT$RU#&Y8plk&D)oZ1I/V31O0MlIVTK%I/6/hhmY:t'*%a>K
%#2'/F;<Vbe-*ds&L"uh.26&5T:q%_?n<bF)71\m!R<_HH.q0/kTE2s$I=P"h"^3./4T`a+QiW)PFNUA)d>4E;2@WR.7=F&AiqLgR
%EqOb@gDrj$>FlC0hG64(oDPf15Ds"q3t39!^P0ss["D7J]%/D2_Rc%T/"XSr.K+4?[QD$""K=hPiA5=[Q'SHnD@jFC`dFE5c_lF-
%8JReK1Xsn`^'cFM\e.?tV$5&TE&JVN+=]dC\E(K(,_W4qX>.SJ/F&jAB9Gjn8"sOA\#"o(OEF0ue*;V:@=0.P>&Q4?N562X^l/BX
%0$dINnnE#V@T]B`c"s,]M8Rm'WGTe_Ob2==<Shb&V>gR(PcQNV,Q+&MEl%t0T;M%s@?/O]XZ*XmmcN,a!G=H2B:j[br3N&6_!?6N
%&.(]<n2hOS9q>3:adh[X&@M/CEC4Oq>.9G-Drh>cK:KWhrirA"mdj4AN1h\h[4iKn\M5qW.N'@VZK:UnVbGm?+N!@);7Gl8ho)RZ
%9Q4@>W=1H,Na_';B/f@-I'P>Z"*E-aP.5D*A46IRTm91-hV6Q"lbClbHK`3=+9USUW'[X<,E+p,1KYnCW5IE4<>sW%=Jq1-lA<t%
%F2A"*UNgW7RhI-$E2;_i6=BkGjc-B>6@5>-/K;:(#uO`\-V)n?_)/?oThoo9X5<DdJDk'1(/_`P`h'gU=[_r$54^^5N`t]CUd/D?
%IeUuWh6rj98t:n4l"qp->bC[==Z2apfD7D7M@nV`RqQNb"0!'(mX."1O/J'mhVD3]7aAN,H!ejM:"s2J,<p3I`':^B#-dJcUO_*"
%T,fi+d3=1gEuY:^BB\2Lo.?`lV&.Ujl"M;@MJ@>u$oKg2@$-#?:)\3CD6'a^rO!?7^kD+Xh-cCS'cnn-NcS8gM(O9^R]h>RL&Gti
%C7kgBSb.[SdMbCu%G%]H8R2D>>0\FNIU,1Blp=HG7E*4OhRjTMm'DZ9k$flC>iXPdo5;gYN+Y@q\HTT#)Q[C)mB*Recm2tSUbGk!
%Jn!t]R6Hd1251%S@H<^68;$m^pq5h2C&&LACpPbfqD3B$^AOgh)DNB1L2mgL<VWolXOH6hf1[VoEZ)RDl:#8Ajp36lTi#O;/B5YG
%m<g'GSl`),$(V>G-Lo(+DT,e>-e8aaqJDe]Q3>;gKce"FDL8;TO&=;JN9='mdK8)L=;-.oe9QV-bQUJ@Ri@_2_C$qJJ?;X%(toR?
%)4PL0(p0N]%c^hak]G!mJ9>K@Z0jT#8^rVpd)ouZ=9Y:pG^-rDqspl+6^@cc\n<9rfBio)=Er4A896^k*(RoC;p!KOi%cN,Pp?7@
%2:q</:\dp.FWUMQp6XG;IAUA>Dm8'X8AFjrT9^6^LPUW!-Cr2GhN(.ps+]J'17m?+d-fD'CGGJn#gftrJKJN!4pBgDCtES=X.r7A
%"$Gr,VfFPqJ<d=_QKtRe-d?0]Qh98b!lY[1+O`$Q,P'Gfl*?mujE]cnI3#"NAnSE/7<7mr]HU,IL_9/Y\)<fAdtOLNVB#o[BDQa%
%SVM\Z$Lg]9,_50W*e"Shd@kJSSBj"raH5cDG6:qajm5O:4NREL.aObp5XkS?/C^>Xa7#t?d"\=dj.QFdh./-gG.TK=-S=MLq.4ph
%Tu%'JoK.=D>R1XK+PF?,"G3PV*B@q^QiWOmUp8)]VnGmnkB,4te#Q6kMYW$R#E]1F?;IRRNYu%B18B6($qurX[KqhA'kLr&0aOWF
%l/2L>GZ$["1K5$fe2"1ubJj4g"_k*nH'N\1qm%2(oF\[.08.eINgg;3CkZj'R;ZE:A>m9:8nud'@</mj'q_53HW#rsKLhBBc`Q?B
%<3i2[rF<u%"&f:6fFq9OjH.4AChK3N56#_EeWBV?-Kl1VCU,&5\Nk*X$%Q!lP2l^;Ur#/oOH.@0kq#\*6XS@t8L%FC=qbP_`3+04
%<3200qRMY.AF=aaJ]7Wddp0W;\R%FuR6#Q84)BXYj!qYm$7%;5cN`e)\W,m+F[ijn_B^/s$Z.KkL=I=UC/;tfO8oO]IP5-MiM_r^
%k%A,D:G*p][81$fKNFQ/-/VoZVSJ2]IKIlu>im1\WF82uJc\qJK%n@`<W(>uQ@.Kt[0AP:%%f6UDo62dbI%+Ha5TstpY=paWM_`c
%P#&a7]Atp#`T7t/9thTiMIuqA<h:[eFgLS"kR?BF;Cb9WhH!Sj<A62SKQeSOm^(WFH[-s!j`4&T=Zf(slEf?S*Q)C/_/#OH;DU?l
%kPD8dBj!b5@!--"Wot0DSC\k)7.eGp%b]$*)bO,65Dl$?GI29q/>c^mA^cB(,V,:9L$4)[<ah$B^$ltf.TZOBX:WBSS8*$GRVL,2
%jT^1,_De#n*&8s;l8mDfL`#$J@-T',aaR.Rm&"(?"CRja,#k)n&PU6u[b#!/S`I/sRI@GfifFP/ht)<M!N6noq\A*C=doT0MG\!.
%18a5ZgZK?:hN4>K^IqH[M3pR,_JF?8l=G^jbY%clLR/W3Z&_1K2BF@(d?h$f8f*`5__g/C=ST=kN;D6G&T2t=IHBA*G/#FJ0-b#A
%>2n7Z-^%#8pc>0N+=RcfB1cn97dsTHJ#h]IG:>8NV)_X^iC-)_aVpN@ZFc?ehIlPg-jZgU($FQ$c97%b\/B;eIAZg/=V&1XS0.''
%Y%^ei7o`>J_Y5XRbKj/8\kT9%#e/N#Y,"MQC;`oSlG^dl8Ir>*pR,%'aREO+CaOA'*n[Fb1gN+?q4B=*6X@"?lL8?&m;F=3"]t&1
%b44nqoR%Td4K9],[:BQe8P$Y/<3ckenS>1_R/<#PnTb'2e(((s!bRi+f:iDm%Zt"#'#Ul*AIE2g?\Efe<l5%jiPu(k9SFji)9WVq
%o^`TCIgirengCF$(;VA5Ib,d'l5aah93*XgLLrG0ohdp>dR[2/=_0^hpok7sYaU^TYNN7.=\C2rdbq!=(-^P_R^tutU.L/c7W/1j
%gr>h]Mg1(31fsl/'g3&g,C,(sGumU[r'akkS6/bBYBXD0q,upn><-D??CfKqM8tkJd3RW;Sa?_E%Wd`u2.Vtu[9nBR=1MK:N]FB1
%^V^J%cul\:T91,M%VAACp9Auqh]3X`UINt:[HoQ4s,`k@RA+pQVr?em?Gd%?+r13M_t'F?a88_(LR@h^@GG1JYnR_g7>BN9HS@qY
%\u?YC3K3>R,A:"-qhsQ#`A=a6bL<rYp,S*/rA;OBhCNFN/N][IbaX'UqHNX50HS-a6c%6NGC6aP0,>S?;Y+!R,BG'I\DL(l/F.N'
%3=Jt2J#ks+M3iI'3P]+j0?.,80mp5gcEX9Y+?$40l\?g$'H?E#AW)-7s4'AQo.]s+8?tCE);*7]*B16/:R_Qa&AK-TruTNcS1W3b
%>Gh%%C\p7g_'QuEf=mX7[pbN.KkbY7"Aj@N)Qd)YgN34/hi(qE^KC7:@l];jS!*Re8m3'K%2h_Y#UX%l!adPBG=*Gu+$F+/W0s:U
%C4uT^X(<4c6?"OR28].Mp<[+)<I__#iVhBVL8B;WX<TZNK\`C+"[Ba@+ZTC3fqtSSa$+O>G`<Y=X<TAY[]=5k#J:s_8bd&!9Z9nk
%#griW/\J8V$MiR1qjXGN,FQ6uT[Ph:'p?5[\<R["rbiS;\R-q>CR?d4!pi'jo"CL57st.,[XS2L3BL4VSRSfo.IhdA')[-b4;Q4D
%9-!:;?HtW/e&k)#ft?ZY9Ln#AYM[_L5H\:rN:AH4`K:\a,L7sYP!\k!*dnm)B9h992p4'0US7nLgmW7ZL$*Lo*MR1:=ppYqe^0&E
%nGO+PH]%[6UsEI3LQN?T/baJ4C,)nCrj=NkkELu@2#&%[WaZm[G(=SH=P>Val[W!j<tA!gW7Gg&f<cQ1Z0tmFi>5.6Z1uAJC`Zt@
%qAD4l,=qcIN2;klP?#O"2#+QL[J'`RSFM5Am)RQlb<7C1l*WS]?dho&NUBlQ14a8[ZqjX"h$Qr!kMQ&7p$\O;D)F0S$HEtS=[l0Y
%BoHX'DWl:I.ZrQ)(hoUY_5(S:2^-3.7kF!!c(`S^Yl%2\N`h8RG0GA^4"j'#Z*,8!8O[bbcMu4oN3]GM]tBr=.SA\jG6*FM]rp7P
%%?c?^(6MX)/8%4m:s)&]"k)>Cnf`K?OrB43P(8klAk<E``Tg$RDYeA894!QiJA(9^%LX9;?S-UJ)R"6em*#?jIJI=T3NWJ967ljI
%DFkWWETh[=:pMI%rqpB848t_'Q%0%F?n?XD3,G!$fEl\I5MqFXYeO<:pO=!"PN2tQ4('RjAj3sK#n"FMN]0V#W-L\5gW_KJ?KR0*
%MU"-g1`'LNBuW0d6l3ZqCNrK9hi'J&]NS^)ratD4S92E6OFEB=(X`6XAj!7=?S&X:I^<SF4K/Fj[G%>CHnlPBmJ:]7:Nl[9T5-k4
%qsS70=FU1gs87+`5Q6T@o#H7XT=*M8^H_af^]1oqpoj_pj+$lKs7DpJs8)cnm9`%@*eo1>+921uJ,>l;jfe^=s8KKWq>7r(a++'R
%s7NiCJ,Q9pqWEA*lbEDcs*4HK5Q:1[rq<Pqp<Wd0[ibYH^]*j)NJ3;Q"on'&s6bC3n,E=Tra47]/]7~>
%AI9_PrivateDataEnd
